
FFT_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014460  0800dd50  0800dd50  0000ed50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080221b0  080221b0  000231b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080221b8  080221b8  000231b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080221bc  080221bc  000231bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000214  24000000  080221c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003c5c  24000214  080223d4  00024214  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003e70  080223d4  00024e70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00024214  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c4c3  00000000  00000000  00024242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031e7  00000000  00000000  00040705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001628  00000000  00000000  000438f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010a7  00000000  00000000  00044f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a94b  00000000  00000000  00045fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b211  00000000  00000000  0008090a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017dcbc  00000000  00000000  0009bb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  002197d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007048  00000000  00000000  0021988c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  002208d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000318f  00000000  00000000  0022093d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000060  00000000  00000000  00223acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000214 	.word	0x24000214
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dd38 	.word	0x0800dd38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000218 	.word	0x24000218
 80002dc:	0800dd38 	.word	0x0800dd38

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <strlen>:
 8000440:	4603      	mov	r3, r0
 8000442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000446:	2a00      	cmp	r2, #0
 8000448:	d1fb      	bne.n	8000442 <strlen+0x2>
 800044a:	1a18      	subs	r0, r3, r0
 800044c:	3801      	subs	r0, #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b988 	b.w	8000778 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	468e      	mov	lr, r1
 8000488:	4604      	mov	r4, r0
 800048a:	4688      	mov	r8, r1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d14a      	bne.n	8000526 <__udivmoddi4+0xa6>
 8000490:	428a      	cmp	r2, r1
 8000492:	4617      	mov	r7, r2
 8000494:	d962      	bls.n	800055c <__udivmoddi4+0xdc>
 8000496:	fab2 f682 	clz	r6, r2
 800049a:	b14e      	cbz	r6, 80004b0 <__udivmoddi4+0x30>
 800049c:	f1c6 0320 	rsb	r3, r6, #32
 80004a0:	fa01 f806 	lsl.w	r8, r1, r6
 80004a4:	fa20 f303 	lsr.w	r3, r0, r3
 80004a8:	40b7      	lsls	r7, r6
 80004aa:	ea43 0808 	orr.w	r8, r3, r8
 80004ae:	40b4      	lsls	r4, r6
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004bc:	0c23      	lsrs	r3, r4, #16
 80004be:	fb0e 8811 	mls	r8, lr, r1, r8
 80004c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c6:	fb01 f20c 	mul.w	r2, r1, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d909      	bls.n	80004e2 <__udivmoddi4+0x62>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80004d4:	f080 80ea 	bcs.w	80006ac <__udivmoddi4+0x22c>
 80004d8:	429a      	cmp	r2, r3
 80004da:	f240 80e7 	bls.w	80006ac <__udivmoddi4+0x22c>
 80004de:	3902      	subs	r1, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	1a9a      	subs	r2, r3, r2
 80004e4:	b2a3      	uxth	r3, r4
 80004e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80004ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f6:	459c      	cmp	ip, r3
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x8e>
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000500:	f080 80d6 	bcs.w	80006b0 <__udivmoddi4+0x230>
 8000504:	459c      	cmp	ip, r3
 8000506:	f240 80d3 	bls.w	80006b0 <__udivmoddi4+0x230>
 800050a:	443b      	add	r3, r7
 800050c:	3802      	subs	r0, #2
 800050e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000512:	eba3 030c 	sub.w	r3, r3, ip
 8000516:	2100      	movs	r1, #0
 8000518:	b11d      	cbz	r5, 8000522 <__udivmoddi4+0xa2>
 800051a:	40f3      	lsrs	r3, r6
 800051c:	2200      	movs	r2, #0
 800051e:	e9c5 3200 	strd	r3, r2, [r5]
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d905      	bls.n	8000536 <__udivmoddi4+0xb6>
 800052a:	b10d      	cbz	r5, 8000530 <__udivmoddi4+0xb0>
 800052c:	e9c5 0100 	strd	r0, r1, [r5]
 8000530:	2100      	movs	r1, #0
 8000532:	4608      	mov	r0, r1
 8000534:	e7f5      	b.n	8000522 <__udivmoddi4+0xa2>
 8000536:	fab3 f183 	clz	r1, r3
 800053a:	2900      	cmp	r1, #0
 800053c:	d146      	bne.n	80005cc <__udivmoddi4+0x14c>
 800053e:	4573      	cmp	r3, lr
 8000540:	d302      	bcc.n	8000548 <__udivmoddi4+0xc8>
 8000542:	4282      	cmp	r2, r0
 8000544:	f200 8105 	bhi.w	8000752 <__udivmoddi4+0x2d2>
 8000548:	1a84      	subs	r4, r0, r2
 800054a:	eb6e 0203 	sbc.w	r2, lr, r3
 800054e:	2001      	movs	r0, #1
 8000550:	4690      	mov	r8, r2
 8000552:	2d00      	cmp	r5, #0
 8000554:	d0e5      	beq.n	8000522 <__udivmoddi4+0xa2>
 8000556:	e9c5 4800 	strd	r4, r8, [r5]
 800055a:	e7e2      	b.n	8000522 <__udivmoddi4+0xa2>
 800055c:	2a00      	cmp	r2, #0
 800055e:	f000 8090 	beq.w	8000682 <__udivmoddi4+0x202>
 8000562:	fab2 f682 	clz	r6, r2
 8000566:	2e00      	cmp	r6, #0
 8000568:	f040 80a4 	bne.w	80006b4 <__udivmoddi4+0x234>
 800056c:	1a8a      	subs	r2, r1, r2
 800056e:	0c03      	lsrs	r3, r0, #16
 8000570:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000574:	b280      	uxth	r0, r0
 8000576:	b2bc      	uxth	r4, r7
 8000578:	2101      	movs	r1, #1
 800057a:	fbb2 fcfe 	udiv	ip, r2, lr
 800057e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000586:	fb04 f20c 	mul.w	r2, r4, ip
 800058a:	429a      	cmp	r2, r3
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x11e>
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000594:	d202      	bcs.n	800059c <__udivmoddi4+0x11c>
 8000596:	429a      	cmp	r2, r3
 8000598:	f200 80e0 	bhi.w	800075c <__udivmoddi4+0x2dc>
 800059c:	46c4      	mov	ip, r8
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80005a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80005a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80005ac:	fb02 f404 	mul.w	r4, r2, r4
 80005b0:	429c      	cmp	r4, r3
 80005b2:	d907      	bls.n	80005c4 <__udivmoddi4+0x144>
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80005ba:	d202      	bcs.n	80005c2 <__udivmoddi4+0x142>
 80005bc:	429c      	cmp	r4, r3
 80005be:	f200 80ca 	bhi.w	8000756 <__udivmoddi4+0x2d6>
 80005c2:	4602      	mov	r2, r0
 80005c4:	1b1b      	subs	r3, r3, r4
 80005c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005ca:	e7a5      	b.n	8000518 <__udivmoddi4+0x98>
 80005cc:	f1c1 0620 	rsb	r6, r1, #32
 80005d0:	408b      	lsls	r3, r1
 80005d2:	fa22 f706 	lsr.w	r7, r2, r6
 80005d6:	431f      	orrs	r7, r3
 80005d8:	fa0e f401 	lsl.w	r4, lr, r1
 80005dc:	fa20 f306 	lsr.w	r3, r0, r6
 80005e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80005e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80005e8:	4323      	orrs	r3, r4
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	fa1f fc87 	uxth.w	ip, r7
 80005f2:	fbbe f0f9 	udiv	r0, lr, r9
 80005f6:	0c1c      	lsrs	r4, r3, #16
 80005f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80005fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000600:	fb00 fe0c 	mul.w	lr, r0, ip
 8000604:	45a6      	cmp	lr, r4
 8000606:	fa02 f201 	lsl.w	r2, r2, r1
 800060a:	d909      	bls.n	8000620 <__udivmoddi4+0x1a0>
 800060c:	193c      	adds	r4, r7, r4
 800060e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000612:	f080 809c 	bcs.w	800074e <__udivmoddi4+0x2ce>
 8000616:	45a6      	cmp	lr, r4
 8000618:	f240 8099 	bls.w	800074e <__udivmoddi4+0x2ce>
 800061c:	3802      	subs	r0, #2
 800061e:	443c      	add	r4, r7
 8000620:	eba4 040e 	sub.w	r4, r4, lr
 8000624:	fa1f fe83 	uxth.w	lr, r3
 8000628:	fbb4 f3f9 	udiv	r3, r4, r9
 800062c:	fb09 4413 	mls	r4, r9, r3, r4
 8000630:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000634:	fb03 fc0c 	mul.w	ip, r3, ip
 8000638:	45a4      	cmp	ip, r4
 800063a:	d908      	bls.n	800064e <__udivmoddi4+0x1ce>
 800063c:	193c      	adds	r4, r7, r4
 800063e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000642:	f080 8082 	bcs.w	800074a <__udivmoddi4+0x2ca>
 8000646:	45a4      	cmp	ip, r4
 8000648:	d97f      	bls.n	800074a <__udivmoddi4+0x2ca>
 800064a:	3b02      	subs	r3, #2
 800064c:	443c      	add	r4, r7
 800064e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000652:	eba4 040c 	sub.w	r4, r4, ip
 8000656:	fba0 ec02 	umull	lr, ip, r0, r2
 800065a:	4564      	cmp	r4, ip
 800065c:	4673      	mov	r3, lr
 800065e:	46e1      	mov	r9, ip
 8000660:	d362      	bcc.n	8000728 <__udivmoddi4+0x2a8>
 8000662:	d05f      	beq.n	8000724 <__udivmoddi4+0x2a4>
 8000664:	b15d      	cbz	r5, 800067e <__udivmoddi4+0x1fe>
 8000666:	ebb8 0203 	subs.w	r2, r8, r3
 800066a:	eb64 0409 	sbc.w	r4, r4, r9
 800066e:	fa04 f606 	lsl.w	r6, r4, r6
 8000672:	fa22 f301 	lsr.w	r3, r2, r1
 8000676:	431e      	orrs	r6, r3
 8000678:	40cc      	lsrs	r4, r1
 800067a:	e9c5 6400 	strd	r6, r4, [r5]
 800067e:	2100      	movs	r1, #0
 8000680:	e74f      	b.n	8000522 <__udivmoddi4+0xa2>
 8000682:	fbb1 fcf2 	udiv	ip, r1, r2
 8000686:	0c01      	lsrs	r1, r0, #16
 8000688:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800068c:	b280      	uxth	r0, r0
 800068e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000692:	463b      	mov	r3, r7
 8000694:	4638      	mov	r0, r7
 8000696:	463c      	mov	r4, r7
 8000698:	46b8      	mov	r8, r7
 800069a:	46be      	mov	lr, r7
 800069c:	2620      	movs	r6, #32
 800069e:	fbb1 f1f7 	udiv	r1, r1, r7
 80006a2:	eba2 0208 	sub.w	r2, r2, r8
 80006a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80006aa:	e766      	b.n	800057a <__udivmoddi4+0xfa>
 80006ac:	4601      	mov	r1, r0
 80006ae:	e718      	b.n	80004e2 <__udivmoddi4+0x62>
 80006b0:	4610      	mov	r0, r2
 80006b2:	e72c      	b.n	800050e <__udivmoddi4+0x8e>
 80006b4:	f1c6 0220 	rsb	r2, r6, #32
 80006b8:	fa2e f302 	lsr.w	r3, lr, r2
 80006bc:	40b7      	lsls	r7, r6
 80006be:	40b1      	lsls	r1, r6
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006c8:	430a      	orrs	r2, r1
 80006ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80006ce:	b2bc      	uxth	r4, r7
 80006d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80006d4:	0c11      	lsrs	r1, r2, #16
 80006d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006da:	fb08 f904 	mul.w	r9, r8, r4
 80006de:	40b0      	lsls	r0, r6
 80006e0:	4589      	cmp	r9, r1
 80006e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80006e6:	b280      	uxth	r0, r0
 80006e8:	d93e      	bls.n	8000768 <__udivmoddi4+0x2e8>
 80006ea:	1879      	adds	r1, r7, r1
 80006ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80006f0:	d201      	bcs.n	80006f6 <__udivmoddi4+0x276>
 80006f2:	4589      	cmp	r9, r1
 80006f4:	d81f      	bhi.n	8000736 <__udivmoddi4+0x2b6>
 80006f6:	eba1 0109 	sub.w	r1, r1, r9
 80006fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80006fe:	fb09 f804 	mul.w	r8, r9, r4
 8000702:	fb0e 1119 	mls	r1, lr, r9, r1
 8000706:	b292      	uxth	r2, r2
 8000708:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800070c:	4542      	cmp	r2, r8
 800070e:	d229      	bcs.n	8000764 <__udivmoddi4+0x2e4>
 8000710:	18ba      	adds	r2, r7, r2
 8000712:	f109 31ff 	add.w	r1, r9, #4294967295
 8000716:	d2c4      	bcs.n	80006a2 <__udivmoddi4+0x222>
 8000718:	4542      	cmp	r2, r8
 800071a:	d2c2      	bcs.n	80006a2 <__udivmoddi4+0x222>
 800071c:	f1a9 0102 	sub.w	r1, r9, #2
 8000720:	443a      	add	r2, r7
 8000722:	e7be      	b.n	80006a2 <__udivmoddi4+0x222>
 8000724:	45f0      	cmp	r8, lr
 8000726:	d29d      	bcs.n	8000664 <__udivmoddi4+0x1e4>
 8000728:	ebbe 0302 	subs.w	r3, lr, r2
 800072c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000730:	3801      	subs	r0, #1
 8000732:	46e1      	mov	r9, ip
 8000734:	e796      	b.n	8000664 <__udivmoddi4+0x1e4>
 8000736:	eba7 0909 	sub.w	r9, r7, r9
 800073a:	4449      	add	r1, r9
 800073c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000740:	fbb1 f9fe 	udiv	r9, r1, lr
 8000744:	fb09 f804 	mul.w	r8, r9, r4
 8000748:	e7db      	b.n	8000702 <__udivmoddi4+0x282>
 800074a:	4673      	mov	r3, lr
 800074c:	e77f      	b.n	800064e <__udivmoddi4+0x1ce>
 800074e:	4650      	mov	r0, sl
 8000750:	e766      	b.n	8000620 <__udivmoddi4+0x1a0>
 8000752:	4608      	mov	r0, r1
 8000754:	e6fd      	b.n	8000552 <__udivmoddi4+0xd2>
 8000756:	443b      	add	r3, r7
 8000758:	3a02      	subs	r2, #2
 800075a:	e733      	b.n	80005c4 <__udivmoddi4+0x144>
 800075c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000760:	443b      	add	r3, r7
 8000762:	e71c      	b.n	800059e <__udivmoddi4+0x11e>
 8000764:	4649      	mov	r1, r9
 8000766:	e79c      	b.n	80006a2 <__udivmoddi4+0x222>
 8000768:	eba1 0109 	sub.w	r1, r1, r9
 800076c:	46c4      	mov	ip, r8
 800076e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000772:	fb09 f804 	mul.w	r8, r9, r4
 8000776:	e7c4      	b.n	8000702 <__udivmoddi4+0x282>

08000778 <__aeabi_idiv0>:
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	adc_val = HAL_ADC_GetValue(hadc);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f002 fd8b 	bl	80032a0 <HAL_ADC_GetValue>
 800078a:	4603      	mov	r3, r0
 800078c:	4a23      	ldr	r2, [pc, #140]	@ (800081c <HAL_ADC_ConvCpltCallback+0xa0>)
 800078e:	6013      	str	r3, [r2, #0]
	voltage = ((3300 * 2 * adc_val) / (float) adc_max_range) - 3300;
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <HAL_ADC_ConvCpltCallback+0xa0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	ee07 3a90 	vmov	s15, r3
 80007a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <HAL_ADC_ConvCpltCallback+0xa4>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007b4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000824 <HAL_ADC_ConvCpltCallback+0xa8>
 80007b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <HAL_ADC_ConvCpltCallback+0xac>)
 80007be:	edc3 7a00 	vstr	s15, [r3]

			fftFlag = 1;
			fftIndex = 0;
		}
	} else if (TEST_VERSIONS == 1) { // -------------------------------------------------------------------
		if (takeFFTs == 1) {
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <HAL_ADC_ConvCpltCallback+0xb0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d123      	bne.n	8000812 <HAL_ADC_ConvCpltCallback+0x96>
			inputSignalV1[fftIndex] = voltage;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <HAL_ADC_ConvCpltCallback+0xb4>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_ADC_ConvCpltCallback+0xac>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4917      	ldr	r1, [pc, #92]	@ (8000834 <HAL_ADC_ConvCpltCallback+0xb8>)
 80007d6:	0083      	lsls	r3, r0, #2
 80007d8:	440b      	add	r3, r1
 80007da:	601a      	str	r2, [r3, #0]
			fftIndex++;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <HAL_ADC_ConvCpltCallback+0xb4>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_ADC_ConvCpltCallback+0xb4>)
 80007e6:	801a      	strh	r2, [r3, #0]

			if (fftIndex == FFT_SIZE_V0_1) {
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_ADC_ConvCpltCallback+0xb4>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007f0:	d10f      	bne.n	8000812 <HAL_ADC_ConvCpltCallback+0x96>
				arm_rfft_fast_f32(&fftHandler, &inputSignalV1[0], &outputSignalV1[0], 0);
 80007f2:	2300      	movs	r3, #0
 80007f4:	4a10      	ldr	r2, [pc, #64]	@ (8000838 <HAL_ADC_ConvCpltCallback+0xbc>)
 80007f6:	490f      	ldr	r1, [pc, #60]	@ (8000834 <HAL_ADC_ConvCpltCallback+0xb8>)
 80007f8:	4810      	ldr	r0, [pc, #64]	@ (800083c <HAL_ADC_ConvCpltCallback+0xc0>)
 80007fa:	f009 fb8d 	bl	8009f18 <arm_rfft_fast_f32>

				fftFlag = 1;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
				fftIndex = 0;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000806:	2200      	movs	r2, #0
 8000808:	801a      	strh	r2, [r3, #0]

				HAL_GPIO_TogglePin(GPIOE, Sampling_Rate_Pin);
 800080a:	2101      	movs	r1, #1
 800080c:	480d      	ldr	r0, [pc, #52]	@ (8000844 <HAL_ADC_ConvCpltCallback+0xc8>)
 800080e:	f004 f8a2 	bl	8004956 <HAL_GPIO_TogglePin>
			}
		}
	} else if (TEST_VERSIONS == 2) { // -------------------------------------------------------------------
		// Sin Wave Test Output
	}
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	240003d8 	.word	0x240003d8
 8000820:	24000000 	.word	0x24000000
 8000824:	454e4000 	.word	0x454e4000
 8000828:	240003dc 	.word	0x240003dc
 800082c:	24000004 	.word	0x24000004
 8000830:	240003e8 	.word	0x240003e8
 8000834:	240003f0 	.word	0x240003f0
 8000838:	240013f0 	.word	0x240013f0
 800083c:	24003bf0 	.word	0x24003bf0
 8000840:	240003ea 	.word	0x240003ea
 8000844:	58021000 	.word	0x58021000

08000848 <blinkAllLEDs>:
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
	HAL_Delay(1000);
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
}

void blinkAllLEDs() {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800084c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000850:	f001 ffc8 	bl	80027e4 <HAL_Delay>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <blinkAllLEDs+0x58>)
 800085a:	f004 f863 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <blinkAllLEDs+0x5c>)
 8000864:	f004 f85e 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800086e:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <blinkAllLEDs+0x58>)
 8000870:	f004 f858 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000878:	f001 ffb4 	bl	80027e4 <HAL_Delay>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2101      	movs	r1, #1
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <blinkAllLEDs+0x58>)
 8000882:	f004 f84f 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2102      	movs	r1, #2
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <blinkAllLEDs+0x5c>)
 800088c:	f004 f84a 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000896:	4802      	ldr	r0, [pc, #8]	@ (80008a0 <blinkAllLEDs+0x58>)
 8000898:	f004 f844 	bl	8004924 <HAL_GPIO_WritePin>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	58020400 	.word	0x58020400
 80008a4:	58021000 	.word	0x58021000

080008a8 <resetFreqPeaksList>:

void resetFreqPeaksList() {
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PEAKS; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	e00e      	b.n	80008d2 <resetFreqPeaksList+0x2a>
		peaks_list_freq[i] = 0;
 80008b4:	4a0c      	ldr	r2, [pc, #48]	@ (80008e8 <resetFreqPeaksList+0x40>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2100      	movs	r1, #0
 80008ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		peaks_list_val[i] = 0;
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <resetFreqPeaksList+0x44>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_PEAKS; i++) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b11      	cmp	r3, #17
 80008d6:	dded      	ble.n	80008b4 <resetFreqPeaksList+0xc>
	}
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	24003c0c 	.word	0x24003c0c
 80008ec:	24003c54 	.word	0x24003c54

080008f0 <resetFreqPeaksBins>:

void resetFreqPeaksBins() {
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < FREQ_BIN_WIDTH; i++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	e020      	b.n	800093e <resetFreqPeaksBins+0x4e>
		E2_freq_bin[i] = 0;
 80008fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000974 <resetFreqPeaksBins+0x84>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2100      	movs	r1, #0
 8000902:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		A2_freq_bin[i] = 0;
 8000906:	4a1c      	ldr	r2, [pc, #112]	@ (8000978 <resetFreqPeaksBins+0x88>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2100      	movs	r1, #0
 800090c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		D3_freq_bin[i] = 0;
 8000910:	4a1a      	ldr	r2, [pc, #104]	@ (800097c <resetFreqPeaksBins+0x8c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2100      	movs	r1, #0
 8000916:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		G3_freq_bin[i] = 0;
 800091a:	4a19      	ldr	r2, [pc, #100]	@ (8000980 <resetFreqPeaksBins+0x90>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2100      	movs	r1, #0
 8000920:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		B3_freq_bin[i] = 0;
 8000924:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <resetFreqPeaksBins+0x94>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2100      	movs	r1, #0
 800092a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		E4_freq_bin[i] = 0;
 800092e:	4a16      	ldr	r2, [pc, #88]	@ (8000988 <resetFreqPeaksBins+0x98>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2100      	movs	r1, #0
 8000934:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < FREQ_BIN_WIDTH; i++) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3301      	adds	r3, #1
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	dddb      	ble.n	80008fc <resetFreqPeaksBins+0xc>
	}

	E2_index = 0;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <resetFreqPeaksBins+0x9c>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
	A2_index = 0;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <resetFreqPeaksBins+0xa0>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
	D3_index = 0;
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <resetFreqPeaksBins+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
	G3_index = 0;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <resetFreqPeaksBins+0xa8>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
	B3_index = 0;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <resetFreqPeaksBins+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
	E4_index = 0;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <resetFreqPeaksBins+0xb0>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	24003c9c 	.word	0x24003c9c
 8000978:	24003ca8 	.word	0x24003ca8
 800097c:	24003cb4 	.word	0x24003cb4
 8000980:	24003cc0 	.word	0x24003cc0
 8000984:	24003ccc 	.word	0x24003ccc
 8000988:	24003cd8 	.word	0x24003cd8
 800098c:	24003ce4 	.word	0x24003ce4
 8000990:	24003ce8 	.word	0x24003ce8
 8000994:	24003cec 	.word	0x24003cec
 8000998:	24003cf0 	.word	0x24003cf0
 800099c:	24003cf4 	.word	0x24003cf4
 80009a0:	24003cf8 	.word	0x24003cf8

080009a4 <stopFFTsCheck>:

void stopFFTsCheck() {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	if (E2_index > 0 &&
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <stopFFTsCheck+0x44>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dd16      	ble.n	80009de <stopFFTsCheck+0x3a>
		A2_index > 0 &&
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <stopFFTsCheck+0x48>)
 80009b2:	681b      	ldr	r3, [r3, #0]
	if (E2_index > 0 &&
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	dd12      	ble.n	80009de <stopFFTsCheck+0x3a>
		D3_index > 0 &&
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <stopFFTsCheck+0x4c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
		A2_index > 0 &&
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dd0e      	ble.n	80009de <stopFFTsCheck+0x3a>
		G3_index > 0 &&
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <stopFFTsCheck+0x50>)
 80009c2:	681b      	ldr	r3, [r3, #0]
		D3_index > 0 &&
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dd0a      	ble.n	80009de <stopFFTsCheck+0x3a>
		B3_index > 0 &&
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <stopFFTsCheck+0x54>)
 80009ca:	681b      	ldr	r3, [r3, #0]
		G3_index > 0 &&
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd06      	ble.n	80009de <stopFFTsCheck+0x3a>
		E4_index > 0) {
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <stopFFTsCheck+0x58>)
 80009d2:	681b      	ldr	r3, [r3, #0]
		B3_index > 0 &&
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd02      	ble.n	80009de <stopFFTsCheck+0x3a>
		takeFFTs = 0;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <stopFFTsCheck+0x5c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
	}
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	24003ce4 	.word	0x24003ce4
 80009ec:	24003ce8 	.word	0x24003ce8
 80009f0:	24003cec 	.word	0x24003cec
 80009f4:	24003cf0 	.word	0x24003cf0
 80009f8:	24003cf4 	.word	0x24003cf4
 80009fc:	24003cf8 	.word	0x24003cf8
 8000a00:	24000004 	.word	0x24000004

08000a04 <clearBuffer>:

void clearBuffer() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	memset(buffer, 0, sizeof(buffer));
 8000a08:	2264      	movs	r2, #100	@ 0x64
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <clearBuffer+0x14>)
 8000a0e:	f00a ff38 	bl	800b882 <memset>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	24000374 	.word	0x24000374

08000a1c <printFreqBins>:

void printFreqBins() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_STRINGS; i++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	e09f      	b.n	8000b68 <printFreqBins+0x14c>
		for (int j = 0; j < FREQ_BIN_WIDTH; j++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	e095      	b.n	8000b5a <printFreqBins+0x13e>
			if (i == 0) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d116      	bne.n	8000a62 <printFreqBins+0x46>
				if (E2_freq_bin[j] > 0) {
 8000a34:	4a51      	ldr	r2, [pc, #324]	@ (8000b7c <printFreqBins+0x160>)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f340 8089 	ble.w	8000b54 <printFreqBins+0x138>
					snprintf(buffer, 100, "E2 Freq Bin: %d \r\n", E2_freq_bin[j]);
 8000a42:	4a4e      	ldr	r2, [pc, #312]	@ (8000b7c <printFreqBins+0x160>)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000b80 <printFreqBins+0x164>)
 8000a4c:	2164      	movs	r1, #100	@ 0x64
 8000a4e:	484d      	ldr	r0, [pc, #308]	@ (8000b84 <printFreqBins+0x168>)
 8000a50:	f00a fe9e 	bl	800b790 <sniprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8000a54:	2364      	movs	r3, #100	@ 0x64
 8000a56:	2264      	movs	r2, #100	@ 0x64
 8000a58:	494a      	ldr	r1, [pc, #296]	@ (8000b84 <printFreqBins+0x168>)
 8000a5a:	484b      	ldr	r0, [pc, #300]	@ (8000b88 <printFreqBins+0x16c>)
 8000a5c:	f008 f890 	bl	8008b80 <HAL_UART_Transmit>
 8000a60:	e078      	b.n	8000b54 <printFreqBins+0x138>
				}
			} else if (i == 1) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d115      	bne.n	8000a94 <printFreqBins+0x78>
				if (A2_freq_bin[j] > 0) {
 8000a68:	4a48      	ldr	r2, [pc, #288]	@ (8000b8c <printFreqBins+0x170>)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	dd6f      	ble.n	8000b54 <printFreqBins+0x138>
					snprintf(buffer, 100, "A2 Freq Bin: %d \r\n", A2_freq_bin[j]);
 8000a74:	4a45      	ldr	r2, [pc, #276]	@ (8000b8c <printFreqBins+0x170>)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	4a44      	ldr	r2, [pc, #272]	@ (8000b90 <printFreqBins+0x174>)
 8000a7e:	2164      	movs	r1, #100	@ 0x64
 8000a80:	4840      	ldr	r0, [pc, #256]	@ (8000b84 <printFreqBins+0x168>)
 8000a82:	f00a fe85 	bl	800b790 <sniprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8000a86:	2364      	movs	r3, #100	@ 0x64
 8000a88:	2264      	movs	r2, #100	@ 0x64
 8000a8a:	493e      	ldr	r1, [pc, #248]	@ (8000b84 <printFreqBins+0x168>)
 8000a8c:	483e      	ldr	r0, [pc, #248]	@ (8000b88 <printFreqBins+0x16c>)
 8000a8e:	f008 f877 	bl	8008b80 <HAL_UART_Transmit>
 8000a92:	e05f      	b.n	8000b54 <printFreqBins+0x138>
				}
			} else if (i == 2) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d115      	bne.n	8000ac6 <printFreqBins+0xaa>
				if (D3_freq_bin[j] > 0) {
 8000a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b94 <printFreqBins+0x178>)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	dd56      	ble.n	8000b54 <printFreqBins+0x138>
					snprintf(buffer, 100, "D3 Freq Bin: %d \r\n", D3_freq_bin[j]);
 8000aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8000b94 <printFreqBins+0x178>)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	4a3a      	ldr	r2, [pc, #232]	@ (8000b98 <printFreqBins+0x17c>)
 8000ab0:	2164      	movs	r1, #100	@ 0x64
 8000ab2:	4834      	ldr	r0, [pc, #208]	@ (8000b84 <printFreqBins+0x168>)
 8000ab4:	f00a fe6c 	bl	800b790 <sniprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	2264      	movs	r2, #100	@ 0x64
 8000abc:	4931      	ldr	r1, [pc, #196]	@ (8000b84 <printFreqBins+0x168>)
 8000abe:	4832      	ldr	r0, [pc, #200]	@ (8000b88 <printFreqBins+0x16c>)
 8000ac0:	f008 f85e 	bl	8008b80 <HAL_UART_Transmit>
 8000ac4:	e046      	b.n	8000b54 <printFreqBins+0x138>
				}
			} else if (i == 3) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d115      	bne.n	8000af8 <printFreqBins+0xdc>
				if (G3_freq_bin[j] > 0) {
 8000acc:	4a33      	ldr	r2, [pc, #204]	@ (8000b9c <printFreqBins+0x180>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dd3d      	ble.n	8000b54 <printFreqBins+0x138>
					snprintf(buffer, 100, "G3 Freq Bin: %d \r\n", G3_freq_bin[j]);
 8000ad8:	4a30      	ldr	r2, [pc, #192]	@ (8000b9c <printFreqBins+0x180>)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba0 <printFreqBins+0x184>)
 8000ae2:	2164      	movs	r1, #100	@ 0x64
 8000ae4:	4827      	ldr	r0, [pc, #156]	@ (8000b84 <printFreqBins+0x168>)
 8000ae6:	f00a fe53 	bl	800b790 <sniprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8000aea:	2364      	movs	r3, #100	@ 0x64
 8000aec:	2264      	movs	r2, #100	@ 0x64
 8000aee:	4925      	ldr	r1, [pc, #148]	@ (8000b84 <printFreqBins+0x168>)
 8000af0:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <printFreqBins+0x16c>)
 8000af2:	f008 f845 	bl	8008b80 <HAL_UART_Transmit>
 8000af6:	e02d      	b.n	8000b54 <printFreqBins+0x138>
				}
			} else if (i == 4) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d115      	bne.n	8000b2a <printFreqBins+0x10e>
				if (B3_freq_bin[j] > 0) {
 8000afe:	4a29      	ldr	r2, [pc, #164]	@ (8000ba4 <printFreqBins+0x188>)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	dd24      	ble.n	8000b54 <printFreqBins+0x138>
					snprintf(buffer, 100, "B3 Freq Bin: %d \r\n", B3_freq_bin[j]);
 8000b0a:	4a26      	ldr	r2, [pc, #152]	@ (8000ba4 <printFreqBins+0x188>)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	4a25      	ldr	r2, [pc, #148]	@ (8000ba8 <printFreqBins+0x18c>)
 8000b14:	2164      	movs	r1, #100	@ 0x64
 8000b16:	481b      	ldr	r0, [pc, #108]	@ (8000b84 <printFreqBins+0x168>)
 8000b18:	f00a fe3a 	bl	800b790 <sniprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	2264      	movs	r2, #100	@ 0x64
 8000b20:	4918      	ldr	r1, [pc, #96]	@ (8000b84 <printFreqBins+0x168>)
 8000b22:	4819      	ldr	r0, [pc, #100]	@ (8000b88 <printFreqBins+0x16c>)
 8000b24:	f008 f82c 	bl	8008b80 <HAL_UART_Transmit>
 8000b28:	e014      	b.n	8000b54 <printFreqBins+0x138>
				}
			} else {
				if (E4_freq_bin[j] > 0) {
 8000b2a:	4a20      	ldr	r2, [pc, #128]	@ (8000bac <printFreqBins+0x190>)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dd0e      	ble.n	8000b54 <printFreqBins+0x138>
					snprintf(buffer, 100, "E4 Freq Bin: %d \r\n", E4_freq_bin[j]);
 8000b36:	4a1d      	ldr	r2, [pc, #116]	@ (8000bac <printFreqBins+0x190>)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb0 <printFreqBins+0x194>)
 8000b40:	2164      	movs	r1, #100	@ 0x64
 8000b42:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <printFreqBins+0x168>)
 8000b44:	f00a fe24 	bl	800b790 <sniprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8000b48:	2364      	movs	r3, #100	@ 0x64
 8000b4a:	2264      	movs	r2, #100	@ 0x64
 8000b4c:	490d      	ldr	r1, [pc, #52]	@ (8000b84 <printFreqBins+0x168>)
 8000b4e:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <printFreqBins+0x16c>)
 8000b50:	f008 f816 	bl	8008b80 <HAL_UART_Transmit>
		for (int j = 0; j < FREQ_BIN_WIDTH; j++) {
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	f77f af66 	ble.w	8000a2e <printFreqBins+0x12>
	for (int i = 0; i < NUM_STRINGS; i++) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	f77f af5c 	ble.w	8000a28 <printFreqBins+0xc>
				}
			}
		}
	}

	clearBuffer();
 8000b70:	f7ff ff48 	bl	8000a04 <clearBuffer>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24003c9c 	.word	0x24003c9c
 8000b80:	0800dd50 	.word	0x0800dd50
 8000b84:	24000374 	.word	0x24000374
 8000b88:	240002e0 	.word	0x240002e0
 8000b8c:	24003ca8 	.word	0x24003ca8
 8000b90:	0800dd64 	.word	0x0800dd64
 8000b94:	24003cb4 	.word	0x24003cb4
 8000b98:	0800dd78 	.word	0x0800dd78
 8000b9c:	24003cc0 	.word	0x24003cc0
 8000ba0:	0800dd8c 	.word	0x0800dd8c
 8000ba4:	24003ccc 	.word	0x24003ccc
 8000ba8:	0800dda0 	.word	0x0800dda0
 8000bac:	24003cd8 	.word	0x24003cd8
 8000bb0:	0800ddb4 	.word	0x0800ddb4

08000bb4 <removeHarmonics>:

void removeHarmonics() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
	int fundamental = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
	int harm_one = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
	int harm_two = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < MAX_PEAKS; i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e041      	b.n	8000c50 <removeHarmonics+0x9c>
		fundamental = peaks_list_freq[i];
 8000bcc:	4a25      	ldr	r2, [pc, #148]	@ (8000c64 <removeHarmonics+0xb0>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd4:	60fb      	str	r3, [r7, #12]
		harm_one = fundamental * 2;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
		harm_two = fundamental * 0; // ISSUE: Causes conflict with the upper strings right now
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]

		for (int j = i + 1; j < MAX_PEAKS; j++) {
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	e02d      	b.n	8000c44 <removeHarmonics+0x90>
			if ((peaks_list_freq[j] != 0) &&
 8000be8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c64 <removeHarmonics+0xb0>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d024      	beq.n	8000c3e <removeHarmonics+0x8a>
			   ((peaks_list_freq[j] >= harm_one - HARM_TOLERANCE && peaks_list_freq[j] <= harm_one + HARM_TOLERANCE) ||
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c64 <removeHarmonics+0xb0>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3b02      	subs	r3, #2
			if ((peaks_list_freq[j] != 0) &&
 8000c00:	429a      	cmp	r2, r3
 8000c02:	db07      	blt.n	8000c14 <removeHarmonics+0x60>
			   ((peaks_list_freq[j] >= harm_one - HARM_TOLERANCE && peaks_list_freq[j] <= harm_one + HARM_TOLERANCE) ||
 8000c04:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <removeHarmonics+0xb0>)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dd0f      	ble.n	8000c34 <removeHarmonics+0x80>
				(peaks_list_freq[j] >= harm_two - HARM_TOLERANCE && peaks_list_freq[j] <= harm_two + HARM_TOLERANCE))) {
 8000c14:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <removeHarmonics+0xb0>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b02      	subs	r3, #2
			   ((peaks_list_freq[j] >= harm_one - HARM_TOLERANCE && peaks_list_freq[j] <= harm_one + HARM_TOLERANCE) ||
 8000c20:	429a      	cmp	r2, r3
 8000c22:	db0c      	blt.n	8000c3e <removeHarmonics+0x8a>
				(peaks_list_freq[j] >= harm_two - HARM_TOLERANCE && peaks_list_freq[j] <= harm_two + HARM_TOLERANCE))) {
 8000c24:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <removeHarmonics+0xb0>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3302      	adds	r3, #2
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dc04      	bgt.n	8000c3e <removeHarmonics+0x8a>
				peaks_list_freq[j] = 0;
 8000c34:	4a0b      	ldr	r2, [pc, #44]	@ (8000c64 <removeHarmonics+0xb0>)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = i + 1; j < MAX_PEAKS; j++) {
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	3301      	adds	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	2b11      	cmp	r3, #17
 8000c48:	ddce      	ble.n	8000be8 <removeHarmonics+0x34>
	for (int i = 0; i < MAX_PEAKS; i++) {
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2b11      	cmp	r3, #17
 8000c54:	ddba      	ble.n	8000bcc <removeHarmonics+0x18>
			}
		}
	}

	clearBuffer();
 8000c56:	f7ff fed5 	bl	8000a04 <clearBuffer>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	24003c0c 	.word	0x24003c0c

08000c68 <identifyFreqPeaks>:

void identifyFreqPeaks(float freq_vals[], int arr_length) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	int curr_index = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
	resetFreqPeaksList();
 8000c76:	f7ff fe17 	bl	80008a8 <resetFreqPeaksList>

	for (int i = 0; i < arr_length; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	e084      	b.n	8000d8a <identifyFreqPeaks+0x122>
		if (freq_vals[i] >= 30000 && i > 70) {
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000da0 <identifyFreqPeaks+0x138>
 8000c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c98:	db74      	blt.n	8000d84 <identifyFreqPeaks+0x11c>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b46      	cmp	r3, #70	@ 0x46
 8000c9e:	dd71      	ble.n	8000d84 <identifyFreqPeaks+0x11c>
			if (curr_index > 0) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dd5a      	ble.n	8000d5c <identifyFreqPeaks+0xf4>
				if ((peaks_list_val[curr_index - 1] < freq_vals[i]) && (i - peaks_list_freq[curr_index - 1] <= FREQ_TOLERANCE)) {
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	4a3e      	ldr	r2, [pc, #248]	@ (8000da4 <identifyFreqPeaks+0x13c>)
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	ed93 7a00 	vldr	s14, [r3]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc8:	d51a      	bpl.n	8000d00 <identifyFreqPeaks+0x98>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	4a36      	ldr	r2, [pc, #216]	@ (8000da8 <identifyFreqPeaks+0x140>)
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	68ba      	ldr	r2, [r7, #8]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b07      	cmp	r3, #7
 8000cda:	dc11      	bgt.n	8000d00 <identifyFreqPeaks+0x98>
					peaks_list_freq[curr_index - 1] = i;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	4931      	ldr	r1, [pc, #196]	@ (8000da8 <identifyFreqPeaks+0x140>)
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					peaks_list_val[curr_index - 1] = freq_vals[i];
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	441a      	add	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	492b      	ldr	r1, [pc, #172]	@ (8000da4 <identifyFreqPeaks+0x13c>)
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	e041      	b.n	8000d84 <identifyFreqPeaks+0x11c>
				} else if ((peaks_list_val[curr_index - 1] > freq_vals[i]) && (i - peaks_list_freq[curr_index - 1] <= FREQ_TOLERANCE)) {
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	4a27      	ldr	r2, [pc, #156]	@ (8000da4 <identifyFreqPeaks+0x13c>)
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	ed93 7a00 	vldr	s14, [r3]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d22:	dd08      	ble.n	8000d36 <identifyFreqPeaks+0xce>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	4a1f      	ldr	r2, [pc, #124]	@ (8000da8 <identifyFreqPeaks+0x140>)
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b07      	cmp	r3, #7
 8000d34:	dd25      	ble.n	8000d82 <identifyFreqPeaks+0x11a>
					continue;
				} else {
					peaks_list_freq[curr_index] = i;
 8000d36:	491c      	ldr	r1, [pc, #112]	@ (8000da8 <identifyFreqPeaks+0x140>)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					peaks_list_val[curr_index] = freq_vals[i];
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4916      	ldr	r1, [pc, #88]	@ (8000da4 <identifyFreqPeaks+0x13c>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	601a      	str	r2, [r3, #0]
					curr_index++;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3301      	adds	r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	e013      	b.n	8000d84 <identifyFreqPeaks+0x11c>
				}
			} else {
				peaks_list_freq[curr_index] = i;
 8000d5c:	4912      	ldr	r1, [pc, #72]	@ (8000da8 <identifyFreqPeaks+0x140>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				peaks_list_val[curr_index] = freq_vals[i];
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	490c      	ldr	r1, [pc, #48]	@ (8000da4 <identifyFreqPeaks+0x13c>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	440b      	add	r3, r1
 8000d78:	601a      	str	r2, [r3, #0]
				curr_index++;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e000      	b.n	8000d84 <identifyFreqPeaks+0x11c>
					continue;
 8000d82:	bf00      	nop
	for (int i = 0; i < arr_length; i++) {
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f6ff af76 	blt.w	8000c80 <identifyFreqPeaks+0x18>
			}
		}
	}
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	46ea6000 	.word	0x46ea6000
 8000da4:	24003c54 	.word	0x24003c54
 8000da8:	24003c0c 	.word	0x24003c0c

08000dac <determineDuplicateFreqs>:

int determineDuplicateFreqs(int freqs[], int new_freq) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < FREQ_BIN_WIDTH; i++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e00c      	b.n	8000dd6 <determineDuplicateFreqs+0x2a>
		if (freqs[i] == new_freq) {
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d101      	bne.n	8000dd0 <determineDuplicateFreqs+0x24>
			return 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e006      	b.n	8000dde <determineDuplicateFreqs+0x32>
	for (int i = 0; i < FREQ_BIN_WIDTH; i++) {
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	ddef      	ble.n	8000dbc <determineDuplicateFreqs+0x10>
		}
	}

	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <determineFreqBins>:

void determineFreqBins() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	int curr_peak = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < MAX_PEAKS; i++) {
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	e14e      	b.n	800109a <determineFreqBins+0x2ae>
		curr_peak = peaks_list_freq[i];
 8000dfc:	4aab      	ldr	r2, [pc, #684]	@ (80010ac <determineFreqBins+0x2c0>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e04:	603b      	str	r3, [r7, #0]
		if ((curr_peak + E2_ADJUST > E2_low && curr_peak + E2_ADJUST < E2_high) &&
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3307      	adds	r3, #7
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e12:	4ba7      	ldr	r3, [pc, #668]	@ (80010b0 <determineFreqBins+0x2c4>)
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e20:	dd27      	ble.n	8000e72 <determineFreqBins+0x86>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	3307      	adds	r3, #7
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e2e:	4ba1      	ldr	r3, [pc, #644]	@ (80010b4 <determineFreqBins+0x2c8>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	d519      	bpl.n	8000e72 <determineFreqBins+0x86>
			(determineDuplicateFreqs(&E2_freq_bin[0], curr_peak + E2_ADJUST) == 0) &&
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3307      	adds	r3, #7
 8000e42:	4619      	mov	r1, r3
 8000e44:	489c      	ldr	r0, [pc, #624]	@ (80010b8 <determineFreqBins+0x2cc>)
 8000e46:	f7ff ffb1 	bl	8000dac <determineDuplicateFreqs>
 8000e4a:	4603      	mov	r3, r0
		if ((curr_peak + E2_ADJUST > E2_low && curr_peak + E2_ADJUST < E2_high) &&
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d110      	bne.n	8000e72 <determineFreqBins+0x86>
			(E2_index < FREQ_BIN_WIDTH)) {
 8000e50:	4b9a      	ldr	r3, [pc, #616]	@ (80010bc <determineFreqBins+0x2d0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
			(determineDuplicateFreqs(&E2_freq_bin[0], curr_peak + E2_ADJUST) == 0) &&
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	dc0c      	bgt.n	8000e72 <determineFreqBins+0x86>
			E2_freq_bin[E2_index] = curr_peak + E2_ADJUST;
 8000e58:	4b98      	ldr	r3, [pc, #608]	@ (80010bc <determineFreqBins+0x2d0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	3207      	adds	r2, #7
 8000e60:	4995      	ldr	r1, [pc, #596]	@ (80010b8 <determineFreqBins+0x2cc>)
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			E2_index++;
 8000e66:	4b95      	ldr	r3, [pc, #596]	@ (80010bc <determineFreqBins+0x2d0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a93      	ldr	r2, [pc, #588]	@ (80010bc <determineFreqBins+0x2d0>)
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e110      	b.n	8001094 <determineFreqBins+0x2a8>
		} else if ((curr_peak + A2_ADJUST > A2_low && curr_peak + A2_ADJUST < A2_high) &&
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3309      	adds	r3, #9
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e7e:	4b90      	ldr	r3, [pc, #576]	@ (80010c0 <determineFreqBins+0x2d4>)
 8000e80:	edd3 7a00 	vldr	s15, [r3]
 8000e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	dd27      	ble.n	8000ede <determineFreqBins+0xf2>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	3309      	adds	r3, #9
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e9a:	4b8a      	ldr	r3, [pc, #552]	@ (80010c4 <determineFreqBins+0x2d8>)
 8000e9c:	edd3 7a00 	vldr	s15, [r3]
 8000ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea8:	d519      	bpl.n	8000ede <determineFreqBins+0xf2>
				   (determineDuplicateFreqs(&A2_freq_bin[0], curr_peak + A2_ADJUST) == 0) &&
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3309      	adds	r3, #9
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4885      	ldr	r0, [pc, #532]	@ (80010c8 <determineFreqBins+0x2dc>)
 8000eb2:	f7ff ff7b 	bl	8000dac <determineDuplicateFreqs>
 8000eb6:	4603      	mov	r3, r0
		} else if ((curr_peak + A2_ADJUST > A2_low && curr_peak + A2_ADJUST < A2_high) &&
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d110      	bne.n	8000ede <determineFreqBins+0xf2>
				   (A2_index < FREQ_BIN_WIDTH)) {
 8000ebc:	4b83      	ldr	r3, [pc, #524]	@ (80010cc <determineFreqBins+0x2e0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
				   (determineDuplicateFreqs(&A2_freq_bin[0], curr_peak + A2_ADJUST) == 0) &&
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	dc0c      	bgt.n	8000ede <determineFreqBins+0xf2>
			A2_freq_bin[A2_index] = curr_peak + A2_ADJUST;
 8000ec4:	4b81      	ldr	r3, [pc, #516]	@ (80010cc <determineFreqBins+0x2e0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	3209      	adds	r2, #9
 8000ecc:	497e      	ldr	r1, [pc, #504]	@ (80010c8 <determineFreqBins+0x2dc>)
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			A2_index++;
 8000ed2:	4b7e      	ldr	r3, [pc, #504]	@ (80010cc <determineFreqBins+0x2e0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a7c      	ldr	r2, [pc, #496]	@ (80010cc <determineFreqBins+0x2e0>)
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e0da      	b.n	8001094 <determineFreqBins+0x2a8>
		} else if ((curr_peak + D3_ADJUST > D3_low && curr_peak + D3_ADJUST < D3_high) &&
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eea:	4b79      	ldr	r3, [pc, #484]	@ (80010d0 <determineFreqBins+0x2e4>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	dd27      	ble.n	8000f4a <determineFreqBins+0x15e>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	330c      	adds	r3, #12
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f06:	4b73      	ldr	r3, [pc, #460]	@ (80010d4 <determineFreqBins+0x2e8>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	d519      	bpl.n	8000f4a <determineFreqBins+0x15e>
				   (determineDuplicateFreqs(&D3_freq_bin[0], curr_peak + D3_ADJUST) == 0) &&
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	486e      	ldr	r0, [pc, #440]	@ (80010d8 <determineFreqBins+0x2ec>)
 8000f1e:	f7ff ff45 	bl	8000dac <determineDuplicateFreqs>
 8000f22:	4603      	mov	r3, r0
		} else if ((curr_peak + D3_ADJUST > D3_low && curr_peak + D3_ADJUST < D3_high) &&
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d110      	bne.n	8000f4a <determineFreqBins+0x15e>
				   (D3_index < FREQ_BIN_WIDTH)) {
 8000f28:	4b6c      	ldr	r3, [pc, #432]	@ (80010dc <determineFreqBins+0x2f0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
				   (determineDuplicateFreqs(&D3_freq_bin[0], curr_peak + D3_ADJUST) == 0) &&
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	dc0c      	bgt.n	8000f4a <determineFreqBins+0x15e>
			D3_freq_bin[D3_index] = curr_peak+ D3_ADJUST;
 8000f30:	4b6a      	ldr	r3, [pc, #424]	@ (80010dc <determineFreqBins+0x2f0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	320c      	adds	r2, #12
 8000f38:	4967      	ldr	r1, [pc, #412]	@ (80010d8 <determineFreqBins+0x2ec>)
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			D3_index++;
 8000f3e:	4b67      	ldr	r3, [pc, #412]	@ (80010dc <determineFreqBins+0x2f0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a65      	ldr	r2, [pc, #404]	@ (80010dc <determineFreqBins+0x2f0>)
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e0a4      	b.n	8001094 <determineFreqBins+0x2a8>
		} else if ((curr_peak + G3_ADJUST > G3_low && curr_peak + G3_ADJUST < G3_high) &&
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3310      	adds	r3, #16
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f56:	4b62      	ldr	r3, [pc, #392]	@ (80010e0 <determineFreqBins+0x2f4>)
 8000f58:	edd3 7a00 	vldr	s15, [r3]
 8000f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f64:	dd27      	ble.n	8000fb6 <determineFreqBins+0x1ca>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3310      	adds	r3, #16
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f72:	4b5c      	ldr	r3, [pc, #368]	@ (80010e4 <determineFreqBins+0x2f8>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d519      	bpl.n	8000fb6 <determineFreqBins+0x1ca>
				   (determineDuplicateFreqs(&G3_freq_bin[0], curr_peak + G3_ADJUST) == 0) &&
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3310      	adds	r3, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4857      	ldr	r0, [pc, #348]	@ (80010e8 <determineFreqBins+0x2fc>)
 8000f8a:	f7ff ff0f 	bl	8000dac <determineDuplicateFreqs>
 8000f8e:	4603      	mov	r3, r0
		} else if ((curr_peak + G3_ADJUST > G3_low && curr_peak + G3_ADJUST < G3_high) &&
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d110      	bne.n	8000fb6 <determineFreqBins+0x1ca>
				   (G3_index < FREQ_BIN_WIDTH)) {
 8000f94:	4b55      	ldr	r3, [pc, #340]	@ (80010ec <determineFreqBins+0x300>)
 8000f96:	681b      	ldr	r3, [r3, #0]
				   (determineDuplicateFreqs(&G3_freq_bin[0], curr_peak + G3_ADJUST) == 0) &&
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	dc0c      	bgt.n	8000fb6 <determineFreqBins+0x1ca>
			G3_freq_bin[G3_index] = curr_peak+ G3_ADJUST;
 8000f9c:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <determineFreqBins+0x300>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	3210      	adds	r2, #16
 8000fa4:	4950      	ldr	r1, [pc, #320]	@ (80010e8 <determineFreqBins+0x2fc>)
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			G3_index++;
 8000faa:	4b50      	ldr	r3, [pc, #320]	@ (80010ec <determineFreqBins+0x300>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80010ec <determineFreqBins+0x300>)
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e06e      	b.n	8001094 <determineFreqBins+0x2a8>
		} else if ((curr_peak + B3_ADJUST > B3_low && curr_peak + B3_ADJUST < B3_high) &&
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	3314      	adds	r3, #20
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <determineFreqBins+0x304>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	dd27      	ble.n	8001022 <determineFreqBins+0x236>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3314      	adds	r3, #20
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fde:	4b45      	ldr	r3, [pc, #276]	@ (80010f4 <determineFreqBins+0x308>)
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	d519      	bpl.n	8001022 <determineFreqBins+0x236>
				   (determineDuplicateFreqs(&B3_freq_bin[0], curr_peak + B3_ADJUST) == 0) &&
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3314      	adds	r3, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4840      	ldr	r0, [pc, #256]	@ (80010f8 <determineFreqBins+0x30c>)
 8000ff6:	f7ff fed9 	bl	8000dac <determineDuplicateFreqs>
 8000ffa:	4603      	mov	r3, r0
		} else if ((curr_peak + B3_ADJUST > B3_low && curr_peak + B3_ADJUST < B3_high) &&
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d110      	bne.n	8001022 <determineFreqBins+0x236>
				   (B3_index < FREQ_BIN_WIDTH)) {
 8001000:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <determineFreqBins+0x310>)
 8001002:	681b      	ldr	r3, [r3, #0]
				   (determineDuplicateFreqs(&B3_freq_bin[0], curr_peak + B3_ADJUST) == 0) &&
 8001004:	2b02      	cmp	r3, #2
 8001006:	dc0c      	bgt.n	8001022 <determineFreqBins+0x236>
			B3_freq_bin[B3_index] = curr_peak+ B3_ADJUST ;
 8001008:	4b3c      	ldr	r3, [pc, #240]	@ (80010fc <determineFreqBins+0x310>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	3214      	adds	r2, #20
 8001010:	4939      	ldr	r1, [pc, #228]	@ (80010f8 <determineFreqBins+0x30c>)
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			B3_index++;
 8001016:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <determineFreqBins+0x310>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a37      	ldr	r2, [pc, #220]	@ (80010fc <determineFreqBins+0x310>)
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	e038      	b.n	8001094 <determineFreqBins+0x2a8>
		} else if ((curr_peak + E4_ADJUST > E4_low && curr_peak + E4_ADJUST < E4_high) &&
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	331b      	adds	r3, #27
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102e:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <determineFreqBins+0x314>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	dc00      	bgt.n	8001040 <determineFreqBins+0x254>
				   (determineDuplicateFreqs(&E4_freq_bin[0], curr_peak + E4_ADJUST) == 0) &&
				   (E4_index < FREQ_BIN_WIDTH)) {
			E4_freq_bin[E4_index] = curr_peak+ E4_ADJUST ;
			E4_index++;
		} else {
			continue;
 800103e:	e028      	b.n	8001092 <determineFreqBins+0x2a6>
		} else if ((curr_peak + E4_ADJUST > E4_low && curr_peak + E4_ADJUST < E4_high) &&
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	331b      	adds	r3, #27
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104c:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <determineFreqBins+0x318>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	d400      	bmi.n	800105e <determineFreqBins+0x272>
			continue;
 800105c:	e019      	b.n	8001092 <determineFreqBins+0x2a6>
				   (determineDuplicateFreqs(&E4_freq_bin[0], curr_peak + E4_ADJUST) == 0) &&
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	331b      	adds	r3, #27
 8001062:	4619      	mov	r1, r3
 8001064:	4828      	ldr	r0, [pc, #160]	@ (8001108 <determineFreqBins+0x31c>)
 8001066:	f7ff fea1 	bl	8000dac <determineDuplicateFreqs>
 800106a:	4603      	mov	r3, r0
		} else if ((curr_peak + E4_ADJUST > E4_low && curr_peak + E4_ADJUST < E4_high) &&
 800106c:	2b00      	cmp	r3, #0
 800106e:	d110      	bne.n	8001092 <determineFreqBins+0x2a6>
				   (E4_index < FREQ_BIN_WIDTH)) {
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <determineFreqBins+0x320>)
 8001072:	681b      	ldr	r3, [r3, #0]
				   (determineDuplicateFreqs(&E4_freq_bin[0], curr_peak + E4_ADJUST) == 0) &&
 8001074:	2b02      	cmp	r3, #2
 8001076:	dc0c      	bgt.n	8001092 <determineFreqBins+0x2a6>
			E4_freq_bin[E4_index] = curr_peak+ E4_ADJUST ;
 8001078:	4b24      	ldr	r3, [pc, #144]	@ (800110c <determineFreqBins+0x320>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	321b      	adds	r2, #27
 8001080:	4921      	ldr	r1, [pc, #132]	@ (8001108 <determineFreqBins+0x31c>)
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			E4_index++;
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <determineFreqBins+0x320>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a1f      	ldr	r2, [pc, #124]	@ (800110c <determineFreqBins+0x320>)
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e000      	b.n	8001094 <determineFreqBins+0x2a8>
			continue;
 8001092:	bf00      	nop
	for (int i = 0; i < MAX_PEAKS; i++) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b11      	cmp	r3, #17
 800109e:	f77f aead 	ble.w	8000dfc <determineFreqBins+0x10>
		}
	}
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	24003c0c 	.word	0x24003c0c
 80010b0:	24000008 	.word	0x24000008
 80010b4:	2400000c 	.word	0x2400000c
 80010b8:	24003c9c 	.word	0x24003c9c
 80010bc:	24003ce4 	.word	0x24003ce4
 80010c0:	24000010 	.word	0x24000010
 80010c4:	24000014 	.word	0x24000014
 80010c8:	24003ca8 	.word	0x24003ca8
 80010cc:	24003ce8 	.word	0x24003ce8
 80010d0:	24000018 	.word	0x24000018
 80010d4:	2400001c 	.word	0x2400001c
 80010d8:	24003cb4 	.word	0x24003cb4
 80010dc:	24003cec 	.word	0x24003cec
 80010e0:	24000020 	.word	0x24000020
 80010e4:	24000024 	.word	0x24000024
 80010e8:	24003cc0 	.word	0x24003cc0
 80010ec:	24003cf0 	.word	0x24003cf0
 80010f0:	24000028 	.word	0x24000028
 80010f4:	2400002c 	.word	0x2400002c
 80010f8:	24003ccc 	.word	0x24003ccc
 80010fc:	24003cf4 	.word	0x24003cf4
 8001100:	24000030 	.word	0x24000030
 8001104:	24000034 	.word	0x24000034
 8001108:	24003cd8 	.word	0x24003cd8
 800110c:	24003cf8 	.word	0x24003cf8

08001110 <checkClosestFreq>:

void checkClosestFreq(int freqs[], float correct_note) {
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	ed87 0a00 	vstr	s0, [r7]
	int peakOneFreqDist = abs(correct_note - freqs[0]);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	ed97 7a00 	vldr	s14, [r7]
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001134:	ee17 3a90 	vmov	r3, s15
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	617b      	str	r3, [r7, #20]
	int peakTwoFreqDist = abs(correct_note - freqs[1]);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3304      	adds	r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	ed97 7a00 	vldr	s14, [r7]
 8001152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115a:	ee17 3a90 	vmov	r3, s15
 800115e:	2b00      	cmp	r3, #0
 8001160:	bfb8      	it	lt
 8001162:	425b      	neglt	r3, r3
 8001164:	613b      	str	r3, [r7, #16]
	int peakThreeFreqDist = abs(correct_note - freqs[2]);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3308      	adds	r3, #8
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ed97 7a00 	vldr	s14, [r7]
 8001178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001180:	ee17 3a90 	vmov	r3, s15
 8001184:	2b00      	cmp	r3, #0
 8001186:	bfb8      	it	lt
 8001188:	425b      	neglt	r3, r3
 800118a:	60fb      	str	r3, [r7, #12]

	if (peakOneFreqDist <= peakTwoFreqDist && peakOneFreqDist <= peakThreeFreqDist) {
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	dc10      	bgt.n	80011b6 <checkClosestFreq+0xa6>
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	dc0c      	bgt.n	80011b6 <checkClosestFreq+0xa6>
		freqs[0] = freqs[0];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]
		freqs[1] = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3304      	adds	r3, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
		freqs[2] = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3308      	adds	r3, #8
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e029      	b.n	800120a <checkClosestFreq+0xfa>
	} else if (peakTwoFreqDist <= peakOneFreqDist && peakTwoFreqDist <= peakThreeFreqDist) {
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dc10      	bgt.n	80011e0 <checkClosestFreq+0xd0>
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dc0c      	bgt.n	80011e0 <checkClosestFreq+0xd0>
		freqs[0] = freqs[1];
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
		freqs[1] = 0;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
		freqs[2] = 0;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3308      	adds	r3, #8
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e014      	b.n	800120a <checkClosestFreq+0xfa>
	} else if (peakThreeFreqDist <= peakOneFreqDist && peakThreeFreqDist <= peakTwoFreqDist) {
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dc10      	bgt.n	800120a <checkClosestFreq+0xfa>
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dc0c      	bgt.n	800120a <checkClosestFreq+0xfa>
		freqs[0] = freqs[2];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	601a      	str	r2, [r3, #0]
		freqs[1] = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3304      	adds	r3, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
		freqs[2] = 0;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3308      	adds	r3, #8
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
	}
}
 8001208:	e7ff      	b.n	800120a <checkClosestFreq+0xfa>
 800120a:	bf00      	nop
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <cleanFreqBins>:

void cleanFreqBins() {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_STRINGS; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	e061      	b.n	80012e8 <cleanFreqBins+0xd0>
		if (i == 0) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10c      	bne.n	8001244 <cleanFreqBins+0x2c>
			if (E2_index > 1) {
 800122a:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <cleanFreqBins+0xe0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	dd57      	ble.n	80012e2 <cleanFreqBins+0xca>
				checkClosestFreq(&E2_freq_bin[0], E2);
 8001232:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80012fc <cleanFreqBins+0xe4>
 8001236:	4832      	ldr	r0, [pc, #200]	@ (8001300 <cleanFreqBins+0xe8>)
 8001238:	f7ff ff6a 	bl	8001110 <checkClosestFreq>
				E2_index = 1;
 800123c:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <cleanFreqBins+0xe0>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e04e      	b.n	80012e2 <cleanFreqBins+0xca>
			}
		} else if (i == 1) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10c      	bne.n	8001264 <cleanFreqBins+0x4c>
			if (A2_index > 1) {
 800124a:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <cleanFreqBins+0xec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	dd47      	ble.n	80012e2 <cleanFreqBins+0xca>
				checkClosestFreq(&A2_freq_bin[0], A2);
 8001252:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001308 <cleanFreqBins+0xf0>
 8001256:	482d      	ldr	r0, [pc, #180]	@ (800130c <cleanFreqBins+0xf4>)
 8001258:	f7ff ff5a 	bl	8001110 <checkClosestFreq>
				A2_index = 1;
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <cleanFreqBins+0xec>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e03e      	b.n	80012e2 <cleanFreqBins+0xca>
			}
		} else if (i == 2) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d10c      	bne.n	8001284 <cleanFreqBins+0x6c>
			if (D3_index > 1) {
 800126a:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <cleanFreqBins+0xf8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	dd37      	ble.n	80012e2 <cleanFreqBins+0xca>
				checkClosestFreq(&D3_freq_bin[0], D3);
 8001272:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001314 <cleanFreqBins+0xfc>
 8001276:	4828      	ldr	r0, [pc, #160]	@ (8001318 <cleanFreqBins+0x100>)
 8001278:	f7ff ff4a 	bl	8001110 <checkClosestFreq>
				D3_index = 1;
 800127c:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <cleanFreqBins+0xf8>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e02e      	b.n	80012e2 <cleanFreqBins+0xca>
			}
		} else if (i == 3) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d10c      	bne.n	80012a4 <cleanFreqBins+0x8c>
			if (G3_index > 1) {
 800128a:	4b24      	ldr	r3, [pc, #144]	@ (800131c <cleanFreqBins+0x104>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	dd27      	ble.n	80012e2 <cleanFreqBins+0xca>
				checkClosestFreq(&G3_freq_bin[0], G3);
 8001292:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001320 <cleanFreqBins+0x108>
 8001296:	4823      	ldr	r0, [pc, #140]	@ (8001324 <cleanFreqBins+0x10c>)
 8001298:	f7ff ff3a 	bl	8001110 <checkClosestFreq>
				G3_index = 1;
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <cleanFreqBins+0x104>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e01e      	b.n	80012e2 <cleanFreqBins+0xca>
			}
		} else if (i == 4) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d10c      	bne.n	80012c4 <cleanFreqBins+0xac>
			if (B3_index > 1) {
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <cleanFreqBins+0x110>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	dd17      	ble.n	80012e2 <cleanFreqBins+0xca>
				checkClosestFreq(&B3_freq_bin[0], B3);
 80012b2:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800132c <cleanFreqBins+0x114>
 80012b6:	481e      	ldr	r0, [pc, #120]	@ (8001330 <cleanFreqBins+0x118>)
 80012b8:	f7ff ff2a 	bl	8001110 <checkClosestFreq>
				B3_index = 1;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <cleanFreqBins+0x110>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e00e      	b.n	80012e2 <cleanFreqBins+0xca>
			}
		} else if (i == 5) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d10b      	bne.n	80012e2 <cleanFreqBins+0xca>
			if (E4_index > 1) {
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <cleanFreqBins+0x11c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	dd07      	ble.n	80012e2 <cleanFreqBins+0xca>
				checkClosestFreq(&E4_freq_bin[0], E4);
 80012d2:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001338 <cleanFreqBins+0x120>
 80012d6:	4819      	ldr	r0, [pc, #100]	@ (800133c <cleanFreqBins+0x124>)
 80012d8:	f7ff ff1a 	bl	8001110 <checkClosestFreq>
				E4_index = 1;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <cleanFreqBins+0x11c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_STRINGS; i++) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	dd9a      	ble.n	8001224 <cleanFreqBins+0xc>
			}
		}
	}
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	24003ce4 	.word	0x24003ce4
 80012fc:	42a4d1ec 	.word	0x42a4d1ec
 8001300:	24003c9c 	.word	0x24003c9c
 8001304:	24003ce8 	.word	0x24003ce8
 8001308:	42dc0000 	.word	0x42dc0000
 800130c:	24003ca8 	.word	0x24003ca8
 8001310:	24003cec 	.word	0x24003cec
 8001314:	4312d47b 	.word	0x4312d47b
 8001318:	24003cb4 	.word	0x24003cb4
 800131c:	24003cf0 	.word	0x24003cf0
 8001320:	43440000 	.word	0x43440000
 8001324:	24003cc0 	.word	0x24003cc0
 8001328:	24003cf4 	.word	0x24003cf4
 800132c:	4376f0a4 	.word	0x4376f0a4
 8001330:	24003ccc 	.word	0x24003ccc
 8001334:	24003cf8 	.word	0x24003cf8
 8001338:	43a4d0a4 	.word	0x43a4d0a4
 800133c:	24003cd8 	.word	0x24003cd8

08001340 <rotateMotor>:

void rotateMotor(int direction, int duration){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	if (direction == 1) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10c      	bne.n	800136a <rotateMotor+0x2a>
		HAL_GPIO_WritePin(Motor_Control_1_GPIO_Port, Motor_Control_1_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001356:	4822      	ldr	r0, [pc, #136]	@ (80013e0 <rotateMotor+0xa0>)
 8001358:	f003 fae4 	bl	8004924 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, Motor_Control_2_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001362:	4820      	ldr	r0, [pc, #128]	@ (80013e4 <rotateMotor+0xa4>)
 8001364:	f003 fade 	bl	8004924 <HAL_GPIO_WritePin>
 8001368:	e00e      	b.n	8001388 <rotateMotor+0x48>
	} else if (direction == 2) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d10b      	bne.n	8001388 <rotateMotor+0x48>
		HAL_GPIO_WritePin(Motor_Control_1_GPIO_Port, Motor_Control_1_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001376:	481a      	ldr	r0, [pc, #104]	@ (80013e0 <rotateMotor+0xa0>)
 8001378:	f003 fad4 	bl	8004924 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, Motor_Control_2_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001382:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <rotateMotor+0xa4>)
 8001384:	f003 face 	bl	8004924 <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2108      	movs	r1, #8
 800138c:	4816      	ldr	r0, [pc, #88]	@ (80013e8 <rotateMotor+0xa8>)
 800138e:	f003 fac9 	bl	8004924 <HAL_GPIO_WritePin>

	snprintf(buffer, 100, "Motor Rotation Duration: %d \r\n", duration);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <rotateMotor+0xac>)
 8001396:	2164      	movs	r1, #100	@ 0x64
 8001398:	4815      	ldr	r0, [pc, #84]	@ (80013f0 <rotateMotor+0xb0>)
 800139a:	f00a f9f9 	bl	800b790 <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800139e:	2364      	movs	r3, #100	@ 0x64
 80013a0:	2264      	movs	r2, #100	@ 0x64
 80013a2:	4913      	ldr	r1, [pc, #76]	@ (80013f0 <rotateMotor+0xb0>)
 80013a4:	4813      	ldr	r0, [pc, #76]	@ (80013f4 <rotateMotor+0xb4>)
 80013a6:	f007 fbeb 	bl	8008b80 <HAL_UART_Transmit>
	clearBuffer();
 80013aa:	f7ff fb2b 	bl	8000a04 <clearBuffer>

	HAL_Delay(duration);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fa17 	bl	80027e4 <HAL_Delay>


	HAL_GPIO_WritePin(Motor_Control_1_GPIO_Port, Motor_Control_1_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <rotateMotor+0xa0>)
 80013be:	f003 fab1 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, Motor_Control_2_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c8:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <rotateMotor+0xa4>)
 80013ca:	f003 faab 	bl	8004924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2108      	movs	r1, #8
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <rotateMotor+0xa8>)
 80013d4:	f003 faa6 	bl	8004924 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58021000 	.word	0x58021000
 80013e8:	58021400 	.word	0x58021400
 80013ec:	0800ddc8 	.word	0x0800ddc8
 80013f0:	24000374 	.word	0x24000374
 80013f4:	240002e0 	.word	0x240002e0

080013f8 <determineDuration>:

int determineDuration(float correctFreq, float currFreq){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	edc7 0a00 	vstr	s1, [r7]
	inTuneDiff = abs(correctFreq - currFreq);
 8001406:	ed97 7a01 	vldr	s14, [r7, #4]
 800140a:	edd7 7a00 	vldr	s15, [r7]
 800140e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001416:	ee17 3a90 	vmov	r3, s15
 800141a:	2b00      	cmp	r3, #0
 800141c:	bfb8      	it	lt
 800141e:	425b      	neglt	r3, r3
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <determineDuration+0x94>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
	currDegreesRotated = (inTuneDiff / 21) * 180;
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <determineDuration+0x94>)
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	eef3 6a05 	vmov.f32	s13, #53	@ 0x41a80000  21.0
 8001438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001490 <determineDuration+0x98>
 8001440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001448:	ee17 2a90 	vmov	r2, s15
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <determineDuration+0x9c>)
 800144e:	601a      	str	r2, [r3, #0]
	if (currDegreesRotated < prevDegreesRotated) {
 8001450:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <determineDuration+0x9c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <determineDuration+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	da0f      	bge.n	800147c <determineDuration+0x84>
		prevDegreesRotated = currDegreesRotated;
 800145c:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <determineDuration+0x9c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <determineDuration+0xa0>)
 8001462:	6013      	str	r3, [r2, #0]
		return (currDegreesRotated / 3) * 1000;
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <determineDuration+0x9c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0c      	ldr	r2, [pc, #48]	@ (800149c <determineDuration+0xa4>)
 800146a:	fb82 1203 	smull	r1, r2, r2, r3
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	e001      	b.n	8001480 <determineDuration+0x88>
	} else {
		return -1;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	24003d18 	.word	0x24003d18
 8001490:	43340000 	.word	0x43340000
 8001494:	24003d14 	.word	0x24003d14
 8001498:	24000038 	.word	0x24000038
 800149c:	55555556 	.word	0x55555556

080014a0 <turnMotors>:

void turnMotors() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	if (E2_tune == 1) {
 80014a4:	4b76      	ldr	r3, [pc, #472]	@ (8001680 <turnMotors+0x1e0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10b      	bne.n	80014c4 <turnMotors+0x24>
		snprintf(buffer, 100, "E2 String is Sharp... Turning Motor Clockwise \r\n");
 80014ac:	4a75      	ldr	r2, [pc, #468]	@ (8001684 <turnMotors+0x1e4>)
 80014ae:	2164      	movs	r1, #100	@ 0x64
 80014b0:	4875      	ldr	r0, [pc, #468]	@ (8001688 <turnMotors+0x1e8>)
 80014b2:	f00a f96d 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 80014b6:	2364      	movs	r3, #100	@ 0x64
 80014b8:	2264      	movs	r2, #100	@ 0x64
 80014ba:	4973      	ldr	r1, [pc, #460]	@ (8001688 <turnMotors+0x1e8>)
 80014bc:	4873      	ldr	r0, [pc, #460]	@ (800168c <turnMotors+0x1ec>)
 80014be:	f007 fb5f 	bl	8008b80 <HAL_UART_Transmit>
 80014c2:	e00e      	b.n	80014e2 <turnMotors+0x42>
	} else if (E2_tune == 2) {
 80014c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001680 <turnMotors+0x1e0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d10a      	bne.n	80014e2 <turnMotors+0x42>
		snprintf(buffer, 100, "E2 String is Flat... Turning Motor Counterclockwise \r\n");
 80014cc:	4a70      	ldr	r2, [pc, #448]	@ (8001690 <turnMotors+0x1f0>)
 80014ce:	2164      	movs	r1, #100	@ 0x64
 80014d0:	486d      	ldr	r0, [pc, #436]	@ (8001688 <turnMotors+0x1e8>)
 80014d2:	f00a f95d 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 80014d6:	2364      	movs	r3, #100	@ 0x64
 80014d8:	2264      	movs	r2, #100	@ 0x64
 80014da:	496b      	ldr	r1, [pc, #428]	@ (8001688 <turnMotors+0x1e8>)
 80014dc:	486b      	ldr	r0, [pc, #428]	@ (800168c <turnMotors+0x1ec>)
 80014de:	f007 fb4f 	bl	8008b80 <HAL_UART_Transmit>
	}
	clearBuffer();
 80014e2:	f7ff fa8f 	bl	8000a04 <clearBuffer>

	if (A2_tune == 1) {
 80014e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001694 <turnMotors+0x1f4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <turnMotors+0x66>
		snprintf(buffer, 100, "A2 String is Sharp... Turning Motor Clockwise \r\n");
 80014ee:	4a6a      	ldr	r2, [pc, #424]	@ (8001698 <turnMotors+0x1f8>)
 80014f0:	2164      	movs	r1, #100	@ 0x64
 80014f2:	4865      	ldr	r0, [pc, #404]	@ (8001688 <turnMotors+0x1e8>)
 80014f4:	f00a f94c 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 80014f8:	2364      	movs	r3, #100	@ 0x64
 80014fa:	2264      	movs	r2, #100	@ 0x64
 80014fc:	4962      	ldr	r1, [pc, #392]	@ (8001688 <turnMotors+0x1e8>)
 80014fe:	4863      	ldr	r0, [pc, #396]	@ (800168c <turnMotors+0x1ec>)
 8001500:	f007 fb3e 	bl	8008b80 <HAL_UART_Transmit>
 8001504:	e00e      	b.n	8001524 <turnMotors+0x84>
	} else if (A2_tune == 2) {
 8001506:	4b63      	ldr	r3, [pc, #396]	@ (8001694 <turnMotors+0x1f4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d10a      	bne.n	8001524 <turnMotors+0x84>
		snprintf(buffer, 100, "A2 String is Flat... Turning Motor Counterclockwise \r\n");
 800150e:	4a63      	ldr	r2, [pc, #396]	@ (800169c <turnMotors+0x1fc>)
 8001510:	2164      	movs	r1, #100	@ 0x64
 8001512:	485d      	ldr	r0, [pc, #372]	@ (8001688 <turnMotors+0x1e8>)
 8001514:	f00a f93c 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8001518:	2364      	movs	r3, #100	@ 0x64
 800151a:	2264      	movs	r2, #100	@ 0x64
 800151c:	495a      	ldr	r1, [pc, #360]	@ (8001688 <turnMotors+0x1e8>)
 800151e:	485b      	ldr	r0, [pc, #364]	@ (800168c <turnMotors+0x1ec>)
 8001520:	f007 fb2e 	bl	8008b80 <HAL_UART_Transmit>
	}
	clearBuffer();
 8001524:	f7ff fa6e 	bl	8000a04 <clearBuffer>

	if (D3_tune == 1) {
 8001528:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <turnMotors+0x200>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10b      	bne.n	8001548 <turnMotors+0xa8>
		snprintf(buffer, 100, "D3 String is Sharp... Turning Motor Clockwise \r\n");
 8001530:	4a5c      	ldr	r2, [pc, #368]	@ (80016a4 <turnMotors+0x204>)
 8001532:	2164      	movs	r1, #100	@ 0x64
 8001534:	4854      	ldr	r0, [pc, #336]	@ (8001688 <turnMotors+0x1e8>)
 8001536:	f00a f92b 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800153a:	2364      	movs	r3, #100	@ 0x64
 800153c:	2264      	movs	r2, #100	@ 0x64
 800153e:	4952      	ldr	r1, [pc, #328]	@ (8001688 <turnMotors+0x1e8>)
 8001540:	4852      	ldr	r0, [pc, #328]	@ (800168c <turnMotors+0x1ec>)
 8001542:	f007 fb1d 	bl	8008b80 <HAL_UART_Transmit>
 8001546:	e00e      	b.n	8001566 <turnMotors+0xc6>
	} else if (D3_tune == 2) {
 8001548:	4b55      	ldr	r3, [pc, #340]	@ (80016a0 <turnMotors+0x200>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d10a      	bne.n	8001566 <turnMotors+0xc6>
		snprintf(buffer, 100, "D3 String is Flat... Turning Motor Counterclockwise \r\n");
 8001550:	4a55      	ldr	r2, [pc, #340]	@ (80016a8 <turnMotors+0x208>)
 8001552:	2164      	movs	r1, #100	@ 0x64
 8001554:	484c      	ldr	r0, [pc, #304]	@ (8001688 <turnMotors+0x1e8>)
 8001556:	f00a f91b 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800155a:	2364      	movs	r3, #100	@ 0x64
 800155c:	2264      	movs	r2, #100	@ 0x64
 800155e:	494a      	ldr	r1, [pc, #296]	@ (8001688 <turnMotors+0x1e8>)
 8001560:	484a      	ldr	r0, [pc, #296]	@ (800168c <turnMotors+0x1ec>)
 8001562:	f007 fb0d 	bl	8008b80 <HAL_UART_Transmit>
	}
	clearBuffer();
 8001566:	f7ff fa4d 	bl	8000a04 <clearBuffer>

	if (G3_tune == 1) {
 800156a:	4b50      	ldr	r3, [pc, #320]	@ (80016ac <turnMotors+0x20c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d11e      	bne.n	80015b0 <turnMotors+0x110>
		snprintf(buffer, 100, "G3 String is Sharp... Turning Motor Clockwise \r\n");
 8001572:	4a4f      	ldr	r2, [pc, #316]	@ (80016b0 <turnMotors+0x210>)
 8001574:	2164      	movs	r1, #100	@ 0x64
 8001576:	4844      	ldr	r0, [pc, #272]	@ (8001688 <turnMotors+0x1e8>)
 8001578:	f00a f90a 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800157c:	2364      	movs	r3, #100	@ 0x64
 800157e:	2264      	movs	r2, #100	@ 0x64
 8001580:	4941      	ldr	r1, [pc, #260]	@ (8001688 <turnMotors+0x1e8>)
 8001582:	4842      	ldr	r0, [pc, #264]	@ (800168c <turnMotors+0x1ec>)
 8001584:	f007 fafc 	bl	8008b80 <HAL_UART_Transmit>
		clearBuffer();
 8001588:	f7ff fa3c 	bl	8000a04 <clearBuffer>

		rotateMotor(1, determineDuration(G3, G3_freq_bin[0]));
 800158c:	4b49      	ldr	r3, [pc, #292]	@ (80016b4 <turnMotors+0x214>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001598:	eef0 0a67 	vmov.f32	s1, s15
 800159c:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 80016b8 <turnMotors+0x218>
 80015a0:	f7ff ff2a 	bl	80013f8 <determineDuration>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	2001      	movs	r0, #1
 80015aa:	f7ff fec9 	bl	8001340 <rotateMotor>
 80015ae:	e021      	b.n	80015f4 <turnMotors+0x154>
	} else if (G3_tune == 2) {
 80015b0:	4b3e      	ldr	r3, [pc, #248]	@ (80016ac <turnMotors+0x20c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d11d      	bne.n	80015f4 <turnMotors+0x154>
		snprintf(buffer, 100, "G3 String is Flat... Turning Motor Counterclockwise \r\n");
 80015b8:	4a40      	ldr	r2, [pc, #256]	@ (80016bc <turnMotors+0x21c>)
 80015ba:	2164      	movs	r1, #100	@ 0x64
 80015bc:	4832      	ldr	r0, [pc, #200]	@ (8001688 <turnMotors+0x1e8>)
 80015be:	f00a f8e7 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 80015c2:	2364      	movs	r3, #100	@ 0x64
 80015c4:	2264      	movs	r2, #100	@ 0x64
 80015c6:	4930      	ldr	r1, [pc, #192]	@ (8001688 <turnMotors+0x1e8>)
 80015c8:	4830      	ldr	r0, [pc, #192]	@ (800168c <turnMotors+0x1ec>)
 80015ca:	f007 fad9 	bl	8008b80 <HAL_UART_Transmit>
		clearBuffer();
 80015ce:	f7ff fa19 	bl	8000a04 <clearBuffer>

		rotateMotor(2, determineDuration(G3, G3_freq_bin[0]));
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <turnMotors+0x214>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	eef0 0a67 	vmov.f32	s1, s15
 80015e2:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80016b8 <turnMotors+0x218>
 80015e6:	f7ff ff07 	bl	80013f8 <determineDuration>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	2002      	movs	r0, #2
 80015f0:	f7ff fea6 	bl	8001340 <rotateMotor>
	}
	clearBuffer();
 80015f4:	f7ff fa06 	bl	8000a04 <clearBuffer>

	if (B3_tune == 1) {
 80015f8:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <turnMotors+0x220>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10b      	bne.n	8001618 <turnMotors+0x178>
		snprintf(buffer, 100, "B3 String is Sharp... Turning Motor Clockwise \r\n");
 8001600:	4a30      	ldr	r2, [pc, #192]	@ (80016c4 <turnMotors+0x224>)
 8001602:	2164      	movs	r1, #100	@ 0x64
 8001604:	4820      	ldr	r0, [pc, #128]	@ (8001688 <turnMotors+0x1e8>)
 8001606:	f00a f8c3 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800160a:	2364      	movs	r3, #100	@ 0x64
 800160c:	2264      	movs	r2, #100	@ 0x64
 800160e:	491e      	ldr	r1, [pc, #120]	@ (8001688 <turnMotors+0x1e8>)
 8001610:	481e      	ldr	r0, [pc, #120]	@ (800168c <turnMotors+0x1ec>)
 8001612:	f007 fab5 	bl	8008b80 <HAL_UART_Transmit>
 8001616:	e00e      	b.n	8001636 <turnMotors+0x196>
	} else if (B3_tune == 2) {
 8001618:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <turnMotors+0x220>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d10a      	bne.n	8001636 <turnMotors+0x196>
		snprintf(buffer, 100, "B3 String is Flat... Turning Motor Counterclockwise \r\n");
 8001620:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <turnMotors+0x228>)
 8001622:	2164      	movs	r1, #100	@ 0x64
 8001624:	4818      	ldr	r0, [pc, #96]	@ (8001688 <turnMotors+0x1e8>)
 8001626:	f00a f8b3 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800162a:	2364      	movs	r3, #100	@ 0x64
 800162c:	2264      	movs	r2, #100	@ 0x64
 800162e:	4916      	ldr	r1, [pc, #88]	@ (8001688 <turnMotors+0x1e8>)
 8001630:	4816      	ldr	r0, [pc, #88]	@ (800168c <turnMotors+0x1ec>)
 8001632:	f007 faa5 	bl	8008b80 <HAL_UART_Transmit>
	}
	clearBuffer();
 8001636:	f7ff f9e5 	bl	8000a04 <clearBuffer>

	if (E4_tune == 1) {
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <turnMotors+0x22c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10b      	bne.n	800165a <turnMotors+0x1ba>
		snprintf(buffer, 100, "E4 String is Sharp... Turning Motor Clockwise \r\n");
 8001642:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <turnMotors+0x230>)
 8001644:	2164      	movs	r1, #100	@ 0x64
 8001646:	4810      	ldr	r0, [pc, #64]	@ (8001688 <turnMotors+0x1e8>)
 8001648:	f00a f8a2 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800164c:	2364      	movs	r3, #100	@ 0x64
 800164e:	2264      	movs	r2, #100	@ 0x64
 8001650:	490d      	ldr	r1, [pc, #52]	@ (8001688 <turnMotors+0x1e8>)
 8001652:	480e      	ldr	r0, [pc, #56]	@ (800168c <turnMotors+0x1ec>)
 8001654:	f007 fa94 	bl	8008b80 <HAL_UART_Transmit>
 8001658:	e00e      	b.n	8001678 <turnMotors+0x1d8>
	} else if (E4_tune == 2) {
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <turnMotors+0x22c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d10a      	bne.n	8001678 <turnMotors+0x1d8>
		snprintf(buffer, 100, "E4 String is Flat... Turning Motor Counterclockwise \r\n");
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <turnMotors+0x234>)
 8001664:	2164      	movs	r1, #100	@ 0x64
 8001666:	4808      	ldr	r0, [pc, #32]	@ (8001688 <turnMotors+0x1e8>)
 8001668:	f00a f892 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800166c:	2364      	movs	r3, #100	@ 0x64
 800166e:	2264      	movs	r2, #100	@ 0x64
 8001670:	4905      	ldr	r1, [pc, #20]	@ (8001688 <turnMotors+0x1e8>)
 8001672:	4806      	ldr	r0, [pc, #24]	@ (800168c <turnMotors+0x1ec>)
 8001674:	f007 fa84 	bl	8008b80 <HAL_UART_Transmit>
	}
	clearBuffer();
 8001678:	f7ff f9c4 	bl	8000a04 <clearBuffer>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	24003cfc 	.word	0x24003cfc
 8001684:	0800dde8 	.word	0x0800dde8
 8001688:	24000374 	.word	0x24000374
 800168c:	240002e0 	.word	0x240002e0
 8001690:	0800de1c 	.word	0x0800de1c
 8001694:	24003d00 	.word	0x24003d00
 8001698:	0800de54 	.word	0x0800de54
 800169c:	0800de88 	.word	0x0800de88
 80016a0:	24003d04 	.word	0x24003d04
 80016a4:	0800dec0 	.word	0x0800dec0
 80016a8:	0800def4 	.word	0x0800def4
 80016ac:	24003d08 	.word	0x24003d08
 80016b0:	0800df2c 	.word	0x0800df2c
 80016b4:	24003cc0 	.word	0x24003cc0
 80016b8:	43440000 	.word	0x43440000
 80016bc:	0800df60 	.word	0x0800df60
 80016c0:	24003d0c 	.word	0x24003d0c
 80016c4:	0800df98 	.word	0x0800df98
 80016c8:	0800dfcc 	.word	0x0800dfcc
 80016cc:	24003d10 	.word	0x24003d10
 80016d0:	0800e004 	.word	0x0800e004
 80016d4:	0800e038 	.word	0x0800e038

080016d8 <calculateTuning>:

void isInTune() {
	blinkGreenLED();
}

int calculateTuning(float curr_freq, float correct_freq, float tune_tol) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0a03 	vstr	s0, [r7, #12]
 80016e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016e6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (curr_freq >= correct_freq - tune_tol && curr_freq <= correct_freq + tune_tol) {
 80016ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	db0e      	blt.n	8001722 <calculateTuning+0x4a>
 8001704:	ed97 7a02 	vldr	s14, [r7, #8]
 8001708:	edd7 7a01 	vldr	s15, [r7, #4]
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	ed97 7a03 	vldr	s14, [r7, #12]
 8001714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d801      	bhi.n	8001722 <calculateTuning+0x4a>
		//isInTune();
		return 0;
 800171e:	2300      	movs	r3, #0
 8001720:	e02e      	b.n	8001780 <calculateTuning+0xa8>
	} else if (curr_freq > correct_freq + tune_tol) {
 8001722:	ed97 7a02 	vldr	s14, [r7, #8]
 8001726:	edd7 7a01 	vldr	s15, [r7, #4]
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	dd01      	ble.n	8001740 <calculateTuning+0x68>
		//isSharp();
		return 1;
 800173c:	2301      	movs	r3, #1
 800173e:	e01f      	b.n	8001780 <calculateTuning+0xa8>
	} else if (curr_freq < correct_freq - tune_tol) {
 8001740:	ed97 7a02 	vldr	s14, [r7, #8]
 8001744:	edd7 7a01 	vldr	s15, [r7, #4]
 8001748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	d501      	bpl.n	800175e <calculateTuning+0x86>
		//isFlat();
		return 2;
 800175a:	2302      	movs	r3, #2
 800175c:	e010      	b.n	8001780 <calculateTuning+0xa8>
	} else {
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2101      	movs	r1, #1
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <calculateTuning+0xb0>)
 8001764:	f003 f8de 	bl	8004924 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2102      	movs	r1, #2
 800176c:	4807      	ldr	r0, [pc, #28]	@ (800178c <calculateTuning+0xb4>)
 800176e:	f003 f8d9 	bl	8004924 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <calculateTuning+0xb0>)
 800177a:	f003 f8d3 	bl	8004924 <HAL_GPIO_WritePin>
		return 3;
 800177e:	2303      	movs	r3, #3
	}
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58020400 	.word	0x58020400
 800178c:	58021000 	.word	0x58021000

08001790 <checkTuning>:

void checkTuning() {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	inTuneFlag = 0;
 8001796:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <checkTuning+0x1d8>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_STRINGS; i++) {
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e0a6      	b.n	80018f0 <checkTuning+0x160>
		if (i == 0) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d118      	bne.n	80017da <checkTuning+0x4a>
			E2_tune = calculateTuning(E2_freq_bin[0], E2, E2_TUNE_TOL);
 80017a8:	4b70      	ldr	r3, [pc, #448]	@ (800196c <checkTuning+0x1dc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80017b8:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8001970 <checkTuning+0x1e0>
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	f7ff ff8a 	bl	80016d8 <calculateTuning>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a6b      	ldr	r2, [pc, #428]	@ (8001974 <checkTuning+0x1e4>)
 80017c8:	6013      	str	r3, [r2, #0]
			inTuneFlag += E2_tune;
 80017ca:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <checkTuning+0x1d8>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b69      	ldr	r3, [pc, #420]	@ (8001974 <checkTuning+0x1e4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a64      	ldr	r2, [pc, #400]	@ (8001968 <checkTuning+0x1d8>)
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e087      	b.n	80018ea <checkTuning+0x15a>
		} else if (i == 1) {
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d118      	bne.n	8001812 <checkTuning+0x82>
			A2_tune = calculateTuning(A2_freq_bin[0], A2, A2_TUNE_TOL);
 80017e0:	4b65      	ldr	r3, [pc, #404]	@ (8001978 <checkTuning+0x1e8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ec:	eeb6 1a08 	vmov.f32	s2, #104	@ 0x3f400000  0.750
 80017f0:	eddf 0a62 	vldr	s1, [pc, #392]	@ 800197c <checkTuning+0x1ec>
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	f7ff ff6e 	bl	80016d8 <calculateTuning>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a60      	ldr	r2, [pc, #384]	@ (8001980 <checkTuning+0x1f0>)
 8001800:	6013      	str	r3, [r2, #0]
			inTuneFlag += A2_tune;
 8001802:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <checkTuning+0x1d8>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b5e      	ldr	r3, [pc, #376]	@ (8001980 <checkTuning+0x1f0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a56      	ldr	r2, [pc, #344]	@ (8001968 <checkTuning+0x1d8>)
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e06b      	b.n	80018ea <checkTuning+0x15a>
		} else if (i == 2) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d118      	bne.n	800184a <checkTuning+0xba>
			D3_tune = calculateTuning(D3_freq_bin[0], D3, D3_TUNE_TOL);
 8001818:	4b5a      	ldr	r3, [pc, #360]	@ (8001984 <checkTuning+0x1f4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001824:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001828:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8001988 <checkTuning+0x1f8>
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	f7ff ff52 	bl	80016d8 <calculateTuning>
 8001834:	4603      	mov	r3, r0
 8001836:	4a55      	ldr	r2, [pc, #340]	@ (800198c <checkTuning+0x1fc>)
 8001838:	6013      	str	r3, [r2, #0]
			inTuneFlag += D3_tune;
 800183a:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <checkTuning+0x1d8>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b53      	ldr	r3, [pc, #332]	@ (800198c <checkTuning+0x1fc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a48      	ldr	r2, [pc, #288]	@ (8001968 <checkTuning+0x1d8>)
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e04f      	b.n	80018ea <checkTuning+0x15a>
		} else if (i == 3) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d118      	bne.n	8001882 <checkTuning+0xf2>
			G3_tune = calculateTuning(G3_freq_bin[0], G3, G3_TUNE_TOL);
 8001850:	4b4f      	ldr	r3, [pc, #316]	@ (8001990 <checkTuning+0x200>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185c:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8001994 <checkTuning+0x204>
 8001860:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8001998 <checkTuning+0x208>
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	f7ff ff36 	bl	80016d8 <calculateTuning>
 800186c:	4603      	mov	r3, r0
 800186e:	4a4b      	ldr	r2, [pc, #300]	@ (800199c <checkTuning+0x20c>)
 8001870:	6013      	str	r3, [r2, #0]
			inTuneFlag += G3_tune;
 8001872:	4b3d      	ldr	r3, [pc, #244]	@ (8001968 <checkTuning+0x1d8>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b49      	ldr	r3, [pc, #292]	@ (800199c <checkTuning+0x20c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a3a      	ldr	r2, [pc, #232]	@ (8001968 <checkTuning+0x1d8>)
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e033      	b.n	80018ea <checkTuning+0x15a>
		} else if (i == 4) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d118      	bne.n	80018ba <checkTuning+0x12a>
			B3_tune = calculateTuning(B3_freq_bin[0], B3, B3_TUNE_TOL);
 8001888:	4b45      	ldr	r3, [pc, #276]	@ (80019a0 <checkTuning+0x210>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001894:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 80019a4 <checkTuning+0x214>
 8001898:	eddf 0a43 	vldr	s1, [pc, #268]	@ 80019a8 <checkTuning+0x218>
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	f7ff ff1a 	bl	80016d8 <calculateTuning>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a41      	ldr	r2, [pc, #260]	@ (80019ac <checkTuning+0x21c>)
 80018a8:	6013      	str	r3, [r2, #0]
			inTuneFlag += B3_tune;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <checkTuning+0x1d8>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <checkTuning+0x21c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a2c      	ldr	r2, [pc, #176]	@ (8001968 <checkTuning+0x1d8>)
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e017      	b.n	80018ea <checkTuning+0x15a>
		} else {
			E4_tune = calculateTuning(E4_freq_bin[0], E4, E4_TUNE_TOL);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <checkTuning+0x220>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c6:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 80019b4 <checkTuning+0x224>
 80018ca:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 80019b8 <checkTuning+0x228>
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	f7ff ff01 	bl	80016d8 <calculateTuning>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a38      	ldr	r2, [pc, #224]	@ (80019bc <checkTuning+0x22c>)
 80018da:	6013      	str	r3, [r2, #0]
			inTuneFlag += E4_tune;
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <checkTuning+0x1d8>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b36      	ldr	r3, [pc, #216]	@ (80019bc <checkTuning+0x22c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a20      	ldr	r2, [pc, #128]	@ (8001968 <checkTuning+0x1d8>)
 80018e8:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < NUM_STRINGS; i++) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3301      	adds	r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	f77f af55 	ble.w	80017a2 <checkTuning+0x12>
		}
	}

	if (inTuneFlag == 0) {
 80018f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <checkTuning+0x1d8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d110      	bne.n	8001922 <checkTuning+0x192>
		snprintf(buffer, 100, "Your guitar is in tune and ready to play! \r\n");
 8001900:	4a2f      	ldr	r2, [pc, #188]	@ (80019c0 <checkTuning+0x230>)
 8001902:	2164      	movs	r1, #100	@ 0x64
 8001904:	482f      	ldr	r0, [pc, #188]	@ (80019c4 <checkTuning+0x234>)
 8001906:	f009 ff43 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800190a:	2364      	movs	r3, #100	@ 0x64
 800190c:	2264      	movs	r2, #100	@ 0x64
 800190e:	492d      	ldr	r1, [pc, #180]	@ (80019c4 <checkTuning+0x234>)
 8001910:	482d      	ldr	r0, [pc, #180]	@ (80019c8 <checkTuning+0x238>)
 8001912:	f007 f935 	bl	8008b80 <HAL_UART_Transmit>
		clearBuffer();
 8001916:	f7ff f875 	bl	8000a04 <clearBuffer>

		takeFFTs = 2;
 800191a:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <checkTuning+0x23c>)
 800191c:	2202      	movs	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
		clearBuffer();

		takeFFTs = 1;
	}
}
 8001920:	e01e      	b.n	8001960 <checkTuning+0x1d0>
		snprintf(buffer, 100, "Tuning still in process... \r\n");
 8001922:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <checkTuning+0x240>)
 8001924:	2164      	movs	r1, #100	@ 0x64
 8001926:	4827      	ldr	r0, [pc, #156]	@ (80019c4 <checkTuning+0x234>)
 8001928:	f009 ff32 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800192c:	2364      	movs	r3, #100	@ 0x64
 800192e:	2264      	movs	r2, #100	@ 0x64
 8001930:	4924      	ldr	r1, [pc, #144]	@ (80019c4 <checkTuning+0x234>)
 8001932:	4825      	ldr	r0, [pc, #148]	@ (80019c8 <checkTuning+0x238>)
 8001934:	f007 f924 	bl	8008b80 <HAL_UART_Transmit>
		clearBuffer();
 8001938:	f7ff f864 	bl	8000a04 <clearBuffer>
		turnMotors();
 800193c:	f7ff fdb0 	bl	80014a0 <turnMotors>
		snprintf(buffer, 100, "Please strum again! \r\n");
 8001940:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <checkTuning+0x244>)
 8001942:	2164      	movs	r1, #100	@ 0x64
 8001944:	481f      	ldr	r0, [pc, #124]	@ (80019c4 <checkTuning+0x234>)
 8001946:	f009 ff23 	bl	800b790 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800194a:	2364      	movs	r3, #100	@ 0x64
 800194c:	2264      	movs	r2, #100	@ 0x64
 800194e:	491d      	ldr	r1, [pc, #116]	@ (80019c4 <checkTuning+0x234>)
 8001950:	481d      	ldr	r0, [pc, #116]	@ (80019c8 <checkTuning+0x238>)
 8001952:	f007 f915 	bl	8008b80 <HAL_UART_Transmit>
		clearBuffer();
 8001956:	f7ff f855 	bl	8000a04 <clearBuffer>
		takeFFTs = 1;
 800195a:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <checkTuning+0x23c>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	24003c08 	.word	0x24003c08
 800196c:	24003c9c 	.word	0x24003c9c
 8001970:	42a4d1ec 	.word	0x42a4d1ec
 8001974:	24003cfc 	.word	0x24003cfc
 8001978:	24003ca8 	.word	0x24003ca8
 800197c:	42dc0000 	.word	0x42dc0000
 8001980:	24003d00 	.word	0x24003d00
 8001984:	24003cb4 	.word	0x24003cb4
 8001988:	4312d47b 	.word	0x4312d47b
 800198c:	24003d04 	.word	0x24003d04
 8001990:	24003cc0 	.word	0x24003cc0
 8001994:	3faccccd 	.word	0x3faccccd
 8001998:	43440000 	.word	0x43440000
 800199c:	24003d08 	.word	0x24003d08
 80019a0:	24003ccc 	.word	0x24003ccc
 80019a4:	3fd9999a 	.word	0x3fd9999a
 80019a8:	4376f0a4 	.word	0x4376f0a4
 80019ac:	24003d0c 	.word	0x24003d0c
 80019b0:	24003cd8 	.word	0x24003cd8
 80019b4:	40133333 	.word	0x40133333
 80019b8:	43a4d0a4 	.word	0x43a4d0a4
 80019bc:	24003d10 	.word	0x24003d10
 80019c0:	0800e070 	.word	0x0800e070
 80019c4:	24000374 	.word	0x24000374
 80019c8:	240002e0 	.word	0x240002e0
 80019cc:	24000004 	.word	0x24000004
 80019d0:	0800e0a0 	.word	0x0800e0a0
 80019d4:	0800e0c0 	.word	0x0800e0c0

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80019de:	f000 fb39 	bl	8002054 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e2:	f000 fe6d 	bl	80026c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e6:	f000 f8fb 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ea:	f000 fa7d 	bl	8001ee8 <MX_GPIO_Init>
  MX_ADC3_Init();
 80019ee:	f000 f973 	bl	8001cd8 <MX_ADC3_Init>
  MX_TIM1_Init();
 80019f2:	f000 f9d9 	bl	8001da8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80019f6:	f000 fa2b 	bl	8001e50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  arm_rfft_fast_init_f32(&fftHandler, FFT_SIZE_V0_1);
 80019fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019fe:	4867      	ldr	r0, [pc, #412]	@ (8001b9c <main+0x1c4>)
 8001a00:	f008 f9d8 	bl	8009db4 <arm_rfft_fast_init_f32>

  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_DIFFERENTIAL_ENDED);
 8001a04:	4a66      	ldr	r2, [pc, #408]	@ (8001ba0 <main+0x1c8>)
 8001a06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a0a:	4866      	ldr	r0, [pc, #408]	@ (8001ba4 <main+0x1cc>)
 8001a0c:	f002 fbbc 	bl	8004188 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim1);
 8001a10:	4865      	ldr	r0, [pc, #404]	@ (8001ba8 <main+0x1d0>)
 8001a12:	f006 fd31 	bl	8008478 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc3);
 8001a16:	4863      	ldr	r0, [pc, #396]	@ (8001ba4 <main+0x1cc>)
 8001a18:	f001 fb04 	bl	8003024 <HAL_ADC_Start_IT>

  snprintf(buffer, 100, "Please strum your guitar to begin the tuning process! \r\n");
 8001a1c:	4a63      	ldr	r2, [pc, #396]	@ (8001bac <main+0x1d4>)
 8001a1e:	2164      	movs	r1, #100	@ 0x64
 8001a20:	4863      	ldr	r0, [pc, #396]	@ (8001bb0 <main+0x1d8>)
 8001a22:	f009 feb5 	bl	800b790 <sniprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8001a26:	2364      	movs	r3, #100	@ 0x64
 8001a28:	2264      	movs	r2, #100	@ 0x64
 8001a2a:	4961      	ldr	r1, [pc, #388]	@ (8001bb0 <main+0x1d8>)
 8001a2c:	4861      	ldr	r0, [pc, #388]	@ (8001bb4 <main+0x1dc>)
 8001a2e:	f007 f8a7 	bl	8008b80 <HAL_UART_Transmit>
  clearBuffer();
 8001a32:	f7fe ffe7 	bl	8000a04 <clearBuffer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	blinkAllLEDs();
 8001a36:	f7fe ff07 	bl	8000848 <blinkAllLEDs>

	if (TEST_VERSIONS == 1) {
		if (fftFlag == 1 && takeFFTs == 1) {
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <main+0x1e0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	f040 8091 	bne.w	8001b66 <main+0x18e>
 8001a44:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <main+0x1e4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	f040 808c 	bne.w	8001b66 <main+0x18e>
			freqIndex = 0;
 8001a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc0 <main+0x1e8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < FFT_SIZE_V0_1; i += 2) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	e072      	b.n	8001b40 <main+0x168>
				currVal = sqrtf((outputSignalV1[i] * outputSignalV1[i]) + (outputSignalV1[i + 1] * outputSignalV1[i + 1]));
 8001a5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc4 <main+0x1ec>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	ed93 7a00 	vldr	s14, [r3]
 8001a66:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <main+0x1ec>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <main+0x1ec>)
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	edd3 6a00 	vldr	s13, [r3]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a4e      	ldr	r2, [pc, #312]	@ (8001bc4 <main+0x1ec>)
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f00b ff81 	bl	800d9a4 <sqrtf>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	4b48      	ldr	r3, [pc, #288]	@ (8001bc8 <main+0x1f0>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
				currFreq = (freqIndex * SAMPLING_RATE) / (float) FFT_SIZE_V0_1;
 8001aac:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <main+0x1e8>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aba:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8001bcc <main+0x1f4>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	4b43      	ldr	r3, [pc, #268]	@ (8001bd0 <main+0x1f8>)
 8001ac4:	edc3 7a00 	vstr	s15, [r3]

				currFreqArray[i / 2] = currFreq;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da00      	bge.n	8001ad0 <main+0xf8>
 8001ace:	3301      	adds	r3, #1
 8001ad0:	105b      	asrs	r3, r3, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd0 <main+0x1f8>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	493e      	ldr	r1, [pc, #248]	@ (8001bd4 <main+0x1fc>)
 8001ada:	0083      	lsls	r3, r0, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	601a      	str	r2, [r3, #0]
				freqSpectrumV1[i / 2] = currVal;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da00      	bge.n	8001ae8 <main+0x110>
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	105b      	asrs	r3, r3, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <main+0x1f0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4939      	ldr	r1, [pc, #228]	@ (8001bd8 <main+0x200>)
 8001af2:	0083      	lsls	r3, r0, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	601a      	str	r2, [r3, #0]
				dBSpectrumV1[i / 2] = 20 * log10(currVal);
 8001af8:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <main+0x1f0>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b02:	eeb0 0b47 	vmov.f64	d0, d7
 8001b06:	f00b ff1b 	bl	800d940 <log10>
 8001b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b0e:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da00      	bge.n	8001b1e <main+0x146>
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	105b      	asrs	r3, r3, #1
 8001b20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b24:	4a2d      	ldr	r2, [pc, #180]	@ (8001bdc <main+0x204>)
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	edc3 7a00 	vstr	s15, [r3]

				freqIndex++;
 8001b2e:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <main+0x1e8>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <main+0x1e8>)
 8001b38:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < FFT_SIZE_V0_1; i += 2) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b46:	db88      	blt.n	8001a5a <main+0x82>
			}

			identifyFreqPeaks(&freqSpectrumV1[0], FFT_SIZE_V0_1 / 2);
 8001b48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b4c:	4822      	ldr	r0, [pc, #136]	@ (8001bd8 <main+0x200>)
 8001b4e:	f7ff f88b 	bl	8000c68 <identifyFreqPeaks>

			removeHarmonics();
 8001b52:	f7ff f82f 	bl	8000bb4 <removeHarmonics>

			determineFreqBins();
 8001b56:	f7ff f949 	bl	8000dec <determineFreqBins>

			stopFFTsCheck();
 8001b5a:	f7fe ff23 	bl	80009a4 <stopFFTsCheck>

			fftFlag = 0;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <main+0x1e0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e018      	b.n	8001b98 <main+0x1c0>

		} else if (takeFFTs == 0) {
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <main+0x1e4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <main+0x1a8>

			cleanFreqBins();
 8001b6e:	f7ff fb53 	bl	8001218 <cleanFreqBins>

			printFreqBins();
 8001b72:	f7fe ff53 	bl	8000a1c <printFreqBins>

			checkTuning();
 8001b76:	f7ff fe0b 	bl	8001790 <checkTuning>

			resetFreqPeaksBins();
 8001b7a:	f7fe feb9 	bl	80008f0 <resetFreqPeaksBins>
 8001b7e:	e75a      	b.n	8001a36 <main+0x5e>
		} else if (takeFFTs == 2) {
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <main+0x1e4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f47f af56 	bne.w	8001a36 <main+0x5e>
			HAL_Delay(5000);
 8001b8a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b8e:	f000 fe29 	bl	80027e4 <HAL_Delay>

			takeFFTs = 1;
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <main+0x1e4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
	blinkAllLEDs();
 8001b98:	e74d      	b.n	8001a36 <main+0x5e>
 8001b9a:	bf00      	nop
 8001b9c:	24003bf0 	.word	0x24003bf0
 8001ba0:	47ff0000 	.word	0x47ff0000
 8001ba4:	24000230 	.word	0x24000230
 8001ba8:	24000294 	.word	0x24000294
 8001bac:	0800e0d8 	.word	0x0800e0d8
 8001bb0:	24000374 	.word	0x24000374
 8001bb4:	240002e0 	.word	0x240002e0
 8001bb8:	240003ea 	.word	0x240003ea
 8001bbc:	24000004 	.word	0x24000004
 8001bc0:	240003ec 	.word	0x240003ec
 8001bc4:	240013f0 	.word	0x240013f0
 8001bc8:	240003e0 	.word	0x240003e0
 8001bcc:	44800000 	.word	0x44800000
 8001bd0:	240003e4 	.word	0x240003e4
 8001bd4:	240033f0 	.word	0x240033f0
 8001bd8:	240023f0 	.word	0x240023f0
 8001bdc:	24002bf0 	.word	0x24002bf0

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b09c      	sub	sp, #112	@ 0x70
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bea:	224c      	movs	r2, #76	@ 0x4c
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f009 fe47 	bl	800b882 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f009 fe41 	bl	800b882 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c00:	2002      	movs	r0, #2
 8001c02:	f002 fec3 	bl	800498c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <SystemClock_Config+0xf0>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a30      	ldr	r2, [pc, #192]	@ (8001cd0 <SystemClock_Config+0xf0>)
 8001c10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd0 <SystemClock_Config+0xf0>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <SystemClock_Config+0xf4>)
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd4 <SystemClock_Config+0xf4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c2c:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <SystemClock_Config+0xf4>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c38:	bf00      	nop
 8001c3a:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <SystemClock_Config+0xf0>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c46:	d1f8      	bne.n	8001c3a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c50:	2340      	movs	r3, #64	@ 0x40
 8001c52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c54:	2302      	movs	r3, #2
 8001c56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001c60:	233c      	movs	r3, #60	@ 0x3c
 8001c62:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c64:	2302      	movs	r3, #2
 8001c66:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c70:	230c      	movs	r3, #12
 8001c72:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 febd 	bl	8004a00 <HAL_RCC_OscConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001c8c:	f000 fa0e 	bl	80020ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c90:	233f      	movs	r3, #63	@ 0x3f
 8001c92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c94:	2303      	movs	r3, #3
 8001c96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ca0:	2340      	movs	r3, #64	@ 0x40
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ca4:	2340      	movs	r3, #64	@ 0x40
 8001ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001cae:	2340      	movs	r3, #64	@ 0x40
 8001cb0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fafc 	bl	80052b4 <HAL_RCC_ClockConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001cc2:	f000 f9f3 	bl	80020ac <Error_Handler>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3770      	adds	r7, #112	@ 0x70
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	58024800 	.word	0x58024800
 8001cd4:	58000400 	.word	0x58000400

08001cd8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d9c <MX_ADC3_Init+0xc4>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d02:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d04:	2204      	movs	r2, #4
 8001d06:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d22:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d50:	4811      	ldr	r0, [pc, #68]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d52:	f000 ffc5 	bl	8002ce0 <HAL_ADC_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8001d5c:	f000 f9a6 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_ADC3_Init+0xc8>)
 8001d62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d64:	2306      	movs	r3, #6
 8001d66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <MX_ADC3_Init+0xcc>)
 8001d6e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d70:	2304      	movs	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_ADC3_Init+0xc0>)
 8001d82:	f001 fce9 	bl	8003758 <HAL_ADC_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001d8c:	f000 f98e 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	24000230 	.word	0x24000230
 8001d9c:	58026000 	.word	0x58026000
 8001da0:	10c00010 	.word	0x10c00010
 8001da4:	47ff0000 	.word	0x47ff0000

08001da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dc8:	4a20      	ldr	r2, [pc, #128]	@ (8001e4c <MX_TIM1_Init+0xa4>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24000-1;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dce:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8001dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9.765625-1;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001ddc:	2208      	movs	r2, #8
 8001dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dec:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df2:	4815      	ldr	r0, [pc, #84]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001df4:	f006 fae8 	bl	80083c8 <HAL_TIM_Base_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dfe:	f000 f955 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480e      	ldr	r0, [pc, #56]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001e10:	f006 fba2 	bl	8008558 <HAL_TIM_ConfigClockSource>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001e1a:	f000 f947 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001e30:	f006 fdc8 	bl	80089c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e3a:	f000 f937 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	24000294 	.word	0x24000294
 8001e4c:	40010000 	.word	0x40010000

08001e50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e56:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <MX_USART3_UART_Init+0x94>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e98:	4811      	ldr	r0, [pc, #68]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001e9a:	f006 fe21 	bl	8008ae0 <HAL_UART_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ea4:	f000 f902 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	480d      	ldr	r0, [pc, #52]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001eac:	f007 feb7 	bl	8009c1e <HAL_UARTEx_SetTxFifoThreshold>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001eb6:	f000 f8f9 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4808      	ldr	r0, [pc, #32]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001ebe:	f007 feec 	bl	8009c9a <HAL_UARTEx_SetRxFifoThreshold>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ec8:	f000 f8f0 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ecc:	4804      	ldr	r0, [pc, #16]	@ (8001ee0 <MX_USART3_UART_Init+0x90>)
 8001ece:	f007 fe6d 	bl	8009bac <HAL_UARTEx_DisableFifoMode>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ed8:	f000 f8e8 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	240002e0 	.word	0x240002e0
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001efe:	4b50      	ldr	r3, [pc, #320]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f04:	4a4e      	ldr	r2, [pc, #312]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	4b48      	ldr	r3, [pc, #288]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	4a47      	ldr	r2, [pc, #284]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f2c:	4b44      	ldr	r3, [pc, #272]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3a:	4b41      	ldr	r3, [pc, #260]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f40:	4a3f      	ldr	r2, [pc, #252]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f58:	4b39      	ldr	r3, [pc, #228]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5e:	4a38      	ldr	r2, [pc, #224]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f68:	4b35      	ldr	r3, [pc, #212]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f76:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	4a30      	ldr	r2, [pc, #192]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f86:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <MX_GPIO_Init+0x158>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2108      	movs	r1, #8
 8001f98:	482a      	ldr	r0, [pc, #168]	@ (8002044 <MX_GPIO_Init+0x15c>)
 8001f9a:	f002 fcc3 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001fa4:	4828      	ldr	r0, [pc, #160]	@ (8002048 <MX_GPIO_Init+0x160>)
 8001fa6:	f002 fcbd 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Motor_Control_2_Pin|Sampling_Rate_Pin|Yellow_LED_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f244 0103 	movw	r1, #16387	@ 0x4003
 8001fb0:	4826      	ldr	r0, [pc, #152]	@ (800204c <MX_GPIO_Init+0x164>)
 8001fb2:	f002 fcb7 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Control_1_GPIO_Port, Motor_Control_1_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fbc:	4824      	ldr	r0, [pc, #144]	@ (8002050 <MX_GPIO_Init+0x168>)
 8001fbe:	f002 fcb1 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	481a      	ldr	r0, [pc, #104]	@ (8002044 <MX_GPIO_Init+0x15c>)
 8001fda:	f002 faf3 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 8001fde:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4814      	ldr	r0, [pc, #80]	@ (8002048 <MX_GPIO_Init+0x160>)
 8001ff8:	f002 fae4 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_Control_2_Pin Sampling_Rate_Pin Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Motor_Control_2_Pin|Sampling_Rate_Pin|Yellow_LED_Pin;
 8001ffc:	f244 0303 	movw	r3, #16387	@ 0x4003
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	480d      	ldr	r0, [pc, #52]	@ (800204c <MX_GPIO_Init+0x164>)
 8002016:	f002 fad5 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Control_1_Pin */
  GPIO_InitStruct.Pin = Motor_Control_1_Pin;
 800201a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	2301      	movs	r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Control_1_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4807      	ldr	r0, [pc, #28]	@ (8002050 <MX_GPIO_Init+0x168>)
 8002034:	f002 fac6 	bl	80045c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	@ 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	58024400 	.word	0x58024400
 8002044:	58021400 	.word	0x58021400
 8002048:	58020400 	.word	0x58020400
 800204c:	58021000 	.word	0x58021000
 8002050:	58021800 	.word	0x58021800

08002054 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002066:	f002 fa35 	bl	80044d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800206a:	2301      	movs	r3, #1
 800206c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800206e:	2300      	movs	r3, #0
 8002070:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002076:	231f      	movs	r3, #31
 8002078:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800207a:	2387      	movs	r3, #135	@ 0x87
 800207c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800207e:	2300      	movs	r3, #0
 8002080:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002082:	2300      	movs	r3, #0
 8002084:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002086:	2301      	movs	r3, #1
 8002088:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800208a:	2301      	movs	r3, #1
 800208c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002096:	463b      	mov	r3, r7
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fa53 	bl	8004544 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800209e:	2004      	movs	r0, #4
 80020a0:	f002 fa30 	bl	8004504 <HAL_MPU_Enable>

}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <Error_Handler+0x8>

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_MspInit+0x30>)
 80020c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020c4:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_MspInit+0x30>)
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_MspInit+0x30>)
 80020d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	58024400 	.word	0x58024400

080020ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0ba      	sub	sp, #232	@ 0xe8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	22c0      	movs	r2, #192	@ 0xc0
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f009 fbb8 	bl	800b882 <memset>
  if(hadc->Instance==ADC3)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2f      	ldr	r2, [pc, #188]	@ (80021d4 <HAL_ADC_MspInit+0xe8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d157      	bne.n	80021cc <HAL_ADC_MspInit+0xe0>

    /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800211c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002128:	2304      	movs	r3, #4
 800212a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800212c:	230a      	movs	r3, #10
 800212e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002134:	2302      	movs	r3, #2
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800213c:	23c0      	movs	r3, #192	@ 0xc0
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002140:	2320      	movs	r3, #32
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4618      	mov	r0, r3
 8002154:	f003 fc3a 	bl	80059cc <HAL_RCCEx_PeriphCLKConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800215e:	f7ff ffa5 	bl	80020ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_ADC_MspInit+0xec>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	4a1b      	ldr	r2, [pc, #108]	@ (80021d8 <HAL_ADC_MspInit+0xec>)
 800216a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_ADC_MspInit+0xec>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002180:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <HAL_ADC_MspInit+0xec>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002186:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <HAL_ADC_MspInit+0xec>)
 8002188:	f043 0320 	orr.w	r3, r3, #32
 800218c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_ADC_MspInit+0xec>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_INP4
    PF6     ------> ADC3_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800219e:	2360      	movs	r3, #96	@ 0x60
 80021a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a4:	2303      	movs	r3, #3
 80021a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4809      	ldr	r0, [pc, #36]	@ (80021dc <HAL_ADC_MspInit+0xf0>)
 80021b8:	f002 fa04 	bl	80045c4 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	207f      	movs	r0, #127	@ 0x7f
 80021c2:	f002 f952 	bl	800446a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80021c6:	207f      	movs	r0, #127	@ 0x7f
 80021c8:	f002 f969 	bl	800449e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80021cc:	bf00      	nop
 80021ce:	37e8      	adds	r7, #232	@ 0xe8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	58026000 	.word	0x58026000
 80021d8:	58024400 	.word	0x58024400
 80021dc:	58021400 	.word	0x58021400

080021e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0b      	ldr	r2, [pc, #44]	@ (800221c <HAL_TIM_Base_MspInit+0x3c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_TIM_Base_MspInit+0x40>)
 80021f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021f8:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <HAL_TIM_Base_MspInit+0x40>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <HAL_TIM_Base_MspInit+0x40>)
 8002204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40010000 	.word	0x40010000
 8002220:	58024400 	.word	0x58024400

08002224 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0ba      	sub	sp, #232	@ 0xe8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	22c0      	movs	r2, #192	@ 0xc0
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f009 fb1c 	bl	800b882 <memset>
  if(huart->Instance==USART3)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_UART_MspInit+0xc8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d146      	bne.n	80022e2 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002254:	f04f 0202 	mov.w	r2, #2
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fbae 	bl	80059cc <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002276:	f7ff ff19 	bl	80020ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 800227c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002286:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 800228c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229e:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_UART_MspInit+0xcc>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022d0:	2307      	movs	r3, #7
 80022d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_UART_MspInit+0xd0>)
 80022de:	f002 f971 	bl	80045c4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80022e2:	bf00      	nop
 80022e4:	37e8      	adds	r7, #232	@ 0xe8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40004800 	.word	0x40004800
 80022f0:	58024400 	.word	0x58024400
 80022f4:	58020c00 	.word	0x58020c00

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <NMI_Handler+0x4>

08002300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <MemManage_Handler+0x4>

08002310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <UsageFault_Handler+0x4>

08002320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f000 fa29 	bl	80027a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <ADC3_IRQHandler+0x10>)
 800235e:	f000 ffad 	bl	80032bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	24000230 	.word	0x24000230

0800236c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_kill>:

int _kill(int pid, int sig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002386:	f009 facf 	bl	800b928 <__errno>
 800238a:	4603      	mov	r3, r0
 800238c:	2216      	movs	r2, #22
 800238e:	601a      	str	r2, [r3, #0]
  return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_exit>:

void _exit (int status)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe7 	bl	800237c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ae:	bf00      	nop
 80023b0:	e7fd      	b.n	80023ae <_exit+0x12>

080023b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e00a      	b.n	80023da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c4:	f3af 8000 	nop.w
 80023c8:	4601      	mov	r1, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	b2ca      	uxtb	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbf0      	blt.n	80023c4 <_read+0x12>
  }

  return len;
 80023e2:	687b      	ldr	r3, [r7, #4]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e009      	b.n	8002412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	60ba      	str	r2, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	dbf1      	blt.n	80023fe <_write+0x12>
  }
  return len;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_close>:

int _close(int file)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800244c:	605a      	str	r2, [r3, #4]
  return 0;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_isatty>:

int _isatty(int file)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f009 fa34 	bl	800b928 <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	24080000 	.word	0x24080000
 80024ec:	00000400 	.word	0x00000400
 80024f0:	24003d1c 	.word	0x24003d1c
 80024f4:	24003e70 	.word	0x24003e70

080024f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024fc:	4b43      	ldr	r3, [pc, #268]	@ (800260c <SystemInit+0x114>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	4a42      	ldr	r2, [pc, #264]	@ (800260c <SystemInit+0x114>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800250c:	4b40      	ldr	r3, [pc, #256]	@ (8002610 <SystemInit+0x118>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	2b06      	cmp	r3, #6
 8002516:	d807      	bhi.n	8002528 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002518:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <SystemInit+0x118>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 030f 	bic.w	r3, r3, #15
 8002520:	4a3b      	ldr	r2, [pc, #236]	@ (8002610 <SystemInit+0x118>)
 8002522:	f043 0307 	orr.w	r3, r3, #7
 8002526:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002528:	4b3a      	ldr	r3, [pc, #232]	@ (8002614 <SystemInit+0x11c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a39      	ldr	r2, [pc, #228]	@ (8002614 <SystemInit+0x11c>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002534:	4b37      	ldr	r3, [pc, #220]	@ (8002614 <SystemInit+0x11c>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800253a:	4b36      	ldr	r3, [pc, #216]	@ (8002614 <SystemInit+0x11c>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4935      	ldr	r1, [pc, #212]	@ (8002614 <SystemInit+0x11c>)
 8002540:	4b35      	ldr	r3, [pc, #212]	@ (8002618 <SystemInit+0x120>)
 8002542:	4013      	ands	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002546:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <SystemInit+0x118>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002552:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <SystemInit+0x118>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 030f 	bic.w	r3, r3, #15
 800255a:	4a2d      	ldr	r2, [pc, #180]	@ (8002610 <SystemInit+0x118>)
 800255c:	f043 0307 	orr.w	r3, r3, #7
 8002560:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002562:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <SystemInit+0x11c>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002568:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <SystemInit+0x11c>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800256e:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <SystemInit+0x11c>)
 8002570:	2200      	movs	r2, #0
 8002572:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <SystemInit+0x11c>)
 8002576:	4a29      	ldr	r2, [pc, #164]	@ (800261c <SystemInit+0x124>)
 8002578:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800257a:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <SystemInit+0x11c>)
 800257c:	4a28      	ldr	r2, [pc, #160]	@ (8002620 <SystemInit+0x128>)
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002580:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <SystemInit+0x11c>)
 8002582:	4a28      	ldr	r2, [pc, #160]	@ (8002624 <SystemInit+0x12c>)
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <SystemInit+0x11c>)
 8002588:	2200      	movs	r2, #0
 800258a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800258c:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <SystemInit+0x11c>)
 800258e:	4a25      	ldr	r2, [pc, #148]	@ (8002624 <SystemInit+0x12c>)
 8002590:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <SystemInit+0x11c>)
 8002594:	2200      	movs	r2, #0
 8002596:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002598:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <SystemInit+0x11c>)
 800259a:	4a22      	ldr	r2, [pc, #136]	@ (8002624 <SystemInit+0x12c>)
 800259c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800259e:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <SystemInit+0x11c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <SystemInit+0x11c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002614 <SystemInit+0x11c>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025b0:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <SystemInit+0x11c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80025b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002628 <SystemInit+0x130>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <SystemInit+0x134>)
 80025bc:	4013      	ands	r3, r2
 80025be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025c2:	d202      	bcs.n	80025ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <SystemInit+0x138>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80025ca:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <SystemInit+0x11c>)
 80025cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d113      	bne.n	8002600 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <SystemInit+0x11c>)
 80025da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025de:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <SystemInit+0x11c>)
 80025e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <SystemInit+0x13c>)
 80025ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <SystemInit+0x11c>)
 80025f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025f6:	4a07      	ldr	r2, [pc, #28]	@ (8002614 <SystemInit+0x11c>)
 80025f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00
 8002610:	52002000 	.word	0x52002000
 8002614:	58024400 	.word	0x58024400
 8002618:	eaf6ed7f 	.word	0xeaf6ed7f
 800261c:	02020200 	.word	0x02020200
 8002620:	01ff0000 	.word	0x01ff0000
 8002624:	01010280 	.word	0x01010280
 8002628:	5c001000 	.word	0x5c001000
 800262c:	ffff0000 	.word	0xffff0000
 8002630:	51008108 	.word	0x51008108
 8002634:	52004000 	.word	0x52004000

08002638 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <ExitRun0Mode+0x2c>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <ExitRun0Mode+0x2c>)
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002648:	bf00      	nop
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <ExitRun0Mode+0x2c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f9      	beq.n	800264a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	58024800 	.word	0x58024800

08002668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002668:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80026a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800266c:	f7ff ffe4 	bl	8002638 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002670:	f7ff ff42 	bl	80024f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002674:	480c      	ldr	r0, [pc, #48]	@ (80026a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002676:	490d      	ldr	r1, [pc, #52]	@ (80026ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800267c:	e002      	b.n	8002684 <LoopCopyDataInit>

0800267e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002682:	3304      	adds	r3, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002688:	d3f9      	bcc.n	800267e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800268c:	4c0a      	ldr	r4, [pc, #40]	@ (80026b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002690:	e001      	b.n	8002696 <LoopFillZerobss>

08002692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002694:	3204      	adds	r2, #4

08002696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002698:	d3fb      	bcc.n	8002692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269a:	f009 f94b 	bl	800b934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269e:	f7ff f99b 	bl	80019d8 <main>
  bx  lr
 80026a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026ac:	24000214 	.word	0x24000214
  ldr r2, =_sidata
 80026b0:	080221c0 	.word	0x080221c0
  ldr r2, =_sbss
 80026b4:	24000214 	.word	0x24000214
  ldr r4, =_ebss
 80026b8:	24003e70 	.word	0x24003e70

080026bc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC_IRQHandler>
	...

080026c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c6:	2003      	movs	r0, #3
 80026c8:	f001 fec4 	bl	8004454 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026cc:	f002 ffa8 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_Init+0x68>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	4913      	ldr	r1, [pc, #76]	@ (800272c <HAL_Init+0x6c>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
 80026e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_Init+0x68>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	4a0e      	ldr	r2, [pc, #56]	@ (800272c <HAL_Init+0x6c>)
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	4a0b      	ldr	r2, [pc, #44]	@ (8002730 <HAL_Init+0x70>)
 8002702:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_Init+0x74>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270a:	200f      	movs	r0, #15
 800270c:	f000 f814 	bl	8002738 <HAL_InitTick>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e002      	b.n	8002720 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800271a:	f7ff fccd 	bl	80020b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	58024400 	.word	0x58024400
 800272c:	0800e114 	.word	0x0800e114
 8002730:	24000040 	.word	0x24000040
 8002734:	2400003c 	.word	0x2400003c

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002740:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <HAL_InitTick+0x60>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e021      	b.n	8002790 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800274c:	4b13      	ldr	r3, [pc, #76]	@ (800279c <HAL_InitTick+0x64>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <HAL_InitTick+0x60>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275a:	fbb3 f3f1 	udiv	r3, r3, r1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f001 fea9 	bl	80044ba <HAL_SYSTICK_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00e      	b.n	8002790 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d80a      	bhi.n	800278e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f001 fe73 	bl	800446a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002784:	4a06      	ldr	r2, [pc, #24]	@ (80027a0 <HAL_InitTick+0x68>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	24000048 	.word	0x24000048
 800279c:	2400003c 	.word	0x2400003c
 80027a0:	24000044 	.word	0x24000044

080027a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_IncTick+0x20>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_IncTick+0x24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <HAL_IncTick+0x24>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	24000048 	.word	0x24000048
 80027c8:	24003d20 	.word	0x24003d20

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <HAL_GetTick+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	24003d20 	.word	0x24003d20

080027e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff ffee 	bl	80027cc <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d005      	beq.n	800280a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_Delay+0x44>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280a:	bf00      	nop
 800280c:	f7ff ffde 	bl	80027cc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	429a      	cmp	r2, r3
 800281a:	d8f7      	bhi.n	800280c <HAL_Delay+0x28>
  {
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	24000048 	.word	0x24000048

0800282c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_GetREVID+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0c1b      	lsrs	r3, r3, #16
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	5c001000 	.word	0x5c001000

08002844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	609a      	str	r2, [r3, #8]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <LL_ADC_SetChannelPreselection+0x24>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2201      	movs	r2, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	e015      	b.n	80028fc <LL_ADC_SetChannelPreselection+0x50>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e003      	b.n	80028f2 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2201      	movs	r2, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	69d2      	ldr	r2, [r2, #28]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002912:	b480      	push	{r7}
 8002914:	b087      	sub	sp, #28
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3360      	adds	r3, #96	@ 0x60
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	430b      	orrs	r3, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	611a      	str	r2, [r3, #16]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3360      	adds	r3, #96	@ 0x60
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	601a      	str	r2, [r3, #0]
  }
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3330      	adds	r3, #48	@ 0x30
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	4413      	add	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	211f      	movs	r1, #31
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	f003 011f 	and.w	r1, r3, #31
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	431a      	orrs	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b087      	sub	sp, #28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3314      	adds	r3, #20
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0e5b      	lsrs	r3, r3, #25
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	4413      	add	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	0d1b      	lsrs	r3, r3, #20
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2107      	movs	r1, #7
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0d1b      	lsrs	r3, r3, #20
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0318 	and.w	r3, r3, #24
 8002ad6:	4908      	ldr	r1, [pc, #32]	@ (8002af8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ad8:	40d9      	lsrs	r1, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	400b      	ands	r3, r1
 8002ade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	000fffff 	.word	0x000fffff

08002afc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 031f 	and.w	r3, r3, #31
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6093      	str	r3, [r2, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	5fffffc0 	.word	0x5fffffc0

08002b58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	6fffffc0 	.word	0x6fffffc0

08002ba8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <LL_ADC_Enable+0x24>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	7fffffc0 	.word	0x7fffffc0

08002bf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <LL_ADC_Disable+0x24>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	f043 0202 	orr.w	r2, r3, #2
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	7fffffc0 	.word	0x7fffffc0

08002c20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_IsEnabled+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_IsEnabled+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_IsDisableOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_IsDisableOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <LL_ADC_REG_StartConversion+0x24>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	f043 0204 	orr.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	7fffffc0 	.word	0x7fffffc0

08002c94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d101      	bne.n	8002cac <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d101      	bne.n	8002cd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e18f      	b.n	800301a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff f9ef 	bl	80020ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff19 	bl	8002b58 <LL_ADC_IsDeepPowerDownEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff feff 	bl	8002b34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff34 	bl	8002ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d114      	bne.n	8002d70 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff18 	bl	8002b80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d50:	4b87      	ldr	r3, [pc, #540]	@ (8002f70 <HAL_ADC_Init+0x290>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	4a87      	ldr	r2, [pc, #540]	@ (8002f74 <HAL_ADC_Init+0x294>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d62:	e002      	b.n	8002d6a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f9      	bne.n	8002d64 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff17 	bl	8002ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	f043 0210 	orr.w	r2, r3, #16
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff77 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 8002da6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 8129 	bne.w	8003008 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 8125 	bne.w	8003008 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dc6:	f043 0202 	orr.w	r2, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff24 	bl	8002c20 <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d136      	bne.n	8002e4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a65      	ldr	r2, [pc, #404]	@ (8002f78 <HAL_ADC_Init+0x298>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_ADC_Init+0x112>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a63      	ldr	r2, [pc, #396]	@ (8002f7c <HAL_ADC_Init+0x29c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10e      	bne.n	8002e10 <HAL_ADC_Init+0x130>
 8002df2:	4861      	ldr	r0, [pc, #388]	@ (8002f78 <HAL_ADC_Init+0x298>)
 8002df4:	f7ff ff14 	bl	8002c20 <LL_ADC_IsEnabled>
 8002df8:	4604      	mov	r4, r0
 8002dfa:	4860      	ldr	r0, [pc, #384]	@ (8002f7c <HAL_ADC_Init+0x29c>)
 8002dfc:	f7ff ff10 	bl	8002c20 <LL_ADC_IsEnabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4323      	orrs	r3, r4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e008      	b.n	8002e22 <HAL_ADC_Init+0x142>
 8002e10:	485b      	ldr	r0, [pc, #364]	@ (8002f80 <HAL_ADC_Init+0x2a0>)
 8002e12:	f7ff ff05 	bl	8002c20 <LL_ADC_IsEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a53      	ldr	r2, [pc, #332]	@ (8002f78 <HAL_ADC_Init+0x298>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_Init+0x15a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a51      	ldr	r2, [pc, #324]	@ (8002f7c <HAL_ADC_Init+0x29c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Init+0x15e>
 8002e3a:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_ADC_Init+0x2a4>)
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_Init+0x160>
 8002e3e:	4a52      	ldr	r2, [pc, #328]	@ (8002f88 <HAL_ADC_Init+0x2a8>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f7ff fcfc 	bl	8002844 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e4c:	f7ff fcee 	bl	800282c <HAL_GetREVID>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d914      	bls.n	8002e84 <HAL_ADC_Init+0x1a4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d110      	bne.n	8002e84 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7d5b      	ldrb	r3, [r3, #21]
 8002e66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e6c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e72:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7f1b      	ldrb	r3, [r3, #28]
 8002e78:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e7a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e7c:	f043 030c 	orr.w	r3, r3, #12
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e00d      	b.n	8002ea0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7d5b      	ldrb	r3, [r3, #21]
 8002e88:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e8e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e94:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7f1b      	ldrb	r3, [r3, #28]
 8002e9a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7f1b      	ldrb	r3, [r3, #28]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	045b      	lsls	r3, r3, #17
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f8c <HAL_ADC_Init+0x2ac>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fed2 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 8002ef0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fedf 	bl	8002cba <LL_ADC_INJ_IsConversionOngoing>
 8002efc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d15f      	bne.n	8002fc4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d15c      	bne.n	8002fc4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7d1b      	ldrb	r3, [r3, #20]
 8002f0e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f90 <HAL_ADC_Init+0x2b0>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d130      	bne.n	8002f98 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <HAL_ADC_Init+0x2b4>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	0411      	lsls	r1, r2, #16
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	611a      	str	r2, [r3, #16]
 8002f6c:	e01c      	b.n	8002fa8 <HAL_ADC_Init+0x2c8>
 8002f6e:	bf00      	nop
 8002f70:	2400003c 	.word	0x2400003c
 8002f74:	053e2d63 	.word	0x053e2d63
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40022100 	.word	0x40022100
 8002f80:	58026000 	.word	0x58026000
 8002f84:	40022300 	.word	0x40022300
 8002f88:	58026300 	.word	0x58026300
 8002f8c:	fff0c003 	.word	0xfff0c003
 8002f90:	ffffbffc 	.word	0xffffbffc
 8002f94:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 ffa4 	bl	8003f0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10c      	bne.n	8002fe6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	f023 010f 	bic.w	r1, r3, #15
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fe4:	e007      	b.n	8002ff6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 020f 	bic.w	r2, r2, #15
 8002ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54
 8003006:	e007      	b.n	8003018 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	f043 0210 	orr.w	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003018:	7ffb      	ldrb	r3, [r7, #31]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3724      	adds	r7, #36	@ 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}
 8003022:	bf00      	nop

08003024 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a92      	ldr	r2, [pc, #584]	@ (800327c <HAL_ADC_Start_IT+0x258>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_ADC_Start_IT+0x1c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a91      	ldr	r2, [pc, #580]	@ (8003280 <HAL_ADC_Start_IT+0x25c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_ADC_Start_IT+0x20>
 8003040:	4b90      	ldr	r3, [pc, #576]	@ (8003284 <HAL_ADC_Start_IT+0x260>)
 8003042:	e000      	b.n	8003046 <HAL_ADC_Start_IT+0x22>
 8003044:	4b90      	ldr	r3, [pc, #576]	@ (8003288 <HAL_ADC_Start_IT+0x264>)
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fd58 	bl	8002afc <LL_ADC_GetMultimode>
 800304c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fe1e 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 8118 	bne.w	8003290 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_ADC_Start_IT+0x4a>
 800306a:	2302      	movs	r3, #2
 800306c:	e113      	b.n	8003296 <HAL_ADC_Start_IT+0x272>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fe5e 	bl	8003d38 <ADC_Enable>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 80f5 	bne.w	8003272 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800308c:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <HAL_ADC_Start_IT+0x268>)
 800308e:	4013      	ands	r3, r2
 8003090:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a78      	ldr	r2, [pc, #480]	@ (8003280 <HAL_ADC_Start_IT+0x25c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d002      	beq.n	80030a8 <HAL_ADC_Start_IT+0x84>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e000      	b.n	80030aa <HAL_ADC_Start_IT+0x86>
 80030a8:	4b74      	ldr	r3, [pc, #464]	@ (800327c <HAL_ADC_Start_IT+0x258>)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d002      	beq.n	80030b8 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	f023 0206 	bic.w	r2, r3, #6
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	659a      	str	r2, [r3, #88]	@ 0x58
 80030dc:	e002      	b.n	80030e4 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	221c      	movs	r2, #28
 80030ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 021c 	bic.w	r2, r2, #28
 8003102:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d108      	bne.n	800311e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0208 	orr.w	r2, r2, #8
 800311a:	605a      	str	r2, [r3, #4]
          break;
 800311c:	e008      	b.n	8003130 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0204 	orr.w	r2, r2, #4
 800312c:	605a      	str	r2, [r3, #4]
          break;
 800312e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0210 	orr.w	r2, r2, #16
 8003146:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a4c      	ldr	r2, [pc, #304]	@ (8003280 <HAL_ADC_Start_IT+0x25c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d002      	beq.n	8003158 <HAL_ADC_Start_IT+0x134>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e000      	b.n	800315a <HAL_ADC_Start_IT+0x136>
 8003158:	4b48      	ldr	r3, [pc, #288]	@ (800327c <HAL_ADC_Start_IT+0x258>)
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	4293      	cmp	r3, r2
 8003160:	d008      	beq.n	8003174 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d002      	beq.n	8003174 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b09      	cmp	r3, #9
 8003172:	d13a      	bne.n	80031ea <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02d      	beq.n	80031de <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800318a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b08      	cmp	r3, #8
 8003198:	d110      	bne.n	80031bc <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0220 	bic.w	r2, r2, #32
 80031a8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b8:	605a      	str	r2, [r3, #4]
              break;
 80031ba:	e010      	b.n	80031de <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ca:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	605a      	str	r2, [r3, #4]
              break;
 80031dc:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fd42 	bl	8002c6c <LL_ADC_REG_StartConversion>
 80031e8:	e054      	b.n	8003294 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a21      	ldr	r2, [pc, #132]	@ (8003280 <HAL_ADC_Start_IT+0x25c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d002      	beq.n	8003206 <HAL_ADC_Start_IT+0x1e2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	e000      	b.n	8003208 <HAL_ADC_Start_IT+0x1e4>
 8003206:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <HAL_ADC_Start_IT+0x258>)
 8003208:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d03e      	beq.n	8003294 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800321e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b08      	cmp	r3, #8
 800322c:	d110      	bne.n	8003250 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0220 	bic.w	r2, r2, #32
 800323c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800324c:	605a      	str	r2, [r3, #4]
              break;
 800324e:	e021      	b.n	8003294 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0220 	orr.w	r2, r2, #32
 800326e:	605a      	str	r2, [r3, #4]
              break;
 8003270:	e010      	b.n	8003294 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800327a:	e00b      	b.n	8003294 <HAL_ADC_Start_IT+0x270>
 800327c:	40022000 	.word	0x40022000
 8003280:	40022100 	.word	0x40022100
 8003284:	40022300 	.word	0x40022300
 8003288:	58026300 	.word	0x58026300
 800328c:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003294:	7dfb      	ldrb	r3, [r7, #23]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop

080032a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	@ 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a87      	ldr	r2, [pc, #540]	@ (80034fc <HAL_ADC_IRQHandler+0x240>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_ADC_IRQHandler+0x30>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a86      	ldr	r2, [pc, #536]	@ (8003500 <HAL_ADC_IRQHandler+0x244>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_IRQHandler+0x34>
 80032ec:	4b85      	ldr	r3, [pc, #532]	@ (8003504 <HAL_ADC_IRQHandler+0x248>)
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_IRQHandler+0x36>
 80032f0:	4b85      	ldr	r3, [pc, #532]	@ (8003508 <HAL_ADC_IRQHandler+0x24c>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fc02 	bl	8002afc <LL_ADC_GetMultimode>
 80032f8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_ADC_IRQHandler+0x78>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 ffba 	bl	80042a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2202      	movs	r2, #2
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_ADC_IRQHandler+0x8c>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8083 	beq.w	800345a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07d      	beq.n	800345a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d105      	bne.n	8003376 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fb1d 	bl	80029ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d062      	beq.n	800344c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5d      	ldr	r2, [pc, #372]	@ (8003500 <HAL_ADC_IRQHandler+0x244>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d002      	beq.n	8003396 <HAL_ADC_IRQHandler+0xda>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	e000      	b.n	8003398 <HAL_ADC_IRQHandler+0xdc>
 8003396:	4b59      	ldr	r3, [pc, #356]	@ (80034fc <HAL_ADC_IRQHandler+0x240>)
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4293      	cmp	r3, r2
 800339e:	d008      	beq.n	80033b2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d002      	beq.n	80033b2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	d104      	bne.n	80033bc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	623b      	str	r3, [r7, #32]
 80033ba:	e00c      	b.n	80033d6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003500 <HAL_ADC_IRQHandler+0x244>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d002      	beq.n	80033cc <HAL_ADC_IRQHandler+0x110>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	e000      	b.n	80033ce <HAL_ADC_IRQHandler+0x112>
 80033cc:	4b4b      	ldr	r3, [pc, #300]	@ (80034fc <HAL_ADC_IRQHandler+0x240>)
 80033ce:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d135      	bne.n	800344c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d12e      	bne.n	800344c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fc4e 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d11a      	bne.n	8003434 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 020c 	bic.w	r2, r2, #12
 800340c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003412:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d112      	bne.n	800344c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	655a      	str	r2, [r3, #84]	@ 0x54
 8003432:	e00b      	b.n	800344c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fd f995 	bl	800077c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	220c      	movs	r2, #12
 8003458:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_ADC_IRQHandler+0x1b2>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a0 	beq.w	80035ba <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 809a 	beq.w	80035ba <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003496:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fac8 	bl	8002a38 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034a8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fa83 	bl	80029ba <LL_ADC_REG_IsTriggerSourceSWStart>
 80034b4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a11      	ldr	r2, [pc, #68]	@ (8003500 <HAL_ADC_IRQHandler+0x244>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d002      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x20a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	e000      	b.n	80034c8 <HAL_ADC_IRQHandler+0x20c>
 80034c6:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_ADC_IRQHandler+0x240>)
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d008      	beq.n	80034e2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b06      	cmp	r3, #6
 80034da:	d002      	beq.n	80034e2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b07      	cmp	r3, #7
 80034e0:	d104      	bne.n	80034ec <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	e014      	b.n	8003516 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a03      	ldr	r2, [pc, #12]	@ (8003500 <HAL_ADC_IRQHandler+0x244>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00a      	beq.n	800350c <HAL_ADC_IRQHandler+0x250>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	e008      	b.n	800350e <HAL_ADC_IRQHandler+0x252>
 80034fc:	40022000 	.word	0x40022000
 8003500:	40022100 	.word	0x40022100
 8003504:	40022300 	.word	0x40022300
 8003508:	58026300 	.word	0x58026300
 800350c:	4b84      	ldr	r3, [pc, #528]	@ (8003720 <HAL_ADC_IRQHandler+0x464>)
 800350e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d047      	beq.n	80035ac <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_ADC_IRQHandler+0x27a>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03f      	beq.n	80035ac <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003532:	2b00      	cmp	r3, #0
 8003534:	d13a      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d133      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12e      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fbb1 	bl	8002cba <LL_ADC_INJ_IsConversionOngoing>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11a      	bne.n	8003594 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800356c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d112      	bne.n	80035ac <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	@ 0x54
 8003592:	e00b      	b.n	80035ac <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003598:	f043 0210 	orr.w	r2, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fe4f 	bl	8004250 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2260      	movs	r2, #96	@ 0x60
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d011      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x32c>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8a8 	bl	8003730 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2280      	movs	r2, #128	@ 0x80
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <HAL_ADC_IRQHandler+0x35c>
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003600:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fe35 	bl	8004278 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <HAL_ADC_IRQHandler+0x38c>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003630:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fe27 	bl	800428c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003646:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d043      	beq.n	80036da <HAL_ADC_IRQHandler+0x41e>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03e      	beq.n	80036da <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003664:	2301      	movs	r3, #1
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
 8003668:	e021      	b.n	80036ae <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2a      	ldr	r2, [pc, #168]	@ (8003720 <HAL_ADC_IRQHandler+0x464>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_ADC_IRQHandler+0x3c8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a29      	ldr	r2, [pc, #164]	@ (8003724 <HAL_ADC_IRQHandler+0x468>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_ADC_IRQHandler+0x3cc>
 8003684:	4b28      	ldr	r3, [pc, #160]	@ (8003728 <HAL_ADC_IRQHandler+0x46c>)
 8003686:	e000      	b.n	800368a <HAL_ADC_IRQHandler+0x3ce>
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <HAL_ADC_IRQHandler+0x470>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fa44 	bl	8002b18 <LL_ADC_GetMultiDMATransfer>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003696:	2301      	movs	r3, #1
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
 800369a:	e008      	b.n	80036ae <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80036aa:	2301      	movs	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10e      	bne.n	80036d2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	f043 0202 	orr.w	r2, r3, #2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f839 	bl	8003744 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2210      	movs	r2, #16
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d018      	beq.n	8003716 <HAL_ADC_IRQHandler+0x45a>
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800370e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fda7 	bl	8004264 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	@ 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40022000 	.word	0x40022000
 8003724:	40022100 	.word	0x40022100
 8003728:	40022300 	.word	0x40022300
 800372c:	58026300 	.word	0x58026300

08003730 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b08d      	sub	sp, #52	@ 0x34
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a65      	ldr	r2, [pc, #404]	@ (8003908 <HAL_ADC_ConfigChannel+0x1b0>)
 8003772:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x2a>
 800377e:	2302      	movs	r3, #2
 8003780:	e2c7      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x5ba>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fa80 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 82ac 	bne.w	8003cf4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db2c      	blt.n	80037fe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d108      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x6a>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e9b      	lsrs	r3, r3, #26
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2201      	movs	r2, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	e016      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x98>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	613b      	str	r3, [r7, #16]
  return result;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80037da:	2320      	movs	r3, #32
 80037dc:	e003      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2201      	movs	r2, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	69d1      	ldr	r1, [r2, #28]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	430b      	orrs	r3, r1
 80037fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f7ff f8e8 	bl	80029e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fa3d 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 800381a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fa4a 	bl	8002cba <LL_ADC_INJ_IsConversionOngoing>
 8003826:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 80b8 	bne.w	80039a0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 80b4 	bne.w	80039a0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	461a      	mov	r2, r3
 8003846:	f7ff f90a 	bl	8002a5e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800384a:	4b30      	ldr	r3, [pc, #192]	@ (800390c <HAL_ADC_ConfigChannel+0x1b4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003856:	d10b      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x118>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	e01d      	b.n	80038ac <HAL_ADC_ConfigChannel+0x154>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10b      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x13e>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	e00a      	b.n	80038ac <HAL_ADC_ConfigChannel+0x154>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d02c      	beq.n	8003910 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6919      	ldr	r1, [r3, #16]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f7ff f825 	bl	8002912 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6919      	ldr	r1, [r3, #16]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	7e5b      	ldrb	r3, [r3, #25]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d102      	bne.n	80038de <HAL_ADC_ConfigChannel+0x186>
 80038d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80038dc:	e000      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x188>
 80038de:	2300      	movs	r3, #0
 80038e0:	461a      	mov	r2, r3
 80038e2:	f7ff f84f 	bl	8002984 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6919      	ldr	r1, [r3, #16]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	7e1b      	ldrb	r3, [r3, #24]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x1a4>
 80038f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038fa:	e000      	b.n	80038fe <HAL_ADC_ConfigChannel+0x1a6>
 80038fc:	2300      	movs	r3, #0
 80038fe:	461a      	mov	r2, r3
 8003900:	f7ff f827 	bl	8002952 <LL_ADC_SetDataRightShift>
 8003904:	e04c      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x248>
 8003906:	bf00      	nop
 8003908:	47ff0000 	.word	0x47ff0000
 800390c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003916:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	069b      	lsls	r3, r3, #26
 8003920:	429a      	cmp	r2, r3
 8003922:	d107      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003932:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800393a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	069b      	lsls	r3, r3, #26
 8003944:	429a      	cmp	r2, r3
 8003946:	d107      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003956:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800395e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	069b      	lsls	r3, r3, #26
 8003968:	429a      	cmp	r2, r3
 800396a:	d107      	bne.n	800397c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800397a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003982:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	069b      	lsls	r3, r3, #26
 800398c:	429a      	cmp	r2, r3
 800398e:	d107      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800399e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f93b 	bl	8002c20 <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 81aa 	bne.w	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7ff f878 	bl	8002ab4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a87      	ldr	r2, [pc, #540]	@ (8003be8 <HAL_ADC_ConfigChannel+0x490>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	f040 809a 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4984      	ldr	r1, [pc, #528]	@ (8003bec <HAL_ADC_ConfigChannel+0x494>)
 80039da:	428b      	cmp	r3, r1
 80039dc:	d147      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x316>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4983      	ldr	r1, [pc, #524]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x498>)
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d040      	beq.n	8003a6a <HAL_ADC_ConfigChannel+0x312>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4981      	ldr	r1, [pc, #516]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x49c>)
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d039      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x30e>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4980      	ldr	r1, [pc, #512]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4a0>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d032      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x30a>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	497e      	ldr	r1, [pc, #504]	@ (8003bfc <HAL_ADC_ConfigChannel+0x4a4>)
 8003a02:	428b      	cmp	r3, r1
 8003a04:	d02b      	beq.n	8003a5e <HAL_ADC_ConfigChannel+0x306>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	497d      	ldr	r1, [pc, #500]	@ (8003c00 <HAL_ADC_ConfigChannel+0x4a8>)
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	d024      	beq.n	8003a5a <HAL_ADC_ConfigChannel+0x302>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	497b      	ldr	r1, [pc, #492]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4ac>)
 8003a16:	428b      	cmp	r3, r1
 8003a18:	d01d      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x2fe>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	497a      	ldr	r1, [pc, #488]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4b0>)
 8003a20:	428b      	cmp	r3, r1
 8003a22:	d016      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x2fa>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4978      	ldr	r1, [pc, #480]	@ (8003c0c <HAL_ADC_ConfigChannel+0x4b4>)
 8003a2a:	428b      	cmp	r3, r1
 8003a2c:	d00f      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x2f6>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4977      	ldr	r1, [pc, #476]	@ (8003c10 <HAL_ADC_ConfigChannel+0x4b8>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d008      	beq.n	8003a4a <HAL_ADC_ConfigChannel+0x2f2>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4975      	ldr	r1, [pc, #468]	@ (8003c14 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a3e:	428b      	cmp	r3, r1
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x2ee>
 8003a42:	4b75      	ldr	r3, [pc, #468]	@ (8003c18 <HAL_ADC_ConfigChannel+0x4c0>)
 8003a44:	e05a      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a46:	2300      	movs	r3, #0
 8003a48:	e058      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a4a:	4b74      	ldr	r3, [pc, #464]	@ (8003c1c <HAL_ADC_ConfigChannel+0x4c4>)
 8003a4c:	e056      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a4e:	4b74      	ldr	r3, [pc, #464]	@ (8003c20 <HAL_ADC_ConfigChannel+0x4c8>)
 8003a50:	e054      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a52:	4b6e      	ldr	r3, [pc, #440]	@ (8003c0c <HAL_ADC_ConfigChannel+0x4b4>)
 8003a54:	e052      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a56:	4b6c      	ldr	r3, [pc, #432]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4b0>)
 8003a58:	e050      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a5a:	4b72      	ldr	r3, [pc, #456]	@ (8003c24 <HAL_ADC_ConfigChannel+0x4cc>)
 8003a5c:	e04e      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a5e:	4b72      	ldr	r3, [pc, #456]	@ (8003c28 <HAL_ADC_ConfigChannel+0x4d0>)
 8003a60:	e04c      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a62:	4b72      	ldr	r3, [pc, #456]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4d4>)
 8003a64:	e04a      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a66:	4b72      	ldr	r3, [pc, #456]	@ (8003c30 <HAL_ADC_ConfigChannel+0x4d8>)
 8003a68:	e048      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e046      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4970      	ldr	r1, [pc, #448]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a74:	428b      	cmp	r3, r1
 8003a76:	d140      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x3a2>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	495c      	ldr	r1, [pc, #368]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x498>)
 8003a7e:	428b      	cmp	r3, r1
 8003a80:	d039      	beq.n	8003af6 <HAL_ADC_ConfigChannel+0x39e>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	495b      	ldr	r1, [pc, #364]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x49c>)
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	d032      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x39a>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4959      	ldr	r1, [pc, #356]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4a0>)
 8003a92:	428b      	cmp	r3, r1
 8003a94:	d02b      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x396>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4958      	ldr	r1, [pc, #352]	@ (8003bfc <HAL_ADC_ConfigChannel+0x4a4>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d024      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x392>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4956      	ldr	r1, [pc, #344]	@ (8003c00 <HAL_ADC_ConfigChannel+0x4a8>)
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x38e>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4955      	ldr	r1, [pc, #340]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4ac>)
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	d016      	beq.n	8003ae2 <HAL_ADC_ConfigChannel+0x38a>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4953      	ldr	r1, [pc, #332]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4b0>)
 8003aba:	428b      	cmp	r3, r1
 8003abc:	d00f      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x386>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4952      	ldr	r1, [pc, #328]	@ (8003c0c <HAL_ADC_ConfigChannel+0x4b4>)
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	d008      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x382>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4951      	ldr	r1, [pc, #324]	@ (8003c14 <HAL_ADC_ConfigChannel+0x4bc>)
 8003ace:	428b      	cmp	r3, r1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x37e>
 8003ad2:	4b51      	ldr	r3, [pc, #324]	@ (8003c18 <HAL_ADC_ConfigChannel+0x4c0>)
 8003ad4:	e012      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e010      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003ada:	4b51      	ldr	r3, [pc, #324]	@ (8003c20 <HAL_ADC_ConfigChannel+0x4c8>)
 8003adc:	e00e      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003ade:	4b4b      	ldr	r3, [pc, #300]	@ (8003c0c <HAL_ADC_ConfigChannel+0x4b4>)
 8003ae0:	e00c      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003ae2:	4b49      	ldr	r3, [pc, #292]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4b0>)
 8003ae4:	e00a      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c24 <HAL_ADC_ConfigChannel+0x4cc>)
 8003ae8:	e008      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003aea:	4b4f      	ldr	r3, [pc, #316]	@ (8003c28 <HAL_ADC_ConfigChannel+0x4d0>)
 8003aec:	e006      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003aee:	4b4f      	ldr	r3, [pc, #316]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4d4>)
 8003af0:	e004      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003af2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_ADC_ConfigChannel+0x4d8>)
 8003af4:	e002      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_ADC_ConfigChannel+0x3a4>
 8003afa:	2300      	movs	r3, #0
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f7fe fed4 	bl	80028ac <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f280 80fc 	bge.w	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a36      	ldr	r2, [pc, #216]	@ (8003bec <HAL_ADC_ConfigChannel+0x494>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_ADC_ConfigChannel+0x3ca>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a45      	ldr	r2, [pc, #276]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4dc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x3ce>
 8003b22:	4b45      	ldr	r3, [pc, #276]	@ (8003c38 <HAL_ADC_ConfigChannel+0x4e0>)
 8003b24:	e000      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x3d0>
 8003b26:	4b45      	ldr	r3, [pc, #276]	@ (8003c3c <HAL_ADC_ConfigChannel+0x4e4>)
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe feb1 	bl	8002890 <LL_ADC_GetCommonPathInternalCh>
 8003b2e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2d      	ldr	r2, [pc, #180]	@ (8003bec <HAL_ADC_ConfigChannel+0x494>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x3ec>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4dc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10e      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x40a>
 8003b44:	4829      	ldr	r0, [pc, #164]	@ (8003bec <HAL_ADC_ConfigChannel+0x494>)
 8003b46:	f7ff f86b 	bl	8002c20 <LL_ADC_IsEnabled>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4839      	ldr	r0, [pc, #228]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4dc>)
 8003b4e:	f7ff f867 	bl	8002c20 <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4323      	orrs	r3, r4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf0c      	ite	eq
 8003b5a:	2301      	moveq	r3, #1
 8003b5c:	2300      	movne	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	e008      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x41c>
 8003b62:	4837      	ldr	r0, [pc, #220]	@ (8003c40 <HAL_ADC_ConfigChannel+0x4e8>)
 8003b64:	f7ff f85c 	bl	8002c20 <LL_ADC_IsEnabled>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80b3 	beq.w	8003ce0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a31      	ldr	r2, [pc, #196]	@ (8003c44 <HAL_ADC_ConfigChannel+0x4ec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d165      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x4f8>
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d160      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	@ (8003c40 <HAL_ADC_ConfigChannel+0x4e8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	f040 80b6 	bne.w	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <HAL_ADC_ConfigChannel+0x494>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x456>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a22      	ldr	r2, [pc, #136]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4dc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x45a>
 8003bae:	4a22      	ldr	r2, [pc, #136]	@ (8003c38 <HAL_ADC_ConfigChannel+0x4e0>)
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x45c>
 8003bb2:	4a22      	ldr	r2, [pc, #136]	@ (8003c3c <HAL_ADC_ConfigChannel+0x4e4>)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7fe fe54 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc2:	4b21      	ldr	r3, [pc, #132]	@ (8003c48 <HAL_ADC_ConfigChannel+0x4f0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	4a20      	ldr	r2, [pc, #128]	@ (8003c4c <HAL_ADC_ConfigChannel+0x4f4>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003bd6:	e002      	b.n	8003bde <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f9      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003be4:	e08f      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
 8003be6:	bf00      	nop
 8003be8:	47ff0000 	.word	0x47ff0000
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	04300002 	.word	0x04300002
 8003bf4:	08600004 	.word	0x08600004
 8003bf8:	0c900008 	.word	0x0c900008
 8003bfc:	10c00010 	.word	0x10c00010
 8003c00:	14f00020 	.word	0x14f00020
 8003c04:	2a000400 	.word	0x2a000400
 8003c08:	2e300800 	.word	0x2e300800
 8003c0c:	32601000 	.word	0x32601000
 8003c10:	43210000 	.word	0x43210000
 8003c14:	4b840000 	.word	0x4b840000
 8003c18:	4fb80000 	.word	0x4fb80000
 8003c1c:	47520000 	.word	0x47520000
 8003c20:	36902000 	.word	0x36902000
 8003c24:	25b00200 	.word	0x25b00200
 8003c28:	21800100 	.word	0x21800100
 8003c2c:	1d500080 	.word	0x1d500080
 8003c30:	19200040 	.word	0x19200040
 8003c34:	40022100 	.word	0x40022100
 8003c38:	40022300 	.word	0x40022300
 8003c3c:	58026300 	.word	0x58026300
 8003c40:	58026000 	.word	0x58026000
 8003c44:	cb840000 	.word	0xcb840000
 8003c48:	2400003c 	.word	0x2400003c
 8003c4c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <HAL_ADC_ConfigChannel+0x5c4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d11e      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x540>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d119      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2d      	ldr	r2, [pc, #180]	@ (8003d20 <HAL_ADC_ConfigChannel+0x5c8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d14b      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2c      	ldr	r2, [pc, #176]	@ (8003d24 <HAL_ADC_ConfigChannel+0x5cc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_ADC_ConfigChannel+0x52a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d28 <HAL_ADC_ConfigChannel+0x5d0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x52e>
 8003c82:	4a2a      	ldr	r2, [pc, #168]	@ (8003d2c <HAL_ADC_ConfigChannel+0x5d4>)
 8003c84:	e000      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x530>
 8003c86:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <HAL_ADC_ConfigChannel+0x5d8>)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f7fe fdea 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c96:	e036      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a25      	ldr	r2, [pc, #148]	@ (8003d34 <HAL_ADC_ConfigChannel+0x5dc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d131      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d12c      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d20 <HAL_ADC_ConfigChannel+0x5c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d127      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <HAL_ADC_ConfigChannel+0x5cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_ADC_ConfigChannel+0x572>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	@ (8003d28 <HAL_ADC_ConfigChannel+0x5d0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x576>
 8003cca:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <HAL_ADC_ConfigChannel+0x5d4>)
 8003ccc:	e000      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x578>
 8003cce:	4a18      	ldr	r2, [pc, #96]	@ (8003d30 <HAL_ADC_ConfigChannel+0x5d8>)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe fdc6 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
 8003cde:	e012      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003cf2:	e008      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3734      	adds	r7, #52	@ 0x34
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	c7520000 	.word	0xc7520000
 8003d20:	58026000 	.word	0x58026000
 8003d24:	40022000 	.word	0x40022000
 8003d28:	40022100 	.word	0x40022100
 8003d2c:	40022300 	.word	0x40022300
 8003d30:	58026300 	.word	0x58026300
 8003d34:	cfb80000 	.word	0xcfb80000

08003d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe ff6b 	bl	8002c20 <LL_ADC_IsEnabled>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d16e      	bne.n	8003e2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	4b38      	ldr	r3, [pc, #224]	@ (8003e38 <ADC_Enable+0x100>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e05a      	b.n	8003e30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe ff26 	bl	8002bd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d84:	f7fe fd22 	bl	80027cc <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e3c <ADC_Enable+0x104>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <ADC_Enable+0x66>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a29      	ldr	r2, [pc, #164]	@ (8003e40 <ADC_Enable+0x108>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <ADC_Enable+0x6a>
 8003d9e:	4b29      	ldr	r3, [pc, #164]	@ (8003e44 <ADC_Enable+0x10c>)
 8003da0:	e000      	b.n	8003da4 <ADC_Enable+0x6c>
 8003da2:	4b29      	ldr	r3, [pc, #164]	@ (8003e48 <ADC_Enable+0x110>)
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fea9 	bl	8002afc <LL_ADC_GetMultimode>
 8003daa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a23      	ldr	r2, [pc, #140]	@ (8003e40 <ADC_Enable+0x108>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d002      	beq.n	8003dbc <ADC_Enable+0x84>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	e000      	b.n	8003dbe <ADC_Enable+0x86>
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <ADC_Enable+0x104>)
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02c      	beq.n	8003e20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d130      	bne.n	8003e2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dcc:	e028      	b.n	8003e20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe ff24 	bl	8002c20 <LL_ADC_IsEnabled>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fef4 	bl	8002bd0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003de8:	f7fe fcf0 	bl	80027cc <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d914      	bls.n	8003e20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d00d      	beq.n	8003e20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	f043 0210 	orr.w	r2, r3, #16
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d1cf      	bne.n	8003dce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	8000003f 	.word	0x8000003f
 8003e3c:	40022000 	.word	0x40022000
 8003e40:	40022100 	.word	0x40022100
 8003e44:	40022300 	.word	0x40022300
 8003e48:	58026300 	.word	0x58026300

08003e4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fef4 	bl	8002c46 <LL_ADC_IsDisableOngoing>
 8003e5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fedb 	bl	8002c20 <LL_ADC_IsEnabled>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d047      	beq.n	8003f00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d144      	bne.n	8003f00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030d 	and.w	r3, r3, #13
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d10c      	bne.n	8003e9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe feb5 	bl	8002bf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2203      	movs	r2, #3
 8003e94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e96:	f7fe fc99 	bl	80027cc <HAL_GetTick>
 8003e9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e9c:	e029      	b.n	8003ef2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f043 0210 	orr.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e023      	b.n	8003f02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eba:	f7fe fc87 	bl	80027cc <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d914      	bls.n	8003ef2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e007      	b.n	8003f02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1dc      	bne.n	8003eba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7a      	ldr	r2, [pc, #488]	@ (8004104 <ADC_ConfigureBoostMode+0x1f8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <ADC_ConfigureBoostMode+0x1c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a79      	ldr	r2, [pc, #484]	@ (8004108 <ADC_ConfigureBoostMode+0x1fc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <ADC_ConfigureBoostMode+0x30>
 8003f28:	4b78      	ldr	r3, [pc, #480]	@ (800410c <ADC_ConfigureBoostMode+0x200>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e008      	b.n	8003f4e <ADC_ConfigureBoostMode+0x42>
 8003f3c:	4b74      	ldr	r3, [pc, #464]	@ (8004110 <ADC_ConfigureBoostMode+0x204>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01c      	beq.n	8003f8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f52:	f001 fcdf 	bl	8005914 <HAL_RCC_GetHCLKFreq>
 8003f56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f60:	d010      	beq.n	8003f84 <ADC_ConfigureBoostMode+0x78>
 8003f62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f66:	d873      	bhi.n	8004050 <ADC_ConfigureBoostMode+0x144>
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6c:	d002      	beq.n	8003f74 <ADC_ConfigureBoostMode+0x68>
 8003f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f72:	d16d      	bne.n	8004050 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	60fb      	str	r3, [r7, #12]
        break;
 8003f82:	e068      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	60fb      	str	r3, [r7, #12]
        break;
 8003f8a:	e064      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	f002 ff24 	bl	8006de0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003fa2:	d051      	beq.n	8004048 <ADC_ConfigureBoostMode+0x13c>
 8003fa4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003fa8:	d854      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003faa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003fae:	d047      	beq.n	8004040 <ADC_ConfigureBoostMode+0x134>
 8003fb0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003fb4:	d84e      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003fb6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003fba:	d03d      	beq.n	8004038 <ADC_ConfigureBoostMode+0x12c>
 8003fbc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003fc0:	d848      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fc6:	d033      	beq.n	8004030 <ADC_ConfigureBoostMode+0x124>
 8003fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fcc:	d842      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003fce:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003fd2:	d029      	beq.n	8004028 <ADC_ConfigureBoostMode+0x11c>
 8003fd4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003fd8:	d83c      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003fda:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003fde:	d01a      	beq.n	8004016 <ADC_ConfigureBoostMode+0x10a>
 8003fe0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003fe4:	d836      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003fe6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003fea:	d014      	beq.n	8004016 <ADC_ConfigureBoostMode+0x10a>
 8003fec:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ff0:	d830      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff6:	d00e      	beq.n	8004016 <ADC_ConfigureBoostMode+0x10a>
 8003ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffc:	d82a      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 8003ffe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004002:	d008      	beq.n	8004016 <ADC_ConfigureBoostMode+0x10a>
 8004004:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004008:	d824      	bhi.n	8004054 <ADC_ConfigureBoostMode+0x148>
 800400a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800400e:	d002      	beq.n	8004016 <ADC_ConfigureBoostMode+0x10a>
 8004010:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004014:	d11e      	bne.n	8004054 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	0c9b      	lsrs	r3, r3, #18
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	60fb      	str	r3, [r7, #12]
        break;
 8004026:	e016      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	091b      	lsrs	r3, r3, #4
 800402c:	60fb      	str	r3, [r7, #12]
        break;
 800402e:	e012      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	60fb      	str	r3, [r7, #12]
        break;
 8004036:	e00e      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	60fb      	str	r3, [r7, #12]
        break;
 800403e:	e00a      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	09db      	lsrs	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
        break;
 8004046:	e006      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	60fb      	str	r3, [r7, #12]
        break;
 800404e:	e002      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004054:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004056:	f7fe fbe9 	bl	800282c <HAL_GetREVID>
 800405a:	4603      	mov	r3, r0
 800405c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004060:	4293      	cmp	r3, r2
 8004062:	d815      	bhi.n	8004090 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a2b      	ldr	r2, [pc, #172]	@ (8004114 <ADC_ConfigureBoostMode+0x208>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d908      	bls.n	800407e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800407a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800407c:	e03e      	b.n	80040fc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800408c:	609a      	str	r2, [r3, #8]
}
 800408e:	e035      	b.n	80040fc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a1f      	ldr	r2, [pc, #124]	@ (8004118 <ADC_ConfigureBoostMode+0x20c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d808      	bhi.n	80040b0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040ac:	609a      	str	r2, [r3, #8]
}
 80040ae:	e025      	b.n	80040fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a1a      	ldr	r2, [pc, #104]	@ (800411c <ADC_ConfigureBoostMode+0x210>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d80a      	bhi.n	80040ce <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	e016      	b.n	80040fc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <ADC_ConfigureBoostMode+0x214>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d80a      	bhi.n	80040ec <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	e007      	b.n	80040fc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40022000 	.word	0x40022000
 8004108:	40022100 	.word	0x40022100
 800410c:	40022300 	.word	0x40022300
 8004110:	58026300 	.word	0x58026300
 8004114:	01312d00 	.word	0x01312d00
 8004118:	005f5e10 	.word	0x005f5e10
 800411c:	00bebc20 	.word	0x00bebc20
 8004120:	017d7840 	.word	0x017d7840

08004124 <LL_ADC_StartCalibration>:
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	4b09      	ldr	r3, [pc, #36]	@ (800415c <LL_ADC_StartCalibration+0x38>)
 8004136:	4013      	ands	r3, r2
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004144:	430a      	orrs	r2, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	3ffeffc0 	.word	0x3ffeffc0

08004160 <LL_ADC_IsCalibrationOnGoing>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004174:	d101      	bne.n	800417a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_ADCEx_Calibration_Start+0x1e>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e04c      	b.n	8004240 <HAL_ADCEx_Calibration_Start+0xb8>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff fe4c 	bl	8003e4c <ADC_Disable>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d135      	bne.n	800422a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041c2:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <HAL_ADCEx_Calibration_Start+0xc0>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	f043 0202 	orr.w	r2, r3, #2
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ffa4 	bl	8004124 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041dc:	e014      	b.n	8004208 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3301      	adds	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4a19      	ldr	r2, [pc, #100]	@ (800424c <HAL_ADCEx_Calibration_Start+0xc4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d30d      	bcc.n	8004208 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f0:	f023 0312 	bic.w	r3, r3, #18
 80041f4:	f043 0210 	orr.w	r2, r3, #16
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e01b      	b.n	8004240 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ffa7 	bl	8004160 <LL_ADC_IsCalibrationOnGoing>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e2      	bne.n	80041de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421c:	f023 0303 	bic.w	r3, r3, #3
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54
 8004228:	e005      	b.n	8004236 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	f043 0210 	orr.w	r2, r3, #16
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800423e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	ffffeefd 	.word	0xffffeefd
 800424c:	25c3f800 	.word	0x25c3f800

08004250 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c4:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <__NVIC_SetPriorityGrouping+0x40>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042d0:	4013      	ands	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <__NVIC_SetPriorityGrouping+0x44>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e2:	4a04      	ldr	r2, [pc, #16]	@ (80042f4 <__NVIC_SetPriorityGrouping+0x40>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	60d3      	str	r3, [r2, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00
 80042f8:	05fa0000 	.word	0x05fa0000

080042fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004300:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <__NVIC_GetPriorityGrouping+0x18>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	f003 0307 	and.w	r3, r3, #7
}
 800430a:	4618      	mov	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004326:	2b00      	cmp	r3, #0
 8004328:	db0b      	blt.n	8004342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	f003 021f 	and.w	r2, r3, #31
 8004330:	4907      	ldr	r1, [pc, #28]	@ (8004350 <__NVIC_EnableIRQ+0x38>)
 8004332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2001      	movs	r0, #1
 800433a:	fa00 f202 	lsl.w	r2, r0, r2
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e000e100 	.word	0xe000e100

08004354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db0a      	blt.n	800437e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	490c      	ldr	r1, [pc, #48]	@ (80043a0 <__NVIC_SetPriority+0x4c>)
 800436e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	440b      	add	r3, r1
 8004378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800437c:	e00a      	b.n	8004394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4908      	ldr	r1, [pc, #32]	@ (80043a4 <__NVIC_SetPriority+0x50>)
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	3b04      	subs	r3, #4
 800438c:	0112      	lsls	r2, r2, #4
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	440b      	add	r3, r1
 8004392:	761a      	strb	r2, [r3, #24]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000e100 	.word	0xe000e100
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	@ 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f1c3 0307 	rsb	r3, r3, #7
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	bf28      	it	cs
 80043c6:	2304      	movcs	r3, #4
 80043c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d902      	bls.n	80043d8 <NVIC_EncodePriority+0x30>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3b03      	subs	r3, #3
 80043d6:	e000      	b.n	80043da <NVIC_EncodePriority+0x32>
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43da      	mvns	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	401a      	ands	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f0:	f04f 31ff 	mov.w	r1, #4294967295
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	43d9      	mvns	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004400:	4313      	orrs	r3, r2
         );
}
 8004402:	4618      	mov	r0, r3
 8004404:	3724      	adds	r7, #36	@ 0x24
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004420:	d301      	bcc.n	8004426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004422:	2301      	movs	r3, #1
 8004424:	e00f      	b.n	8004446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004426:	4a0a      	ldr	r2, [pc, #40]	@ (8004450 <SysTick_Config+0x40>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3b01      	subs	r3, #1
 800442c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800442e:	210f      	movs	r1, #15
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	f7ff ff8e 	bl	8004354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004438:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <SysTick_Config+0x40>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800443e:	4b04      	ldr	r3, [pc, #16]	@ (8004450 <SysTick_Config+0x40>)
 8004440:	2207      	movs	r2, #7
 8004442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	e000e010 	.word	0xe000e010

08004454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff29 	bl	80042b4 <__NVIC_SetPriorityGrouping>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004478:	f7ff ff40 	bl	80042fc <__NVIC_GetPriorityGrouping>
 800447c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff90 	bl	80043a8 <NVIC_EncodePriority>
 8004488:	4602      	mov	r2, r0
 800448a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff5f 	bl	8004354 <__NVIC_SetPriority>
}
 8004496:	bf00      	nop
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff33 	bl	8004318 <__NVIC_EnableIRQ>
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ffa4 	bl	8004410 <SysTick_Config>
 80044c8:	4603      	mov	r3, r0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80044d8:	f3bf 8f5f 	dmb	sy
}
 80044dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80044de:	4b07      	ldr	r3, [pc, #28]	@ (80044fc <HAL_MPU_Disable+0x28>)
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	4a06      	ldr	r2, [pc, #24]	@ (80044fc <HAL_MPU_Disable+0x28>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80044ea:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_MPU_Disable+0x2c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	605a      	str	r2, [r3, #4]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	e000ed00 	.word	0xe000ed00
 8004500:	e000ed90 	.word	0xe000ed90

08004504 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800450c:	4a0b      	ldr	r2, [pc, #44]	@ (800453c <HAL_MPU_Enable+0x38>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <HAL_MPU_Enable+0x3c>)
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <HAL_MPU_Enable+0x3c>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004522:	f3bf 8f4f 	dsb	sy
}
 8004526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004528:	f3bf 8f6f 	isb	sy
}
 800452c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000ed90 	.word	0xe000ed90
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	785a      	ldrb	r2, [r3, #1]
 8004550:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <HAL_MPU_ConfigRegion+0x7c>)
 8004552:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004554:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <HAL_MPU_ConfigRegion+0x7c>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <HAL_MPU_ConfigRegion+0x7c>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004560:	4a17      	ldr	r2, [pc, #92]	@ (80045c0 <HAL_MPU_ConfigRegion+0x7c>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	7b1b      	ldrb	r3, [r3, #12]
 800456c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7adb      	ldrb	r3, [r3, #11]
 8004572:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004574:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7a9b      	ldrb	r3, [r3, #10]
 800457a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800457c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7b5b      	ldrb	r3, [r3, #13]
 8004582:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7b9b      	ldrb	r3, [r3, #14]
 800458a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800458c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7bdb      	ldrb	r3, [r3, #15]
 8004592:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004594:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7a5b      	ldrb	r3, [r3, #9]
 800459a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800459c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	7a1b      	ldrb	r3, [r3, #8]
 80045a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045ac:	4a04      	ldr	r2, [pc, #16]	@ (80045c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045b0:	6113      	str	r3, [r2, #16]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000ed90 	.word	0xe000ed90

080045c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	@ 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045d2:	4b89      	ldr	r3, [pc, #548]	@ (80047f8 <HAL_GPIO_Init+0x234>)
 80045d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045d6:	e194      	b.n	8004902 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8186 	beq.w	80048fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d005      	beq.n	8004608 <HAL_GPIO_Init+0x44>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d130      	bne.n	800466a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2203      	movs	r2, #3
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800463e:	2201      	movs	r2, #1
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0201 	and.w	r2, r3, #1
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d017      	beq.n	80046a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2203      	movs	r2, #3
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4313      	orrs	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d123      	bne.n	80046fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	08da      	lsrs	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3208      	adds	r2, #8
 80046ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	220f      	movs	r2, #15
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	08da      	lsrs	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3208      	adds	r2, #8
 80046f4:	69b9      	ldr	r1, [r7, #24]
 80046f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0203 	and.w	r2, r3, #3
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80e0 	beq.w	80048fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473c:	4b2f      	ldr	r3, [pc, #188]	@ (80047fc <HAL_GPIO_Init+0x238>)
 800473e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004742:	4a2e      	ldr	r2, [pc, #184]	@ (80047fc <HAL_GPIO_Init+0x238>)
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800474c:	4b2b      	ldr	r3, [pc, #172]	@ (80047fc <HAL_GPIO_Init+0x238>)
 800474e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800475a:	4a29      	ldr	r2, [pc, #164]	@ (8004800 <HAL_GPIO_Init+0x23c>)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	3302      	adds	r3, #2
 8004762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	220f      	movs	r2, #15
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4013      	ands	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a20      	ldr	r2, [pc, #128]	@ (8004804 <HAL_GPIO_Init+0x240>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d052      	beq.n	800482c <HAL_GPIO_Init+0x268>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <HAL_GPIO_Init+0x244>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d031      	beq.n	80047f2 <HAL_GPIO_Init+0x22e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_GPIO_Init+0x248>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d02b      	beq.n	80047ee <HAL_GPIO_Init+0x22a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1d      	ldr	r2, [pc, #116]	@ (8004810 <HAL_GPIO_Init+0x24c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d025      	beq.n	80047ea <HAL_GPIO_Init+0x226>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <HAL_GPIO_Init+0x250>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01f      	beq.n	80047e6 <HAL_GPIO_Init+0x222>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_GPIO_Init+0x254>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d019      	beq.n	80047e2 <HAL_GPIO_Init+0x21e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1a      	ldr	r2, [pc, #104]	@ (800481c <HAL_GPIO_Init+0x258>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_GPIO_Init+0x21a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a19      	ldr	r2, [pc, #100]	@ (8004820 <HAL_GPIO_Init+0x25c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00d      	beq.n	80047da <HAL_GPIO_Init+0x216>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a18      	ldr	r2, [pc, #96]	@ (8004824 <HAL_GPIO_Init+0x260>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <HAL_GPIO_Init+0x212>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a17      	ldr	r2, [pc, #92]	@ (8004828 <HAL_GPIO_Init+0x264>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_GPIO_Init+0x20e>
 80047ce:	2309      	movs	r3, #9
 80047d0:	e02d      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047d2:	230a      	movs	r3, #10
 80047d4:	e02b      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047d6:	2308      	movs	r3, #8
 80047d8:	e029      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047da:	2307      	movs	r3, #7
 80047dc:	e027      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047de:	2306      	movs	r3, #6
 80047e0:	e025      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047e2:	2305      	movs	r3, #5
 80047e4:	e023      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047e6:	2304      	movs	r3, #4
 80047e8:	e021      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047ea:	2303      	movs	r3, #3
 80047ec:	e01f      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e01d      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e01b      	b.n	800482e <HAL_GPIO_Init+0x26a>
 80047f6:	bf00      	nop
 80047f8:	58000080 	.word	0x58000080
 80047fc:	58024400 	.word	0x58024400
 8004800:	58000400 	.word	0x58000400
 8004804:	58020000 	.word	0x58020000
 8004808:	58020400 	.word	0x58020400
 800480c:	58020800 	.word	0x58020800
 8004810:	58020c00 	.word	0x58020c00
 8004814:	58021000 	.word	0x58021000
 8004818:	58021400 	.word	0x58021400
 800481c:	58021800 	.word	0x58021800
 8004820:	58021c00 	.word	0x58021c00
 8004824:	58022000 	.word	0x58022000
 8004828:	58022400 	.word	0x58022400
 800482c:	2300      	movs	r3, #0
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	f002 0203 	and.w	r2, r2, #3
 8004834:	0092      	lsls	r2, r2, #2
 8004836:	4093      	lsls	r3, r2
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800483e:	4938      	ldr	r1, [pc, #224]	@ (8004920 <HAL_GPIO_Init+0x35c>)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004872:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	3301      	adds	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	f47f ae63 	bne.w	80045d8 <HAL_GPIO_Init+0x14>
  }
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	3724      	adds	r7, #36	@ 0x24
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	58000400 	.word	0x58000400

08004924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
 8004930:	4613      	mov	r3, r2
 8004932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004934:	787b      	ldrb	r3, [r7, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004940:	e003      	b.n	800494a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004942:	887b      	ldrh	r3, [r7, #2]
 8004944:	041a      	lsls	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	619a      	str	r2, [r3, #24]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004968:	887a      	ldrh	r2, [r7, #2]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4013      	ands	r3, r2
 800496e:	041a      	lsls	r2, r3, #16
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	43d9      	mvns	r1, r3
 8004974:	887b      	ldrh	r3, [r7, #2]
 8004976:	400b      	ands	r3, r1
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d00a      	beq.n	80049b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049a0:	4b16      	ldr	r3, [pc, #88]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e01f      	b.n	80049f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e01d      	b.n	80049f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049b6:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f023 0207 	bic.w	r2, r3, #7
 80049be:	490f      	ldr	r1, [pc, #60]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049c6:	f7fd ff01 	bl	80027cc <HAL_GetTick>
 80049ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049cc:	e009      	b.n	80049e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ce:	f7fd fefd 	bl	80027cc <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049dc:	d901      	bls.n	80049e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e007      	b.n	80049f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049e2:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ee:	d1ee      	bne.n	80049ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	58024800 	.word	0x58024800

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08c      	sub	sp, #48	@ 0x30
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f000 bc48 	b.w	80052a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8088 	beq.w	8004b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a22:	4b99      	ldr	r3, [pc, #612]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a2c:	4b96      	ldr	r3, [pc, #600]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d007      	beq.n	8004a48 <HAL_RCC_OscConfig+0x48>
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	2b18      	cmp	r3, #24
 8004a3c:	d111      	bne.n	8004a62 <HAL_RCC_OscConfig+0x62>
 8004a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	4b8f      	ldr	r3, [pc, #572]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d06d      	beq.n	8004b30 <HAL_RCC_OscConfig+0x130>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d169      	bne.n	8004b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f000 bc21 	b.w	80052a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x7a>
 8004a6c:	4b86      	ldr	r3, [pc, #536]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a85      	ldr	r2, [pc, #532]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e02e      	b.n	8004ad8 <HAL_RCC_OscConfig+0xd8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x9c>
 8004a82:	4b81      	ldr	r3, [pc, #516]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a80      	ldr	r2, [pc, #512]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7d      	ldr	r2, [pc, #500]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e01d      	b.n	8004ad8 <HAL_RCC_OscConfig+0xd8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0xc0>
 8004aa6:	4b78      	ldr	r3, [pc, #480]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a77      	ldr	r2, [pc, #476]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b75      	ldr	r3, [pc, #468]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a74      	ldr	r2, [pc, #464]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0xd8>
 8004ac0:	4b71      	ldr	r3, [pc, #452]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a70      	ldr	r2, [pc, #448]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b6e      	ldr	r3, [pc, #440]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fe74 	bl	80027cc <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fd fe70 	bl	80027cc <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	@ 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e3d4      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004afa:	4b63      	ldr	r3, [pc, #396]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xe8>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fd fe60 	bl	80027cc <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fd fe5c 	bl	80027cc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	@ 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e3c0      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b22:	4b59      	ldr	r3, [pc, #356]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x110>
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80ca 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b40:	4b51      	ldr	r3, [pc, #324]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_RCC_OscConfig+0x166>
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2b18      	cmp	r3, #24
 8004b5a:	d156      	bne.n	8004c0a <HAL_RCC_OscConfig+0x20a>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d151      	bne.n	8004c0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b66:	4b48      	ldr	r3, [pc, #288]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_RCC_OscConfig+0x17e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e392      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b7e:	4b42      	ldr	r3, [pc, #264]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 0219 	bic.w	r2, r3, #25
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	493f      	ldr	r1, [pc, #252]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fd fe1c 	bl	80027cc <HAL_GetTick>
 8004b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b98:	f7fd fe18 	bl	80027cc <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e37c      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004baa:	4b37      	ldr	r3, [pc, #220]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb6:	f7fd fe39 	bl	800282c <HAL_GetREVID>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d817      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x1f4>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d108      	bne.n	8004bde <HAL_RCC_OscConfig+0x1de>
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bdc:	e07a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bde:	4b2a      	ldr	r3, [pc, #168]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	031b      	lsls	r3, r3, #12
 8004bec:	4926      	ldr	r1, [pc, #152]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf2:	e06f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf4:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	4921      	ldr	r1, [pc, #132]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c08:	e064      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d047      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c12:	4b1d      	ldr	r3, [pc, #116]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 0219 	bic.w	r2, r3, #25
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	491a      	ldr	r1, [pc, #104]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c24:	f7fd fdd2 	bl	80027cc <HAL_GetTick>
 8004c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2c:	f7fd fdce 	bl	80027cc <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e332      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c3e:	4b12      	ldr	r3, [pc, #72]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	f7fd fdef 	bl	800282c <HAL_GetREVID>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d819      	bhi.n	8004c8c <HAL_RCC_OscConfig+0x28c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b40      	cmp	r3, #64	@ 0x40
 8004c5e:	d108      	bne.n	8004c72 <HAL_RCC_OscConfig+0x272>
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c68:	4a07      	ldr	r2, [pc, #28]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c6e:	6053      	str	r3, [r2, #4]
 8004c70:	e030      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
 8004c72:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	031b      	lsls	r3, r3, #12
 8004c80:	4901      	ldr	r1, [pc, #4]	@ (8004c88 <HAL_RCC_OscConfig+0x288>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]
 8004c86:	e025      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	061b      	lsls	r3, r3, #24
 8004c9a:	4997      	ldr	r1, [pc, #604]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
 8004ca0:	e018      	b.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca2:	4b95      	ldr	r3, [pc, #596]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a94      	ldr	r2, [pc, #592]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fd fd8d 	bl	80027cc <HAL_GetTick>
 8004cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb6:	f7fd fd89 	bl	80027cc <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e2ed      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cc8:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80a9 	beq.w	8004e34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce2:	4b85      	ldr	r3, [pc, #532]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cec:	4b82      	ldr	r3, [pc, #520]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d007      	beq.n	8004d08 <HAL_RCC_OscConfig+0x308>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b18      	cmp	r3, #24
 8004cfc:	d13a      	bne.n	8004d74 <HAL_RCC_OscConfig+0x374>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d135      	bne.n	8004d74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d08:	4b7b      	ldr	r3, [pc, #492]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_OscConfig+0x320>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2b80      	cmp	r3, #128	@ 0x80
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e2c1      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d20:	f7fd fd84 	bl	800282c <HAL_GetREVID>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d817      	bhi.n	8004d5e <HAL_RCC_OscConfig+0x35e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d108      	bne.n	8004d48 <HAL_RCC_OscConfig+0x348>
 8004d36:	4b70      	ldr	r3, [pc, #448]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d46:	e075      	b.n	8004e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d48:	4b6b      	ldr	r3, [pc, #428]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	069b      	lsls	r3, r3, #26
 8004d56:	4968      	ldr	r1, [pc, #416]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d5c:	e06a      	b.n	8004e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d5e:	4b66      	ldr	r3, [pc, #408]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	061b      	lsls	r3, r3, #24
 8004d6c:	4962      	ldr	r1, [pc, #392]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d72:	e05f      	b.n	8004e34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d042      	beq.n	8004e02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a5d      	ldr	r2, [pc, #372]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fd fd20 	bl	80027cc <HAL_GetTick>
 8004d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d90:	f7fd fd1c 	bl	80027cc <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e280      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004da2:	4b55      	ldr	r3, [pc, #340]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dae:	f7fd fd3d 	bl	800282c <HAL_GetREVID>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d817      	bhi.n	8004dec <HAL_RCC_OscConfig+0x3ec>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d108      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x3d6>
 8004dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dd2:	6053      	str	r3, [r2, #4]
 8004dd4:	e02e      	b.n	8004e34 <HAL_RCC_OscConfig+0x434>
 8004dd6:	4b48      	ldr	r3, [pc, #288]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	069b      	lsls	r3, r3, #26
 8004de4:	4944      	ldr	r1, [pc, #272]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
 8004dea:	e023      	b.n	8004e34 <HAL_RCC_OscConfig+0x434>
 8004dec:	4b42      	ldr	r3, [pc, #264]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	493f      	ldr	r1, [pc, #252]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60cb      	str	r3, [r1, #12]
 8004e00:	e018      	b.n	8004e34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e02:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0e:	f7fd fcdd 	bl	80027cc <HAL_GetTick>
 8004e12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e16:	f7fd fcd9 	bl	80027cc <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e23d      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e28:	4b33      	ldr	r3, [pc, #204]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d036      	beq.n	8004eae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d019      	beq.n	8004e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fd fcba 	bl	80027cc <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fd fcb6 	bl	80027cc <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e21a      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x45c>
 8004e7a:	e018      	b.n	8004eae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fd fca0 	bl	80027cc <HAL_GetTick>
 8004e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e90:	f7fd fc9c 	bl	80027cc <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e200      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ea2:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d039      	beq.n	8004f2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01c      	beq.n	8004efc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ece:	f7fd fc7d 	bl	80027cc <HAL_GetTick>
 8004ed2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed6:	f7fd fc79 	bl	80027cc <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e1dd      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x4d6>
 8004ef4:	e01b      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004efc:	4b9b      	ldr	r3, [pc, #620]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a9a      	ldr	r2, [pc, #616]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f08:	f7fd fc60 	bl	80027cc <HAL_GetTick>
 8004f0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f10:	f7fd fc5c 	bl	80027cc <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e1c0      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f22:	4b92      	ldr	r3, [pc, #584]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8081 	beq.w	800503e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005170 <HAL_RCC_OscConfig+0x770>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a8b      	ldr	r2, [pc, #556]	@ (8005170 <HAL_RCC_OscConfig+0x770>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f48:	f7fd fc40 	bl	80027cc <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f50:	f7fd fc3c 	bl	80027cc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e1a0      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f62:	4b83      	ldr	r3, [pc, #524]	@ (8005170 <HAL_RCC_OscConfig+0x770>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d106      	bne.n	8004f84 <HAL_RCC_OscConfig+0x584>
 8004f76:	4b7d      	ldr	r3, [pc, #500]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f82:	e02d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x5e0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10c      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x5a6>
 8004f8c:	4b77      	ldr	r3, [pc, #476]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f90:	4a76      	ldr	r2, [pc, #472]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f98:	4b74      	ldr	r3, [pc, #464]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a73      	ldr	r2, [pc, #460]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004f9e:	f023 0304 	bic.w	r3, r3, #4
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	e01c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x5e0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x5c8>
 8004fae:	4b6f      	ldr	r3, [pc, #444]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fb4:	f043 0304 	orr.w	r3, r3, #4
 8004fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fba:	4b6c      	ldr	r3, [pc, #432]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc6:	e00b      	b.n	8004fe0 <HAL_RCC_OscConfig+0x5e0>
 8004fc8:	4b68      	ldr	r3, [pc, #416]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fcc:	4a67      	ldr	r2, [pc, #412]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd4:	4b65      	ldr	r3, [pc, #404]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd8:	4a64      	ldr	r2, [pc, #400]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8004fda:	f023 0304 	bic.w	r3, r3, #4
 8004fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fd fbf0 	bl	80027cc <HAL_GetTick>
 8004fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff0:	f7fd fbec 	bl	80027cc <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e14e      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005006:	4b59      	ldr	r3, [pc, #356]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ee      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x5f0>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fd fbda 	bl	80027cc <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800501a:	e00a      	b.n	8005032 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fd fbd6 	bl	80027cc <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e138      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005032:	4b4e      	ldr	r3, [pc, #312]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1ee      	bne.n	800501c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 812d 	beq.w	80052a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005048:	4b48      	ldr	r3, [pc, #288]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005050:	2b18      	cmp	r3, #24
 8005052:	f000 80bd 	beq.w	80051d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	2b02      	cmp	r3, #2
 800505c:	f040 809e 	bne.w	800519c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005060:	4b42      	ldr	r3, [pc, #264]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a41      	ldr	r2, [pc, #260]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800506a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd fbae 	bl	80027cc <HAL_GetTick>
 8005070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005074:	f7fd fbaa 	bl	80027cc <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e10e      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005086:	4b39      	ldr	r3, [pc, #228]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005092:	4b36      	ldr	r3, [pc, #216]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005096:	4b37      	ldr	r3, [pc, #220]	@ (8005174 <HAL_RCC_OscConfig+0x774>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050a2:	0112      	lsls	r2, r2, #4
 80050a4:	430a      	orrs	r2, r1
 80050a6:	4931      	ldr	r1, [pc, #196]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	3b01      	subs	r3, #1
 80050b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ba:	3b01      	subs	r3, #1
 80050bc:	025b      	lsls	r3, r3, #9
 80050be:	b29b      	uxth	r3, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	3b01      	subs	r3, #1
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	3b01      	subs	r3, #1
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050dc:	4923      	ldr	r1, [pc, #140]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050e2:	4b22      	ldr	r3, [pc, #136]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	4a21      	ldr	r2, [pc, #132]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ee:	4b1f      	ldr	r3, [pc, #124]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 80050f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f2:	4b21      	ldr	r3, [pc, #132]	@ (8005178 <HAL_RCC_OscConfig+0x778>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050fa:	00d2      	lsls	r2, r2, #3
 80050fc:	491b      	ldr	r1, [pc, #108]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005102:	4b1a      	ldr	r3, [pc, #104]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	f023 020c 	bic.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	4917      	ldr	r1, [pc, #92]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005114:	4b15      	ldr	r3, [pc, #84]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	f023 0202 	bic.w	r2, r3, #2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005120:	4912      	ldr	r1, [pc, #72]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005122:	4313      	orrs	r3, r2
 8005124:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005126:	4b11      	ldr	r3, [pc, #68]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	4a10      	ldr	r2, [pc, #64]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005132:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	4a0d      	ldr	r2, [pc, #52]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800513c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800513e:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	4a0a      	ldr	r2, [pc, #40]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800514a:	4b08      	ldr	r3, [pc, #32]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	4a07      	ldr	r2, [pc, #28]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005156:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a04      	ldr	r2, [pc, #16]	@ (800516c <HAL_RCC_OscConfig+0x76c>)
 800515c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005162:	f7fd fb33 	bl	80027cc <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005168:	e011      	b.n	800518e <HAL_RCC_OscConfig+0x78e>
 800516a:	bf00      	nop
 800516c:	58024400 	.word	0x58024400
 8005170:	58024800 	.word	0x58024800
 8005174:	fffffc0c 	.word	0xfffffc0c
 8005178:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517c:	f7fd fb26 	bl	80027cc <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e08a      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800518e:	4b47      	ldr	r3, [pc, #284]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x77c>
 800519a:	e082      	b.n	80052a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519c:	4b43      	ldr	r3, [pc, #268]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a42      	ldr	r2, [pc, #264]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd fb10 	bl	80027cc <HAL_GetTick>
 80051ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd fb0c 	bl	80027cc <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e070      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051c2:	4b3a      	ldr	r3, [pc, #232]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x7b0>
 80051ce:	e068      	b.n	80052a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051d0:	4b36      	ldr	r3, [pc, #216]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051d6:	4b35      	ldr	r3, [pc, #212]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d031      	beq.n	8005248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f003 0203 	and.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d12a      	bne.n	8005248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d122      	bne.n	8005248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d11a      	bne.n	8005248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0a5b      	lsrs	r3, r3, #9
 8005216:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d111      	bne.n	8005248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d108      	bne.n	8005248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	0e1b      	lsrs	r3, r3, #24
 800523a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005242:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e02b      	b.n	80052a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800524c:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 800524e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005250:	08db      	lsrs	r3, r3, #3
 8005252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005256:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	429a      	cmp	r2, r3
 8005260:	d01f      	beq.n	80052a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005262:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	4a11      	ldr	r2, [pc, #68]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800526e:	f7fd faad 	bl	80027cc <HAL_GetTick>
 8005272:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005274:	bf00      	nop
 8005276:	f7fd faa9 	bl	80027cc <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	4293      	cmp	r3, r2
 8005280:	d0f9      	beq.n	8005276 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 8005284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005286:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <HAL_RCC_OscConfig+0x8b0>)
 8005288:	4013      	ands	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800528e:	00d2      	lsls	r2, r2, #3
 8005290:	4906      	ldr	r1, [pc, #24]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 8005292:	4313      	orrs	r3, r2
 8005294:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005296:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	4a04      	ldr	r2, [pc, #16]	@ (80052ac <HAL_RCC_OscConfig+0x8ac>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3730      	adds	r7, #48	@ 0x30
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	58024400 	.word	0x58024400
 80052b0:	ffff0007 	.word	0xffff0007

080052b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e19c      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052c8:	4b8a      	ldr	r3, [pc, #552]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d910      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b87      	ldr	r3, [pc, #540]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 020f 	bic.w	r2, r3, #15
 80052de:	4985      	ldr	r1, [pc, #532]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b83      	ldr	r3, [pc, #524]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e184      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	4b7b      	ldr	r3, [pc, #492]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005310:	429a      	cmp	r2, r3
 8005312:	d908      	bls.n	8005326 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005314:	4b78      	ldr	r3, [pc, #480]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	4975      	ldr	r1, [pc, #468]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005322:	4313      	orrs	r3, r2
 8005324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	4b70      	ldr	r3, [pc, #448]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800533e:	429a      	cmp	r2, r3
 8005340:	d908      	bls.n	8005354 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005342:	4b6d      	ldr	r3, [pc, #436]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	496a      	ldr	r1, [pc, #424]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005350:	4313      	orrs	r3, r2
 8005352:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	4b64      	ldr	r3, [pc, #400]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800536c:	429a      	cmp	r2, r3
 800536e:	d908      	bls.n	8005382 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005370:	4b61      	ldr	r3, [pc, #388]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	495e      	ldr	r1, [pc, #376]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 800537e:	4313      	orrs	r3, r2
 8005380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d010      	beq.n	80053b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	4b59      	ldr	r3, [pc, #356]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800539a:	429a      	cmp	r2, r3
 800539c:	d908      	bls.n	80053b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800539e:	4b56      	ldr	r3, [pc, #344]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4953      	ldr	r1, [pc, #332]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d010      	beq.n	80053de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	4b4d      	ldr	r3, [pc, #308]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d908      	bls.n	80053de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053cc:	4b4a      	ldr	r3, [pc, #296]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f023 020f 	bic.w	r2, r3, #15
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4947      	ldr	r1, [pc, #284]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d055      	beq.n	8005496 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053ea:	4b43      	ldr	r3, [pc, #268]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4940      	ldr	r1, [pc, #256]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d107      	bne.n	8005414 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005404:	4b3c      	ldr	r3, [pc, #240]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d121      	bne.n	8005454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0f6      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d107      	bne.n	800542c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800541c:	4b36      	ldr	r3, [pc, #216]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d115      	bne.n	8005454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0ea      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d107      	bne.n	8005444 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005434:	4b30      	ldr	r3, [pc, #192]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0de      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005444:	4b2c      	ldr	r3, [pc, #176]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0d6      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005454:	4b28      	ldr	r3, [pc, #160]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f023 0207 	bic.w	r2, r3, #7
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4925      	ldr	r1, [pc, #148]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005462:	4313      	orrs	r3, r2
 8005464:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005466:	f7fd f9b1 	bl	80027cc <HAL_GetTick>
 800546a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546c:	e00a      	b.n	8005484 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546e:	f7fd f9ad 	bl	80027cc <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547c:	4293      	cmp	r3, r2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e0be      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005484:	4b1c      	ldr	r3, [pc, #112]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	429a      	cmp	r2, r3
 8005494:	d1eb      	bne.n	800546e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	4b14      	ldr	r3, [pc, #80]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d208      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b2:	4b11      	ldr	r3, [pc, #68]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f023 020f 	bic.w	r2, r3, #15
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	490e      	ldr	r1, [pc, #56]	@ (80054f8 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054c4:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d214      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 020f 	bic.w	r2, r3, #15
 80054da:	4906      	ldr	r1, [pc, #24]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <HAL_RCC_ClockConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e086      	b.n	8005602 <HAL_RCC_ClockConfig+0x34e>
 80054f4:	52002000 	.word	0x52002000
 80054f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	4b3f      	ldr	r3, [pc, #252]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005514:	429a      	cmp	r2, r3
 8005516:	d208      	bcs.n	800552a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005518:	4b3c      	ldr	r3, [pc, #240]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	4939      	ldr	r1, [pc, #228]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 8005526:	4313      	orrs	r3, r2
 8005528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d010      	beq.n	8005558 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	4b34      	ldr	r3, [pc, #208]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005542:	429a      	cmp	r2, r3
 8005544:	d208      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005546:	4b31      	ldr	r3, [pc, #196]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	492e      	ldr	r1, [pc, #184]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 8005554:	4313      	orrs	r3, r2
 8005556:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d010      	beq.n	8005586 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	4b28      	ldr	r3, [pc, #160]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005570:	429a      	cmp	r2, r3
 8005572:	d208      	bcs.n	8005586 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005574:	4b25      	ldr	r3, [pc, #148]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	4922      	ldr	r1, [pc, #136]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 8005582:	4313      	orrs	r3, r2
 8005584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d010      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	4b1d      	ldr	r3, [pc, #116]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800559e:	429a      	cmp	r2, r3
 80055a0:	d208      	bcs.n	80055b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055a2:	4b1a      	ldr	r3, [pc, #104]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	4917      	ldr	r1, [pc, #92]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055b4:	f000 f834 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b14      	ldr	r3, [pc, #80]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	4912      	ldr	r1, [pc, #72]	@ (8005610 <HAL_RCC_ClockConfig+0x35c>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055d2:	4b0e      	ldr	r3, [pc, #56]	@ (800560c <HAL_RCC_ClockConfig+0x358>)
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	4a0d      	ldr	r2, [pc, #52]	@ (8005610 <HAL_RCC_ClockConfig+0x35c>)
 80055dc:	5cd3      	ldrb	r3, [r2, r3]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005614 <HAL_RCC_ClockConfig+0x360>)
 80055ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <HAL_RCC_ClockConfig+0x364>)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <HAL_RCC_ClockConfig+0x368>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd f89e 	bl	8002738 <HAL_InitTick>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	58024400 	.word	0x58024400
 8005610:	0800e114 	.word	0x0800e114
 8005614:	24000040 	.word	0x24000040
 8005618:	2400003c 	.word	0x2400003c
 800561c:	24000044 	.word	0x24000044

08005620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005620:	b480      	push	{r7}
 8005622:	b089      	sub	sp, #36	@ 0x24
 8005624:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005626:	4bb3      	ldr	r3, [pc, #716]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800562e:	2b18      	cmp	r3, #24
 8005630:	f200 8155 	bhi.w	80058de <HAL_RCC_GetSysClockFreq+0x2be>
 8005634:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	080056a1 	.word	0x080056a1
 8005640:	080058df 	.word	0x080058df
 8005644:	080058df 	.word	0x080058df
 8005648:	080058df 	.word	0x080058df
 800564c:	080058df 	.word	0x080058df
 8005650:	080058df 	.word	0x080058df
 8005654:	080058df 	.word	0x080058df
 8005658:	080058df 	.word	0x080058df
 800565c:	080056c7 	.word	0x080056c7
 8005660:	080058df 	.word	0x080058df
 8005664:	080058df 	.word	0x080058df
 8005668:	080058df 	.word	0x080058df
 800566c:	080058df 	.word	0x080058df
 8005670:	080058df 	.word	0x080058df
 8005674:	080058df 	.word	0x080058df
 8005678:	080058df 	.word	0x080058df
 800567c:	080056cd 	.word	0x080056cd
 8005680:	080058df 	.word	0x080058df
 8005684:	080058df 	.word	0x080058df
 8005688:	080058df 	.word	0x080058df
 800568c:	080058df 	.word	0x080058df
 8005690:	080058df 	.word	0x080058df
 8005694:	080058df 	.word	0x080058df
 8005698:	080058df 	.word	0x080058df
 800569c:	080056d3 	.word	0x080056d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056a0:	4b94      	ldr	r3, [pc, #592]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056ac:	4b91      	ldr	r3, [pc, #580]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	08db      	lsrs	r3, r3, #3
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	4a90      	ldr	r2, [pc, #576]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80056be:	e111      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056c0:	4b8d      	ldr	r3, [pc, #564]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056c2:	61bb      	str	r3, [r7, #24]
      break;
 80056c4:	e10e      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80056c6:	4b8d      	ldr	r3, [pc, #564]	@ (80058fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056c8:	61bb      	str	r3, [r7, #24]
      break;
 80056ca:	e10b      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80056cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056ce:	61bb      	str	r3, [r7, #24]
      break;
 80056d0:	e108      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056d2:	4b88      	ldr	r3, [pc, #544]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80056dc:	4b85      	ldr	r3, [pc, #532]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056e8:	4b82      	ldr	r3, [pc, #520]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056f2:	4b80      	ldr	r3, [pc, #512]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f6:	08db      	lsrs	r3, r3, #3
 80056f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80e1 	beq.w	80058d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b02      	cmp	r3, #2
 800571a:	f000 8083 	beq.w	8005824 <HAL_RCC_GetSysClockFreq+0x204>
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b02      	cmp	r3, #2
 8005722:	f200 80a1 	bhi.w	8005868 <HAL_RCC_GetSysClockFreq+0x248>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x114>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d056      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005732:	e099      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005734:	4b6f      	ldr	r3, [pc, #444]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02d      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005740:	4b6c      	ldr	r3, [pc, #432]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	08db      	lsrs	r3, r3, #3
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	4a6b      	ldr	r2, [pc, #428]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576a:	4b62      	ldr	r3, [pc, #392]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577a:	ed97 6a02 	vldr	s12, [r7, #8]
 800577e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800578e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005796:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800579a:	e087      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005908 <HAL_RCC_GetSysClockFreq+0x2e8>
 80057aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ae:	4b51      	ldr	r3, [pc, #324]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057be:	ed97 6a02 	vldr	s12, [r7, #8]
 80057c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005904 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057de:	e065      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800590c <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f2:	4b40      	ldr	r3, [pc, #256]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005802:	ed97 6a02 	vldr	s12, [r7, #8]
 8005806:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800580a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005822:	e043      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005910 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	ed97 6a02 	vldr	s12, [r7, #8]
 800584a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005866:	e021      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800590c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587a:	4b1e      	ldr	r3, [pc, #120]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588a:	ed97 6a02 	vldr	s12, [r7, #8]
 800588e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	0a5b      	lsrs	r3, r3, #9
 80058b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058b6:	3301      	adds	r3, #1
 80058b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	ee07 3a90 	vmov	s15, r3
 80058c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d0:	ee17 3a90 	vmov	r3, s15
 80058d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058d6:	e005      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
      break;
 80058dc:	e002      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80058de:	4b07      	ldr	r3, [pc, #28]	@ (80058fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058e0:	61bb      	str	r3, [r7, #24]
      break;
 80058e2:	bf00      	nop
  }

  return sysclockfreq;
 80058e4:	69bb      	ldr	r3, [r7, #24]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3724      	adds	r7, #36	@ 0x24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
 80058f8:	03d09000 	.word	0x03d09000
 80058fc:	003d0900 	.word	0x003d0900
 8005900:	017d7840 	.word	0x017d7840
 8005904:	46000000 	.word	0x46000000
 8005908:	4c742400 	.word	0x4c742400
 800590c:	4a742400 	.word	0x4a742400
 8005910:	4bbebc20 	.word	0x4bbebc20

08005914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800591a:	f7ff fe81 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 800591e:	4602      	mov	r2, r0
 8005920:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <HAL_RCC_GetHCLKFreq+0x50>)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	490f      	ldr	r1, [pc, #60]	@ (8005968 <HAL_RCC_GetHCLKFreq+0x54>)
 800592c:	5ccb      	ldrb	r3, [r1, r3]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	fa22 f303 	lsr.w	r3, r2, r3
 8005936:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005938:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <HAL_RCC_GetHCLKFreq+0x50>)
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	4a09      	ldr	r2, [pc, #36]	@ (8005968 <HAL_RCC_GetHCLKFreq+0x54>)
 8005942:	5cd3      	ldrb	r3, [r2, r3]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	4a07      	ldr	r2, [pc, #28]	@ (800596c <HAL_RCC_GetHCLKFreq+0x58>)
 8005950:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005952:	4a07      	ldr	r2, [pc, #28]	@ (8005970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005958:	4b04      	ldr	r3, [pc, #16]	@ (800596c <HAL_RCC_GetHCLKFreq+0x58>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	58024400 	.word	0x58024400
 8005968:	0800e114 	.word	0x0800e114
 800596c:	24000040 	.word	0x24000040
 8005970:	2400003c 	.word	0x2400003c

08005974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005978:	f7ff ffcc 	bl	8005914 <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	091b      	lsrs	r3, r3, #4
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4904      	ldr	r1, [pc, #16]	@ (800599c <HAL_RCC_GetPCLK1Freq+0x28>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005994:	4618      	mov	r0, r3
 8005996:	bd80      	pop	{r7, pc}
 8005998:	58024400 	.word	0x58024400
 800599c:	0800e114 	.word	0x0800e114

080059a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059a4:	f7ff ffb6 	bl	8005914 <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4904      	ldr	r1, [pc, #16]	@ (80059c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400
 80059c8:	0800e114 	.word	0x0800e114

080059cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d0:	b0ca      	sub	sp, #296	@ 0x128
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80059f0:	2500      	movs	r5, #0
 80059f2:	ea54 0305 	orrs.w	r3, r4, r5
 80059f6:	d049      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a02:	d02f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a08:	d828      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a0e:	d01a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a14:	d822      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a1e:	d007      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a20:	e01c      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a22:	4bb8      	ldr	r3, [pc, #736]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	4ab7      	ldr	r2, [pc, #732]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a2e:	e01a      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	3308      	adds	r3, #8
 8005a36:	2102      	movs	r1, #2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f002 fb61 	bl	8008100 <RCCEx_PLL2_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a44:	e00f      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	3328      	adds	r3, #40	@ 0x28
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f002 fc08 	bl	8008264 <RCCEx_PLL3_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a5a:	e004      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a62:	e000      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a6e:	4ba5      	ldr	r3, [pc, #660]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a7c:	4aa1      	ldr	r2, [pc, #644]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a82:	e003      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a98:	f04f 0900 	mov.w	r9, #0
 8005a9c:	ea58 0309 	orrs.w	r3, r8, r9
 8005aa0:	d047      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d82a      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005aac:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ac9 	.word	0x08005ac9
 8005ab8:	08005ad7 	.word	0x08005ad7
 8005abc:	08005aed 	.word	0x08005aed
 8005ac0:	08005b0b 	.word	0x08005b0b
 8005ac4:	08005b0b 	.word	0x08005b0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	4a8d      	ldr	r2, [pc, #564]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ad4:	e01a      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	3308      	adds	r3, #8
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f002 fb0e 	bl	8008100 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aea:	e00f      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	3328      	adds	r3, #40	@ 0x28
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f002 fbb5 	bl	8008264 <RCCEx_PLL3_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b00:	e004      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b08:	e000      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b14:	4b7b      	ldr	r3, [pc, #492]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b18:	f023 0107 	bic.w	r1, r3, #7
 8005b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b22:	4a78      	ldr	r2, [pc, #480]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b28:	e003      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b3e:	f04f 0b00 	mov.w	fp, #0
 8005b42:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b46:	d04c      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b52:	d030      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b58:	d829      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b5c:	d02d      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b60:	d825      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	d018      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b66:	2b80      	cmp	r3, #128	@ 0x80
 8005b68:	d821      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b6e:	2b40      	cmp	r3, #64	@ 0x40
 8005b70:	d007      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b72:	e01c      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4b63      	ldr	r3, [pc, #396]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	4a62      	ldr	r2, [pc, #392]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b80:	e01c      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b86:	3308      	adds	r3, #8
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f002 fab8 	bl	8008100 <RCCEx_PLL2_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b96:	e011      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9c:	3328      	adds	r3, #40	@ 0x28
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f002 fb5f 	bl	8008264 <RCCEx_PLL3_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bac:	e006      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bb4:	e002      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bb6:	bf00      	nop
 8005bb8:	e000      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd2:	4a4c      	ldr	r2, [pc, #304]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd8:	e003      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005bee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005bf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	d053      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c0e:	d035      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c14:	d82e      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c1a:	d031      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c20:	d828      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c26:	d01a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c2c:	d822      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c36:	d007      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c38:	e01c      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3a:	4b32      	ldr	r3, [pc, #200]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3e:	4a31      	ldr	r2, [pc, #196]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c46:	e01c      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f002 fa55 	bl	8008100 <RCCEx_PLL2_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c5c:	e011      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c62:	3328      	adds	r3, #40	@ 0x28
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f002 fafc 	bl	8008264 <RCCEx_PLL3_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c72:	e006      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c7a:	e002      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c7c:	bf00      	nop
 8005c7e:	e000      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ca0:	e003      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	d056      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cd6:	d038      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cdc:	d831      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ce2:	d034      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005ce4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ce8:	d82b      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cee:	d01d      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005cf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf4:	d825      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005cfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cfe:	d00a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d00:	e01f      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4ba2      	ldr	r3, [pc, #648]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	4aa1      	ldr	r2, [pc, #644]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d14:	e01c      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f002 f9ee 	bl	8008100 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d2a:	e011      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d30:	3328      	adds	r3, #40	@ 0x28
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f002 fa95 	bl	8008264 <RCCEx_PLL3_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d40:	e006      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d58:	4b8e      	ldr	r3, [pc, #568]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d68:	4a8a      	ldr	r2, [pc, #552]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d6e:	e003      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d03a      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9e:	2b30      	cmp	r3, #48	@ 0x30
 8005da0:	d01f      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005da2:	2b30      	cmp	r3, #48	@ 0x30
 8005da4:	d819      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d00c      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d815      	bhi.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d019      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d111      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db6:	4b77      	ldr	r3, [pc, #476]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dba:	4a76      	ldr	r2, [pc, #472]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dc2:	e011      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	3308      	adds	r3, #8
 8005dca:	2102      	movs	r1, #2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f002 f997 	bl	8008100 <RCCEx_PLL2_Config>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dd8:	e006      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de0:	e002      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005de2:	bf00      	nop
 8005de4:	e000      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005df0:	4b68      	ldr	r3, [pc, #416]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	4a65      	ldr	r2, [pc, #404]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e00:	430b      	orrs	r3, r1
 8005e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e04:	e003      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d051      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e38:	d035      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e3e:	d82e      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e44:	d031      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e4a:	d828      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e50:	d01a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e56:	d822      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e60:	d007      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e62:	e01c      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4b4b      	ldr	r3, [pc, #300]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	4a4a      	ldr	r2, [pc, #296]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e70:	e01c      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	3308      	adds	r3, #8
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f002 f940 	bl	8008100 <RCCEx_PLL2_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e86:	e011      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	3328      	adds	r3, #40	@ 0x28
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f002 f9e7 	bl	8008264 <RCCEx_PLL3_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e006      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ea4:	e002      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005eb4:	4b37      	ldr	r3, [pc, #220]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec2:	4a34      	ldr	r2, [pc, #208]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ec8:	e003      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ee8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005eec:	460b      	mov	r3, r1
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d056      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005efc:	d033      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005efe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f02:	d82c      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f08:	d02f      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f0e:	d826      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f14:	d02b      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f1a:	d820      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f20:	d012      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f26:	d81a      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d022      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f30:	d115      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	3308      	adds	r3, #8
 8005f38:	2101      	movs	r1, #1
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f002 f8e0 	bl	8008100 <RCCEx_PLL2_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f46:	e015      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4c:	3328      	adds	r3, #40	@ 0x28
 8005f4e:	2101      	movs	r1, #1
 8005f50:	4618      	mov	r0, r3
 8005f52:	f002 f987 	bl	8008264 <RCCEx_PLL3_Config>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f64:	e006      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f66:	bf00      	nop
 8005f68:	e004      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10d      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8a:	4a02      	ldr	r2, [pc, #8]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f90:	e006      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f92:	bf00      	nop
 8005f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	d055      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fcc:	d033      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fd2:	d82c      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd8:	d02f      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d826      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fe0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fe4:	d02b      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fea:	d820      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff0:	d012      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff6:	d81a      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d022      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006000:	d115      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	3308      	adds	r3, #8
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f002 f878 	bl	8008100 <RCCEx_PLL2_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006016:	e015      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	3328      	adds	r3, #40	@ 0x28
 800601e:	2101      	movs	r1, #1
 8006020:	4618      	mov	r0, r3
 8006022:	f002 f91f 	bl	8008264 <RCCEx_PLL3_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800602c:	e00a      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800604c:	4ba3      	ldr	r3, [pc, #652]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006050:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800605c:	4a9f      	ldr	r2, [pc, #636]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605e:	430b      	orrs	r3, r1
 8006060:	6593      	str	r3, [r2, #88]	@ 0x58
 8006062:	e003      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006086:	460b      	mov	r3, r1
 8006088:	4313      	orrs	r3, r2
 800608a:	d037      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006096:	d00e      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609c:	d816      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d018      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a6:	d111      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a8:	4b8c      	ldr	r3, [pc, #560]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	4a8b      	ldr	r2, [pc, #556]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060b4:	e00f      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	3308      	adds	r3, #8
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f002 f81e 	bl	8008100 <RCCEx_PLL2_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ca:	e004      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060d2:	e000      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060de:	4b7f      	ldr	r3, [pc, #508]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ec:	4a7b      	ldr	r2, [pc, #492]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800610c:	2300      	movs	r3, #0
 800610e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006112:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006116:	460b      	mov	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	d039      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006122:	2b03      	cmp	r3, #3
 8006124:	d81c      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006126:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006169 	.word	0x08006169
 8006130:	0800613d 	.word	0x0800613d
 8006134:	0800614b 	.word	0x0800614b
 8006138:	08006169 	.word	0x08006169
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613c:	4b67      	ldr	r3, [pc, #412]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	4a66      	ldr	r2, [pc, #408]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006148:	e00f      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614e:	3308      	adds	r3, #8
 8006150:	2102      	movs	r1, #2
 8006152:	4618      	mov	r0, r3
 8006154:	f001 ffd4 	bl	8008100 <RCCEx_PLL2_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800615e:	e004      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006166:	e000      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006172:	4b5a      	ldr	r3, [pc, #360]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006176:	f023 0103 	bic.w	r1, r3, #3
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006180:	4a56      	ldr	r2, [pc, #344]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006182:	430b      	orrs	r3, r1
 8006184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006186:	e003      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800619c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061aa:	460b      	mov	r3, r1
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f000 809f 	beq.w	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b2:	4b4b      	ldr	r3, [pc, #300]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a4a      	ldr	r2, [pc, #296]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061be:	f7fc fb05 	bl	80027cc <HAL_GetTick>
 80061c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061c6:	e00b      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c8:	f7fc fb00 	bl	80027cc <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b64      	cmp	r3, #100	@ 0x64
 80061d6:	d903      	bls.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061de:	e005      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e0:	4b3f      	ldr	r3, [pc, #252]	@ (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ed      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80061ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d179      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061f4:	4b39      	ldr	r3, [pc, #228]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006200:	4053      	eors	r3, r2
 8006202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006206:	2b00      	cmp	r3, #0
 8006208:	d015      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800620a:	4b34      	ldr	r3, [pc, #208]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006212:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006216:	4b31      	ldr	r3, [pc, #196]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621a:	4a30      	ldr	r2, [pc, #192]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800621c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006220:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006222:	4b2e      	ldr	r3, [pc, #184]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006226:	4a2d      	ldr	r2, [pc, #180]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800622c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800622e:	4a2b      	ldr	r2, [pc, #172]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006234:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800623e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006242:	d118      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fc fac2 	bl	80027cc <HAL_GetTick>
 8006248:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800624c:	e00d      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624e:	f7fc fabd 	bl	80027cc <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006258:	1ad2      	subs	r2, r2, r3
 800625a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800625e:	429a      	cmp	r2, r3
 8006260:	d903      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006268:	e005      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626a:	4b1c      	ldr	r3, [pc, #112]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0eb      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627a:	2b00      	cmp	r3, #0
 800627c:	d129      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800628e:	d10e      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006290:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062a0:	091a      	lsrs	r2, r3, #4
 80062a2:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	4a0d      	ldr	r2, [pc, #52]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6113      	str	r3, [r2, #16]
 80062ac:	e005      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062ae:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	4a0a      	ldr	r2, [pc, #40]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	4b08      	ldr	r3, [pc, #32]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ca:	4a04      	ldr	r2, [pc, #16]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d0:	e00e      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80062da:	e009      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80062dc:	58024400 	.word	0x58024400
 80062e0:	58024800 	.word	0x58024800
 80062e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f002 0301 	and.w	r3, r2, #1
 80062fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006300:	2300      	movs	r3, #0
 8006302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006306:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	f000 8089 	beq.w	8006424 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006318:	2b28      	cmp	r3, #40	@ 0x28
 800631a:	d86b      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800631c:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	080063fd 	.word	0x080063fd
 8006328:	080063f5 	.word	0x080063f5
 800632c:	080063f5 	.word	0x080063f5
 8006330:	080063f5 	.word	0x080063f5
 8006334:	080063f5 	.word	0x080063f5
 8006338:	080063f5 	.word	0x080063f5
 800633c:	080063f5 	.word	0x080063f5
 8006340:	080063f5 	.word	0x080063f5
 8006344:	080063c9 	.word	0x080063c9
 8006348:	080063f5 	.word	0x080063f5
 800634c:	080063f5 	.word	0x080063f5
 8006350:	080063f5 	.word	0x080063f5
 8006354:	080063f5 	.word	0x080063f5
 8006358:	080063f5 	.word	0x080063f5
 800635c:	080063f5 	.word	0x080063f5
 8006360:	080063f5 	.word	0x080063f5
 8006364:	080063df 	.word	0x080063df
 8006368:	080063f5 	.word	0x080063f5
 800636c:	080063f5 	.word	0x080063f5
 8006370:	080063f5 	.word	0x080063f5
 8006374:	080063f5 	.word	0x080063f5
 8006378:	080063f5 	.word	0x080063f5
 800637c:	080063f5 	.word	0x080063f5
 8006380:	080063f5 	.word	0x080063f5
 8006384:	080063fd 	.word	0x080063fd
 8006388:	080063f5 	.word	0x080063f5
 800638c:	080063f5 	.word	0x080063f5
 8006390:	080063f5 	.word	0x080063f5
 8006394:	080063f5 	.word	0x080063f5
 8006398:	080063f5 	.word	0x080063f5
 800639c:	080063f5 	.word	0x080063f5
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	080063f5 	.word	0x080063f5
 80063ac:	080063f5 	.word	0x080063f5
 80063b0:	080063f5 	.word	0x080063f5
 80063b4:	080063f5 	.word	0x080063f5
 80063b8:	080063f5 	.word	0x080063f5
 80063bc:	080063f5 	.word	0x080063f5
 80063c0:	080063f5 	.word	0x080063f5
 80063c4:	080063fd 	.word	0x080063fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063cc:	3308      	adds	r3, #8
 80063ce:	2101      	movs	r1, #1
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 fe95 	bl	8008100 <RCCEx_PLL2_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063dc:	e00f      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	3328      	adds	r3, #40	@ 0x28
 80063e4:	2101      	movs	r1, #1
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 ff3c 	bl	8008264 <RCCEx_PLL3_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063f2:	e004      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063fa:	e000      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80063fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006406:	4bbf      	ldr	r3, [pc, #764]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006414:	4abb      	ldr	r2, [pc, #748]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006416:	430b      	orrs	r3, r1
 8006418:	6553      	str	r3, [r2, #84]	@ 0x54
 800641a:	e003      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f002 0302 	and.w	r3, r2, #2
 8006430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800643a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800643e:	460b      	mov	r3, r1
 8006440:	4313      	orrs	r3, r2
 8006442:	d041      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800644a:	2b05      	cmp	r3, #5
 800644c:	d824      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800644e:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	080064a1 	.word	0x080064a1
 8006458:	0800646d 	.word	0x0800646d
 800645c:	08006483 	.word	0x08006483
 8006460:	080064a1 	.word	0x080064a1
 8006464:	080064a1 	.word	0x080064a1
 8006468:	080064a1 	.word	0x080064a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	3308      	adds	r3, #8
 8006472:	2101      	movs	r1, #1
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fe43 	bl	8008100 <RCCEx_PLL2_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006480:	e00f      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	3328      	adds	r3, #40	@ 0x28
 8006488:	2101      	movs	r1, #1
 800648a:	4618      	mov	r0, r3
 800648c:	f001 feea 	bl	8008264 <RCCEx_PLL3_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006496:	e004      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800649e:	e000      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064aa:	4b96      	ldr	r3, [pc, #600]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ae:	f023 0107 	bic.w	r1, r3, #7
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064b8:	4a92      	ldr	r2, [pc, #584]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064ba:	430b      	orrs	r3, r1
 80064bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80064be:	e003      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f002 0304 	and.w	r3, r2, #4
 80064d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	d044      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	d825      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80064f4:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006549 	.word	0x08006549
 8006500:	08006515 	.word	0x08006515
 8006504:	0800652b 	.word	0x0800652b
 8006508:	08006549 	.word	0x08006549
 800650c:	08006549 	.word	0x08006549
 8006510:	08006549 	.word	0x08006549
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	3308      	adds	r3, #8
 800651a:	2101      	movs	r1, #1
 800651c:	4618      	mov	r0, r3
 800651e:	f001 fdef 	bl	8008100 <RCCEx_PLL2_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006528:	e00f      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	3328      	adds	r3, #40	@ 0x28
 8006530:	2101      	movs	r1, #1
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fe96 	bl	8008264 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800653e:	e004      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006546:	e000      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006552:	4b6c      	ldr	r3, [pc, #432]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006556:	f023 0107 	bic.w	r1, r3, #7
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006562:	4a68      	ldr	r2, [pc, #416]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006564:	430b      	orrs	r3, r1
 8006566:	6593      	str	r3, [r2, #88]	@ 0x58
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f002 0320 	and.w	r3, r2, #32
 800657e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d055      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800659e:	d033      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065a4:	d82c      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065aa:	d02f      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b0:	d826      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065b6:	d02b      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065bc:	d820      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c2:	d012      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c8:	d81a      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d022      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065d2:	d115      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d8:	3308      	adds	r3, #8
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fd8f 	bl	8008100 <RCCEx_PLL2_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065e8:	e015      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	3328      	adds	r3, #40	@ 0x28
 80065f0:	2102      	movs	r1, #2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fe36 	bl	8008264 <RCCEx_PLL3_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065fe:	e00a      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006606:	e006      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006608:	bf00      	nop
 800660a:	e004      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800660c:	bf00      	nop
 800660e:	e002      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800661e:	4b39      	ldr	r3, [pc, #228]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006622:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662e:	4a35      	ldr	r2, [pc, #212]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006630:	430b      	orrs	r3, r1
 8006632:	6553      	str	r3, [r2, #84]	@ 0x54
 8006634:	e003      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800664a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006654:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d058      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006666:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800666a:	d033      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800666c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006670:	d82c      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006676:	d02f      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667c:	d826      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800667e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006682:	d02b      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006688:	d820      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800668a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800668e:	d012      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006694:	d81a      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d022      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669e:	d115      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	3308      	adds	r3, #8
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 fd29 	bl	8008100 <RCCEx_PLL2_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066b4:	e015      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	3328      	adds	r3, #40	@ 0x28
 80066bc:	2102      	movs	r1, #2
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fdd0 	bl	8008264 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066ca:	e00a      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d2:	e006      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066d4:	bf00      	nop
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10e      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066ea:	4b06      	ldr	r3, [pc, #24]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066fa:	4a02      	ldr	r2, [pc, #8]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006702:	bf00      	nop
 8006704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800671c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006720:	2300      	movs	r3, #0
 8006722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006726:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800672a:	460b      	mov	r3, r1
 800672c:	4313      	orrs	r3, r2
 800672e:	d055      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006738:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800673c:	d033      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800673e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006742:	d82c      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006748:	d02f      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800674a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800674e:	d826      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006750:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006754:	d02b      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006756:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800675a:	d820      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800675c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006760:	d012      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006766:	d81a      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d022      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006770:	d115      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	3308      	adds	r3, #8
 8006778:	2100      	movs	r1, #0
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fcc0 	bl	8008100 <RCCEx_PLL2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006786:	e015      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	3328      	adds	r3, #40	@ 0x28
 800678e:	2102      	movs	r1, #2
 8006790:	4618      	mov	r0, r3
 8006792:	f001 fd67 	bl	8008264 <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800679c:	e00a      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a4:	e006      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067a6:	bf00      	nop
 80067a8:	e004      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10b      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067cc:	4a9d      	ldr	r2, [pc, #628]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ce:	430b      	orrs	r3, r1
 80067d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d2:	e003      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f002 0308 	and.w	r3, r2, #8
 80067e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d01e      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006808:	d10c      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680e:	3328      	adds	r3, #40	@ 0x28
 8006810:	2102      	movs	r1, #2
 8006812:	4618      	mov	r0, r3
 8006814:	f001 fd26 	bl	8008264 <RCCEx_PLL3_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006824:	4b87      	ldr	r3, [pc, #540]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006828:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006834:	4a83      	ldr	r2, [pc, #524]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006836:	430b      	orrs	r3, r1
 8006838:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f002 0310 	and.w	r3, r2, #16
 8006846:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800684a:	2300      	movs	r3, #0
 800684c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006850:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006854:	460b      	mov	r3, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	d01e      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006866:	d10c      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	3328      	adds	r3, #40	@ 0x28
 800686e:	2102      	movs	r1, #2
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fcf7 	bl	8008264 <RCCEx_PLL3_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006882:	4b70      	ldr	r3, [pc, #448]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006892:	4a6c      	ldr	r2, [pc, #432]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d03e      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068c4:	d022      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ca:	d81b      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d4:	d00b      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068d6:	e015      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068dc:	3308      	adds	r3, #8
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fc0d 	bl	8008100 <RCCEx_PLL2_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068ec:	e00f      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f2:	3328      	adds	r3, #40	@ 0x28
 80068f4:	2102      	movs	r1, #2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 fcb4 	bl	8008264 <RCCEx_PLL3_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006902:	e004      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800690a:	e000      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800690c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006916:	4b4b      	ldr	r3, [pc, #300]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006926:	4a47      	ldr	r2, [pc, #284]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006928:	430b      	orrs	r3, r1
 800692a:	6593      	str	r3, [r2, #88]	@ 0x58
 800692c:	e003      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006942:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006944:	2300      	movs	r3, #0
 8006946:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006948:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d03b      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800695e:	d01f      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006960:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006964:	d818      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800696a:	d003      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800696c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006970:	d007      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006972:	e011      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006974:	4b33      	ldr	r3, [pc, #204]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	4a32      	ldr	r2, [pc, #200]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006980:	e00f      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	3328      	adds	r3, #40	@ 0x28
 8006988:	2101      	movs	r1, #1
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fc6a 	bl	8008264 <RCCEx_PLL3_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069aa:	4b26      	ldr	r3, [pc, #152]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	6553      	str	r3, [r2, #84]	@ 0x54
 80069c0:	e003      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80069d8:	2300      	movs	r3, #0
 80069da:	677b      	str	r3, [r7, #116]	@ 0x74
 80069dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069e0:	460b      	mov	r3, r1
 80069e2:	4313      	orrs	r3, r2
 80069e4:	d034      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f4:	d007      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80069f6:	e011      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f8:	4b12      	ldr	r3, [pc, #72]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	4a11      	ldr	r2, [pc, #68]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a04:	e00e      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fb76 	bl	8008100 <RCCEx_PLL2_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10d      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a3a:	4a02      	ldr	r2, [pc, #8]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a40:	e006      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a42:	bf00      	nop
 8006a44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a5e:	2300      	movs	r3, #0
 8006a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a66:	460b      	mov	r3, r1
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	d00c      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	3328      	adds	r3, #40	@ 0x28
 8006a72:	2102      	movs	r1, #2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 fbf5 	bl	8008264 <RCCEx_PLL3_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a92:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a94:	2300      	movs	r3, #0
 8006a96:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	d038      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aae:	d018      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab4:	d811      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aba:	d014      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac0:	d80b      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d011      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aca:	d106      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006acc:	4bc3      	ldr	r3, [pc, #780]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad0:	4ac2      	ldr	r2, [pc, #776]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ad8:	e008      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae0:	e004      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006af4:	4bb9      	ldr	r3, [pc, #740]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b04:	4ab5      	ldr	r2, [pc, #724]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b0a:	e003      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b22:	2300      	movs	r3, #0
 8006b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d009      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b30:	4baa      	ldr	r3, [pc, #680]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b3e:	4aa7      	ldr	r2, [pc, #668]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b52:	2300      	movs	r3, #0
 8006b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	d00a      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b60:	4b9e      	ldr	r3, [pc, #632]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b70:	4a9a      	ldr	r2, [pc, #616]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b84:	2300      	movs	r3, #0
 8006b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b92:	4b92      	ldr	r3, [pc, #584]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ba0:	4a8e      	ldr	r2, [pc, #568]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bc2:	4b86      	ldr	r3, [pc, #536]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	4a85      	ldr	r2, [pc, #532]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bcc:	6113      	str	r3, [r2, #16]
 8006bce:	4b83      	ldr	r3, [pc, #524]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd0:	6919      	ldr	r1, [r3, #16]
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006bda:	4a80      	ldr	r2, [pc, #512]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bee:	2300      	movs	r3, #0
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bfc:	4b77      	ldr	r3, [pc, #476]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0a:	4a74      	ldr	r2, [pc, #464]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1e:	2300      	movs	r3, #0
 8006c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c2c:	4b6b      	ldr	r3, [pc, #428]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c3c:	4a67      	ldr	r2, [pc, #412]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d011      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	3308      	adds	r3, #8
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 fa4a 	bl	8008100 <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6239      	str	r1, [r7, #32]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d011      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 fa2a 	bl	8008100 <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	2100      	movs	r1, #0
 8006ccc:	61b9      	str	r1, [r7, #24]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	d011      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	2102      	movs	r1, #2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fa0a 	bl	8008100 <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6139      	str	r1, [r7, #16]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d011      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	3328      	adds	r3, #40	@ 0x28
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 fa9c 	bl	8008264 <RCCEx_PLL3_Config>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	d011      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d62:	3328      	adds	r3, #40	@ 0x28
 8006d64:	2101      	movs	r1, #1
 8006d66:	4618      	mov	r0, r3
 8006d68:	f001 fa7c 	bl	8008264 <RCCEx_PLL3_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	d011      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	3328      	adds	r3, #40	@ 0x28
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fa5c 	bl	8008264 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006dc2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ddc:	58024400 	.word	0x58024400

08006de0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b090      	sub	sp, #64	@ 0x40
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006df2:	430b      	orrs	r3, r1
 8006df4:	f040 8094 	bne.w	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006df8:	4b9e      	ldr	r3, [pc, #632]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	f200 8087 	bhi.w	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e25 	.word	0x08006e25
 8006e14:	08006e4d 	.word	0x08006e4d
 8006e18:	08006e75 	.word	0x08006e75
 8006e1c:	08006f11 	.word	0x08006f11
 8006e20:	08006e9d 	.word	0x08006e9d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e24:	4b93      	ldr	r3, [pc, #588]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e30:	d108      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f810 	bl	8007e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e40:	f000 bd45 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e48:	f000 bd41 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e4c:	4b89      	ldr	r3, [pc, #548]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e58:	d108      	bne.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e5a:	f107 0318 	add.w	r3, r7, #24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fd54 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e68:	f000 bd31 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e70:	f000 bd2d 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e74:	4b7f      	ldr	r3, [pc, #508]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e80:	d108      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fe94 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e90:	f000 bd1d 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e98:	f000 bd19 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e9c:	4b75      	ldr	r3, [pc, #468]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ea4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ea6:	4b73      	ldr	r3, [pc, #460]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d109      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb8:	4b6e      	ldr	r3, [pc, #440]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	08db      	lsrs	r3, r3, #3
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	4a6d      	ldr	r2, [pc, #436]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eca:	e01f      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ecc:	4b69      	ldr	r3, [pc, #420]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ee0:	d102      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ee2:	4b66      	ldr	r3, [pc, #408]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee6:	e011      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ee8:	4b62      	ldr	r3, [pc, #392]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006efc:	d102      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006efe:	4b60      	ldr	r3, [pc, #384]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f02:	e003      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f08:	f000 bce1 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f0c:	f000 bcdf 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f10:	4b5c      	ldr	r3, [pc, #368]	@ (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f14:	f000 bcdb 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1c:	f000 bcd7 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f24:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	f040 80ad 	bne.w	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f2e:	4b51      	ldr	r3, [pc, #324]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f32:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006f36:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f3e:	d056      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f46:	f200 8090 	bhi.w	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f4e:	f000 8088 	beq.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f56:	f200 8088 	bhi.w	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	2b80      	cmp	r3, #128	@ 0x80
 8006f5e:	d032      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	2b80      	cmp	r3, #128	@ 0x80
 8006f64:	f200 8081 	bhi.w	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	2b40      	cmp	r3, #64	@ 0x40
 8006f72:	d014      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f74:	e079      	b.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f76:	4b3f      	ldr	r3, [pc, #252]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f82:	d108      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 ff67 	bl	8007e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f92:	f000 bc9c 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9a:	f000 bc98 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f9e:	4b35      	ldr	r3, [pc, #212]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006faa:	d108      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fac:	f107 0318 	add.w	r3, r7, #24
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fcab 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fba:	f000 bc88 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc2:	f000 bc84 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd2:	d108      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fdeb 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe2:	f000 bc74 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fea:	f000 bc70 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fee:	4b21      	ldr	r3, [pc, #132]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b04      	cmp	r3, #4
 8007002:	d10c      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800700a:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	08db      	lsrs	r3, r3, #3
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	4a18      	ldr	r2, [pc, #96]	@ (8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007016:	fa22 f303 	lsr.w	r3, r2, r3
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800701c:	e01f      	b.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800701e:	4b15      	ldr	r3, [pc, #84]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800702a:	d106      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800702c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007032:	d102      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007034:	4b11      	ldr	r3, [pc, #68]	@ (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007038:	e011      	b.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800703a:	4b0e      	ldr	r3, [pc, #56]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007046:	d106      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800704e:	d102      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007050:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007054:	e003      	b.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800705a:	f000 bc38 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800705e:	f000 bc36 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007062:	4b08      	ldr	r3, [pc, #32]	@ (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007066:	f000 bc32 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800706e:	f000 bc2e 	b.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
 8007078:	03d09000 	.word	0x03d09000
 800707c:	003d0900 	.word	0x003d0900
 8007080:	017d7840 	.word	0x017d7840
 8007084:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007090:	430b      	orrs	r3, r1
 8007092:	f040 809c 	bne.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007096:	4b9e      	ldr	r3, [pc, #632]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800709e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070a6:	d054      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070ae:	f200 808b 	bhi.w	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070b8:	f000 8083 	beq.w	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070c2:	f200 8081 	bhi.w	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070cc:	d02f      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80070ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070d4:	d878      	bhi.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070e2:	d012      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80070e4:	e070      	b.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070f2:	d107      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 feaf 	bl	8007e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007102:	e3e4      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007108:	e3e1      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800710a:	4b81      	ldr	r3, [pc, #516]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007116:	d107      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007118:	f107 0318 	add.w	r3, r7, #24
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fbf5 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007126:	e3d2      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712c:	e3cf      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800712e:	4b78      	ldr	r3, [pc, #480]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800713a:	d107      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800713c:	f107 030c 	add.w	r3, r7, #12
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fd37 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800714a:	e3c0      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007150:	e3bd      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007152:	4b6f      	ldr	r3, [pc, #444]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007156:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800715c:	4b6c      	ldr	r3, [pc, #432]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b04      	cmp	r3, #4
 8007166:	d10c      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800716e:	4b68      	ldr	r3, [pc, #416]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	08db      	lsrs	r3, r3, #3
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	4a66      	ldr	r2, [pc, #408]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800717a:	fa22 f303 	lsr.w	r3, r2, r3
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007180:	e01e      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007182:	4b63      	ldr	r3, [pc, #396]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800718e:	d106      	bne.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007196:	d102      	bne.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007198:	4b5f      	ldr	r3, [pc, #380]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800719c:	e010      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800719e:	4b5c      	ldr	r3, [pc, #368]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071aa:	d106      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80071ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071b2:	d102      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071b4:	4b59      	ldr	r3, [pc, #356]	@ (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b8:	e002      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071be:	e386      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071c0:	e385      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071c2:	4b57      	ldr	r3, [pc, #348]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c6:	e382      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071cc:	e37f      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80071d6:	430b      	orrs	r3, r1
 80071d8:	f040 80a7 	bne.w	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80071dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80071e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071ec:	d055      	beq.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071f4:	f200 8096 	bhi.w	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071fe:	f000 8084 	beq.w	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007208:	f200 808c 	bhi.w	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007212:	d030      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800721a:	f200 8083 	bhi.w	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800722a:	d012      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800722c:	e07a      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800722e:	4b38      	ldr	r3, [pc, #224]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800723a:	d107      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800723c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fe0b 	bl	8007e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800724a:	e340      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007250:	e33d      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007252:	4b2f      	ldr	r3, [pc, #188]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800725a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800725e:	d107      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007260:	f107 0318 	add.w	r3, r7, #24
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fb51 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726e:	e32e      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007274:	e32b      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007276:	4b26      	ldr	r3, [pc, #152]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800727e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007282:	d107      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007284:	f107 030c 	add.w	r3, r7, #12
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fc93 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007292:	e31c      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007298:	e319      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800729a:	4b1d      	ldr	r3, [pc, #116]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800729c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800729e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d10c      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80072b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072b6:	4b16      	ldr	r3, [pc, #88]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	08db      	lsrs	r3, r3, #3
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	4a14      	ldr	r2, [pc, #80]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072c8:	e01e      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072ca:	4b11      	ldr	r3, [pc, #68]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d6:	d106      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80072d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072de:	d102      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072e4:	e010      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f2:	d106      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80072f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072fa:	d102      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072fc:	4b07      	ldr	r3, [pc, #28]	@ (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007306:	e2e2      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007308:	e2e1      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800730a:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800730c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800730e:	e2de      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007310:	58024400 	.word	0x58024400
 8007314:	03d09000 	.word	0x03d09000
 8007318:	003d0900 	.word	0x003d0900
 800731c:	017d7840 	.word	0x017d7840
 8007320:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007328:	e2d1      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800732a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800732e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007332:	430b      	orrs	r3, r1
 8007334:	f040 809c 	bne.w	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007338:	4b93      	ldr	r3, [pc, #588]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800733a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007340:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007348:	d054      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007350:	f200 808b 	bhi.w	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800735a:	f000 8083 	beq.w	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007364:	f200 8081 	bhi.w	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736e:	d02f      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007376:	d878      	bhi.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800737e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007384:	d012      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007386:	e070      	b.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007388:	4b7f      	ldr	r3, [pc, #508]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007390:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007394:	d107      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fd5e 	bl	8007e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a4:	e293      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073aa:	e290      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073ac:	4b76      	ldr	r3, [pc, #472]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b8:	d107      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ba:	f107 0318 	add.w	r3, r7, #24
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 faa4 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c8:	e281      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ce:	e27e      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073d0:	4b6d      	ldr	r3, [pc, #436]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073dc:	d107      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073de:	f107 030c 	add.w	r3, r7, #12
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fbe6 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ec:	e26f      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f2:	e26c      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073f4:	4b64      	ldr	r3, [pc, #400]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073fe:	4b62      	ldr	r3, [pc, #392]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b04      	cmp	r3, #4
 8007408:	d10c      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800740a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007410:	4b5d      	ldr	r3, [pc, #372]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	08db      	lsrs	r3, r3, #3
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	4a5c      	ldr	r2, [pc, #368]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
 8007420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007422:	e01e      	b.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007424:	4b58      	ldr	r3, [pc, #352]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800742c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007430:	d106      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007438:	d102      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800743a:	4b55      	ldr	r3, [pc, #340]	@ (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800743c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800743e:	e010      	b.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007440:	4b51      	ldr	r3, [pc, #324]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744c:	d106      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007454:	d102      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007456:	4b4f      	ldr	r3, [pc, #316]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800745a:	e002      	b.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007460:	e235      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007462:	e234      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007464:	4b4c      	ldr	r3, [pc, #304]	@ (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007468:	e231      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800746e:	e22e      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007474:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007478:	430b      	orrs	r3, r1
 800747a:	f040 808f 	bne.w	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800747e:	4b42      	ldr	r3, [pc, #264]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007482:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007486:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800748e:	d06b      	beq.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007492:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007496:	d874      	bhi.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800749e:	d056      	beq.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80074a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074a6:	d86c      	bhi.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074ae:	d03b      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074b6:	d864      	bhi.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074be:	d021      	beq.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80074c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074c6:	d85c      	bhi.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d004      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80074ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d4:	d004      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80074d6:	e054      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80074d8:	f7fe fa4c 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 80074dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074de:	e1f6      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074e0:	4b29      	ldr	r3, [pc, #164]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ec:	d107      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ee:	f107 0318 	add.w	r3, r7, #24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fa0a 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074fc:	e1e7      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007502:	e1e4      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007504:	4b20      	ldr	r3, [pc, #128]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800750c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007510:	d107      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007512:	f107 030c 	add.w	r3, r7, #12
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fb4c 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007520:	e1d5      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007526:	e1d2      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007528:	4b17      	ldr	r3, [pc, #92]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b04      	cmp	r3, #4
 8007532:	d109      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007534:	4b14      	ldr	r3, [pc, #80]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	08db      	lsrs	r3, r3, #3
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	4a13      	ldr	r2, [pc, #76]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007540:	fa22 f303 	lsr.w	r3, r2, r3
 8007544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007546:	e1c2      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754c:	e1bf      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800754e:	4b0e      	ldr	r3, [pc, #56]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800755a:	d102      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800755c:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800755e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007560:	e1b5      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007566:	e1b2      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007568:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007574:	d102      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007576:	4b07      	ldr	r3, [pc, #28]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800757a:	e1a8      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007580:	e1a5      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007586:	e1a2      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007588:	58024400 	.word	0x58024400
 800758c:	03d09000 	.word	0x03d09000
 8007590:	003d0900 	.word	0x003d0900
 8007594:	017d7840 	.word	0x017d7840
 8007598:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800759c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80075a4:	430b      	orrs	r3, r1
 80075a6:	d173      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075a8:	4b9c      	ldr	r3, [pc, #624]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075b8:	d02f      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80075ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c0:	d863      	bhi.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80075c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ce:	d012      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80075d0:	e05b      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075d2:	4b92      	ldr	r3, [pc, #584]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075de:	d107      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e0:	f107 0318 	add.w	r3, r7, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f991 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ee:	e16e      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f4:	e16b      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075f6:	4b89      	ldr	r3, [pc, #548]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007602:	d107      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fad3 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007612:	e15c      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007618:	e159      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800761a:	4b80      	ldr	r3, [pc, #512]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800761c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800761e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007622:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007624:	4b7d      	ldr	r3, [pc, #500]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b04      	cmp	r3, #4
 800762e:	d10c      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007636:	4b79      	ldr	r3, [pc, #484]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	08db      	lsrs	r3, r3, #3
 800763c:	f003 0303 	and.w	r3, r3, #3
 8007640:	4a77      	ldr	r2, [pc, #476]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007642:	fa22 f303 	lsr.w	r3, r2, r3
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007648:	e01e      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800764a:	4b74      	ldr	r3, [pc, #464]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007656:	d106      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800765e:	d102      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007660:	4b70      	ldr	r3, [pc, #448]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007664:	e010      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007666:	4b6d      	ldr	r3, [pc, #436]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800766e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007672:	d106      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800767a:	d102      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800767c:	4b6a      	ldr	r3, [pc, #424]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007680:	e002      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007686:	e122      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007688:	e121      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768e:	e11e      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007694:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007698:	430b      	orrs	r3, r1
 800769a:	d133      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800769c:	4b5f      	ldr	r3, [pc, #380]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800769e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b2:	d012      	beq.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80076b4:	e023      	b.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076b6:	4b59      	ldr	r3, [pc, #356]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076c2:	d107      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fbc7 	bl	8007e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076d2:	e0fc      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d8:	e0f9      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076da:	4b50      	ldr	r3, [pc, #320]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076e6:	d107      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e8:	f107 0318 	add.w	r3, r7, #24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 f90d 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f6:	e0ea      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fc:	e0e7      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007702:	e0e4      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007708:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800770c:	430b      	orrs	r3, r1
 800770e:	f040 808d 	bne.w	800782c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007712:	4b42      	ldr	r3, [pc, #264]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007716:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800771a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007722:	d06b      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800772a:	d874      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007732:	d056      	beq.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773a:	d86c      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007742:	d03b      	beq.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800774a:	d864      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007752:	d021      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800775a:	d85c      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007768:	d004      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800776a:	e054      	b.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800776c:	f000 f8b8 	bl	80078e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007770:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007772:	e0ac      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007774:	4b29      	ldr	r3, [pc, #164]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800777c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007780:	d107      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007782:	f107 0318 	add.w	r3, r7, #24
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f8c0 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007790:	e09d      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007796:	e09a      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007798:	4b20      	ldr	r3, [pc, #128]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a4:	d107      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a6:	f107 030c 	add.w	r3, r7, #12
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fa02 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b4:	e08b      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ba:	e088      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077bc:	4b17      	ldr	r3, [pc, #92]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d109      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077c8:	4b14      	ldr	r3, [pc, #80]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	08db      	lsrs	r3, r3, #3
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	4a13      	ldr	r2, [pc, #76]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077da:	e078      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e0:	e075      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077e2:	4b0e      	ldr	r3, [pc, #56]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ee:	d102      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80077f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f4:	e06b      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fa:	e068      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077fc:	4b07      	ldr	r3, [pc, #28]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007808:	d102      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800780a:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800780c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800780e:	e05e      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007814:	e05b      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781a:	e058      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800781c:	58024400 	.word	0x58024400
 8007820:	03d09000 	.word	0x03d09000
 8007824:	003d0900 	.word	0x003d0900
 8007828:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800782c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007830:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007834:	430b      	orrs	r3, r1
 8007836:	d148      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007838:	4b27      	ldr	r3, [pc, #156]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800783a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007840:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007848:	d02a      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007850:	d838      	bhi.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800785e:	d00d      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007860:	e030      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007862:	4b1d      	ldr	r3, [pc, #116]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800786a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800786e:	d102      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007870:	4b1a      	ldr	r3, [pc, #104]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007874:	e02b      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800787a:	e028      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800787c:	4b16      	ldr	r3, [pc, #88]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007888:	d107      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800788a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fae4 	bl	8007e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007898:	e019      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789e:	e016      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078a0:	4b0d      	ldr	r3, [pc, #52]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ac:	d107      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ae:	f107 0318 	add.w	r3, r7, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f82a 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078bc:	e007      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c2:	e004      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c8:	e001      	b.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80078ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3740      	adds	r7, #64	@ 0x40
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	58024400 	.word	0x58024400
 80078dc:	017d7840 	.word	0x017d7840

080078e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80078e4:	f7fe f816 	bl	8005914 <HAL_RCC_GetHCLKFreq>
 80078e8:	4602      	mov	r2, r0
 80078ea:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	f003 0307 	and.w	r3, r3, #7
 80078f4:	4904      	ldr	r1, [pc, #16]	@ (8007908 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078f6:	5ccb      	ldrb	r3, [r1, r3]
 80078f8:	f003 031f 	and.w	r3, r3, #31
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007900:	4618      	mov	r0, r3
 8007902:	bd80      	pop	{r7, pc}
 8007904:	58024400 	.word	0x58024400
 8007908:	0800e114 	.word	0x0800e114

0800790c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800790c:	b480      	push	{r7}
 800790e:	b089      	sub	sp, #36	@ 0x24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007914:	4ba1      	ldr	r3, [pc, #644]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800791e:	4b9f      	ldr	r3, [pc, #636]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	0b1b      	lsrs	r3, r3, #12
 8007924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007928:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800792a:	4b9c      	ldr	r3, [pc, #624]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800792c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792e:	091b      	lsrs	r3, r3, #4
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007936:	4b99      	ldr	r3, [pc, #612]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793a:	08db      	lsrs	r3, r3, #3
 800793c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8111 	beq.w	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b02      	cmp	r3, #2
 800795e:	f000 8083 	beq.w	8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2b02      	cmp	r3, #2
 8007966:	f200 80a1 	bhi.w	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d056      	beq.n	8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007976:	e099      	b.n	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007978:	4b88      	ldr	r3, [pc, #544]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d02d      	beq.n	80079e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007984:	4b85      	ldr	r3, [pc, #532]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	08db      	lsrs	r3, r3, #3
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	4a84      	ldr	r2, [pc, #528]	@ (8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
 8007994:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b7b      	ldr	r3, [pc, #492]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079de:	e087      	b.n	8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80079ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f2:	4b6a      	ldr	r3, [pc, #424]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a22:	e065      	b.n	8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a36:	4b59      	ldr	r3, [pc, #356]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a66:	e043      	b.n	8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b48      	ldr	r3, [pc, #288]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aaa:	e021      	b.n	8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b37      	ldr	r3, [pc, #220]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007af0:	4b2a      	ldr	r3, [pc, #168]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	0a5b      	lsrs	r3, r3, #9
 8007af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b16:	ee17 2a90 	vmov	r2, s15
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b22:	0c1b      	lsrs	r3, r3, #16
 8007b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b44:	ee17 2a90 	vmov	r2, s15
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b4c:	4b13      	ldr	r3, [pc, #76]	@ (8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b50:	0e1b      	lsrs	r3, r3, #24
 8007b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b72:	ee17 2a90 	vmov	r2, s15
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b7a:	e008      	b.n	8007b8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	609a      	str	r2, [r3, #8]
}
 8007b8e:	bf00      	nop
 8007b90:	3724      	adds	r7, #36	@ 0x24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	03d09000 	.word	0x03d09000
 8007ba4:	46000000 	.word	0x46000000
 8007ba8:	4c742400 	.word	0x4c742400
 8007bac:	4a742400 	.word	0x4a742400
 8007bb0:	4bbebc20 	.word	0x4bbebc20

08007bb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b089      	sub	sp, #36	@ 0x24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bbc:	4ba1      	ldr	r3, [pc, #644]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bc6:	4b9f      	ldr	r3, [pc, #636]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bca:	0d1b      	lsrs	r3, r3, #20
 8007bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bd2:	4b9c      	ldr	r3, [pc, #624]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007bde:	4b99      	ldr	r3, [pc, #612]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be2:	08db      	lsrs	r3, r3, #3
 8007be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8111 	beq.w	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	f000 8083 	beq.w	8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	f200 80a1 	bhi.w	8007d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d056      	beq.n	8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c1e:	e099      	b.n	8007d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c20:	4b88      	ldr	r3, [pc, #544]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d02d      	beq.n	8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c2c:	4b85      	ldr	r3, [pc, #532]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	08db      	lsrs	r3, r3, #3
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	4a84      	ldr	r2, [pc, #528]	@ (8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c56:	4b7b      	ldr	r3, [pc, #492]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c86:	e087      	b.n	8007d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cca:	e065      	b.n	8007d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cde:	4b59      	ldr	r3, [pc, #356]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d0e:	e043      	b.n	8007d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d22:	4b48      	ldr	r3, [pc, #288]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d52:	e021      	b.n	8007d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d66:	4b37      	ldr	r3, [pc, #220]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d98:	4b2a      	ldr	r3, [pc, #168]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9c:	0a5b      	lsrs	r3, r3, #9
 8007d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dbe:	ee17 2a90 	vmov	r2, s15
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dca:	0c1b      	lsrs	r3, r3, #16
 8007dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dd0:	ee07 3a90 	vmov	s15, r3
 8007dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dec:	ee17 2a90 	vmov	r2, s15
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007df4:	4b13      	ldr	r3, [pc, #76]	@ (8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df8:	0e1b      	lsrs	r3, r3, #24
 8007dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e1a:	ee17 2a90 	vmov	r2, s15
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e22:	e008      	b.n	8007e36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	609a      	str	r2, [r3, #8]
}
 8007e36:	bf00      	nop
 8007e38:	3724      	adds	r7, #36	@ 0x24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400
 8007e48:	03d09000 	.word	0x03d09000
 8007e4c:	46000000 	.word	0x46000000
 8007e50:	4c742400 	.word	0x4c742400
 8007e54:	4a742400 	.word	0x4a742400
 8007e58:	4bbebc20 	.word	0x4bbebc20

08007e5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b089      	sub	sp, #36	@ 0x24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e64:	4ba0      	ldr	r3, [pc, #640]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e6e:	4b9e      	ldr	r3, [pc, #632]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e72:	091b      	lsrs	r3, r3, #4
 8007e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e7a:	4b9b      	ldr	r3, [pc, #620]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e84:	4b98      	ldr	r3, [pc, #608]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e88:	08db      	lsrs	r3, r3, #3
 8007e8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8111 	beq.w	80080ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	f000 8083 	beq.w	8007fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	f200 80a1 	bhi.w	8007ffa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d056      	beq.n	8007f72 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007ec4:	e099      	b.n	8007ffa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec6:	4b88      	ldr	r3, [pc, #544]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d02d      	beq.n	8007f2e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ed2:	4b85      	ldr	r3, [pc, #532]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	4a83      	ldr	r2, [pc, #524]	@ (80080ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007ede:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	ee07 3a90 	vmov	s15, r3
 8007ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007efc:	4b7a      	ldr	r3, [pc, #488]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f04:	ee07 3a90 	vmov	s15, r3
 8007f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f10:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80080f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f28:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f2c:	e087      	b.n	800803e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	ee07 3a90 	vmov	s15, r3
 8007f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f38:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80080f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f40:	4b69      	ldr	r3, [pc, #420]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f50:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f54:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80080f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f70:	e065      	b.n	800803e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80080f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f84:	4b58      	ldr	r3, [pc, #352]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f94:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f98:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80080f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fb4:	e043      	b.n	800803e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80080fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc8:	4b47      	ldr	r3, [pc, #284]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fdc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80080f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ff8:	e021      	b.n	800803e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008004:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80080f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800c:	4b36      	ldr	r3, [pc, #216]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800800e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008014:	ee07 3a90 	vmov	s15, r3
 8008018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008020:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80080f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008038:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800803c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800803e:	4b2a      	ldr	r3, [pc, #168]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	0a5b      	lsrs	r3, r3, #9
 8008044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008058:	edd7 6a07 	vldr	s13, [r7, #28]
 800805c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008064:	ee17 2a90 	vmov	r2, s15
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800806c:	4b1e      	ldr	r3, [pc, #120]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008070:	0c1b      	lsrs	r3, r3, #16
 8008072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008086:	edd7 6a07 	vldr	s13, [r7, #28]
 800808a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800808e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008092:	ee17 2a90 	vmov	r2, s15
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800809a:	4b13      	ldr	r3, [pc, #76]	@ (80080e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800809c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809e:	0e1b      	lsrs	r3, r3, #24
 80080a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c0:	ee17 2a90 	vmov	r2, s15
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080c8:	e008      	b.n	80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	609a      	str	r2, [r3, #8]
}
 80080dc:	bf00      	nop
 80080de:	3724      	adds	r7, #36	@ 0x24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	58024400 	.word	0x58024400
 80080ec:	03d09000 	.word	0x03d09000
 80080f0:	46000000 	.word	0x46000000
 80080f4:	4c742400 	.word	0x4c742400
 80080f8:	4a742400 	.word	0x4a742400
 80080fc:	4bbebc20 	.word	0x4bbebc20

08008100 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800810e:	4b53      	ldr	r3, [pc, #332]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d101      	bne.n	800811e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e099      	b.n	8008252 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800811e:	4b4f      	ldr	r3, [pc, #316]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a4e      	ldr	r2, [pc, #312]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008124:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812a:	f7fa fb4f 	bl	80027cc <HAL_GetTick>
 800812e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008130:	e008      	b.n	8008144 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008132:	f7fa fb4b 	bl	80027cc <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e086      	b.n	8008252 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008144:	4b45      	ldr	r3, [pc, #276]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f0      	bne.n	8008132 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008150:	4b42      	ldr	r3, [pc, #264]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008154:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	031b      	lsls	r3, r3, #12
 800815e:	493f      	ldr	r1, [pc, #252]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008160:	4313      	orrs	r3, r2
 8008162:	628b      	str	r3, [r1, #40]	@ 0x28
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	3b01      	subs	r3, #1
 800816a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	3b01      	subs	r3, #1
 8008174:	025b      	lsls	r3, r3, #9
 8008176:	b29b      	uxth	r3, r3
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	3b01      	subs	r3, #1
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	3b01      	subs	r3, #1
 800818e:	061b      	lsls	r3, r3, #24
 8008190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008194:	4931      	ldr	r1, [pc, #196]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800819a:	4b30      	ldr	r3, [pc, #192]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	492d      	ldr	r1, [pc, #180]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081ac:	4b2b      	ldr	r3, [pc, #172]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b0:	f023 0220 	bic.w	r2, r3, #32
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	4928      	ldr	r1, [pc, #160]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081be:	4b27      	ldr	r3, [pc, #156]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	4a26      	ldr	r2, [pc, #152]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081c4:	f023 0310 	bic.w	r3, r3, #16
 80081c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081ca:	4b24      	ldr	r3, [pc, #144]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081ce:	4b24      	ldr	r3, [pc, #144]	@ (8008260 <RCCEx_PLL2_Config+0x160>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	69d2      	ldr	r2, [r2, #28]
 80081d6:	00d2      	lsls	r2, r2, #3
 80081d8:	4920      	ldr	r1, [pc, #128]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081de:	4b1f      	ldr	r3, [pc, #124]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	4a1e      	ldr	r2, [pc, #120]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081e4:	f043 0310 	orr.w	r3, r3, #16
 80081e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081f0:	4b1a      	ldr	r3, [pc, #104]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f4:	4a19      	ldr	r2, [pc, #100]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 80081f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081fc:	e00f      	b.n	800821e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d106      	bne.n	8008212 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008204:	4b15      	ldr	r3, [pc, #84]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a14      	ldr	r2, [pc, #80]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 800820a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800820e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008210:	e005      	b.n	800821e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	4a11      	ldr	r2, [pc, #68]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800821c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800821e:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a0e      	ldr	r2, [pc, #56]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008224:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822a:	f7fa facf 	bl	80027cc <HAL_GetTick>
 800822e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008230:	e008      	b.n	8008244 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008232:	f7fa facb 	bl	80027cc <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e006      	b.n	8008252 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008244:	4b05      	ldr	r3, [pc, #20]	@ (800825c <RCCEx_PLL2_Config+0x15c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0f0      	beq.n	8008232 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400
 8008260:	ffff0007 	.word	0xffff0007

08008264 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008272:	4b53      	ldr	r3, [pc, #332]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d101      	bne.n	8008282 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e099      	b.n	80083b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008282:	4b4f      	ldr	r3, [pc, #316]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a4e      	ldr	r2, [pc, #312]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800828c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828e:	f7fa fa9d 	bl	80027cc <HAL_GetTick>
 8008292:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008294:	e008      	b.n	80082a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008296:	f7fa fa99 	bl	80027cc <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e086      	b.n	80083b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082a8:	4b45      	ldr	r3, [pc, #276]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f0      	bne.n	8008296 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082b4:	4b42      	ldr	r3, [pc, #264]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 80082b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	051b      	lsls	r3, r3, #20
 80082c2:	493f      	ldr	r1, [pc, #252]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	025b      	lsls	r3, r3, #9
 80082da:	b29b      	uxth	r3, r3
 80082dc:	431a      	orrs	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	041b      	lsls	r3, r3, #16
 80082e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	061b      	lsls	r3, r3, #24
 80082f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082f8:	4931      	ldr	r1, [pc, #196]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082fe:	4b30      	ldr	r3, [pc, #192]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	492d      	ldr	r1, [pc, #180]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 800830c:	4313      	orrs	r3, r2
 800830e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008310:	4b2b      	ldr	r3, [pc, #172]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008314:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	4928      	ldr	r1, [pc, #160]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 800831e:	4313      	orrs	r3, r2
 8008320:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008322:	4b27      	ldr	r3, [pc, #156]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008326:	4a26      	ldr	r2, [pc, #152]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800832c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800832e:	4b24      	ldr	r3, [pc, #144]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008332:	4b24      	ldr	r3, [pc, #144]	@ (80083c4 <RCCEx_PLL3_Config+0x160>)
 8008334:	4013      	ands	r3, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	69d2      	ldr	r2, [r2, #28]
 800833a:	00d2      	lsls	r2, r2, #3
 800833c:	4920      	ldr	r1, [pc, #128]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 800833e:	4313      	orrs	r3, r2
 8008340:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008342:	4b1f      	ldr	r3, [pc, #124]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008346:	4a1e      	ldr	r2, [pc, #120]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800834c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d106      	bne.n	8008362 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008354:	4b1a      	ldr	r3, [pc, #104]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008358:	4a19      	ldr	r2, [pc, #100]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 800835a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800835e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008360:	e00f      	b.n	8008382 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d106      	bne.n	8008376 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008368:	4b15      	ldr	r3, [pc, #84]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 800836a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836c:	4a14      	ldr	r2, [pc, #80]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 800836e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008372:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008374:	e005      	b.n	8008382 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008376:	4b12      	ldr	r3, [pc, #72]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837a:	4a11      	ldr	r2, [pc, #68]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 800837c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008380:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008382:	4b0f      	ldr	r3, [pc, #60]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a0e      	ldr	r2, [pc, #56]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 8008388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800838c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800838e:	f7fa fa1d 	bl	80027cc <HAL_GetTick>
 8008392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008394:	e008      	b.n	80083a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008396:	f7fa fa19 	bl	80027cc <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d901      	bls.n	80083a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e006      	b.n	80083b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083a8:	4b05      	ldr	r3, [pc, #20]	@ (80083c0 <RCCEx_PLL3_Config+0x15c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0f0      	beq.n	8008396 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	58024400 	.word	0x58024400
 80083c4:	ffff0007 	.word	0xffff0007

080083c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e049      	b.n	800846e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7f9 fef6 	bl	80021e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	4619      	mov	r1, r3
 8008406:	4610      	mov	r0, r2
 8008408:	f000 f99e 	bl	8008748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	d001      	beq.n	8008490 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e04c      	b.n	800852a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a26      	ldr	r2, [pc, #152]	@ (8008538 <HAL_TIM_Base_Start+0xc0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d022      	beq.n	80084e8 <HAL_TIM_Base_Start+0x70>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084aa:	d01d      	beq.n	80084e8 <HAL_TIM_Base_Start+0x70>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a22      	ldr	r2, [pc, #136]	@ (800853c <HAL_TIM_Base_Start+0xc4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d018      	beq.n	80084e8 <HAL_TIM_Base_Start+0x70>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a21      	ldr	r2, [pc, #132]	@ (8008540 <HAL_TIM_Base_Start+0xc8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d013      	beq.n	80084e8 <HAL_TIM_Base_Start+0x70>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008544 <HAL_TIM_Base_Start+0xcc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00e      	beq.n	80084e8 <HAL_TIM_Base_Start+0x70>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008548 <HAL_TIM_Base_Start+0xd0>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d009      	beq.n	80084e8 <HAL_TIM_Base_Start+0x70>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1c      	ldr	r2, [pc, #112]	@ (800854c <HAL_TIM_Base_Start+0xd4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d004      	beq.n	80084e8 <HAL_TIM_Base_Start+0x70>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008550 <HAL_TIM_Base_Start+0xd8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d115      	bne.n	8008514 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	4b19      	ldr	r3, [pc, #100]	@ (8008554 <HAL_TIM_Base_Start+0xdc>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b06      	cmp	r3, #6
 80084f8:	d015      	beq.n	8008526 <HAL_TIM_Base_Start+0xae>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008500:	d011      	beq.n	8008526 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0201 	orr.w	r2, r2, #1
 8008510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008512:	e008      	b.n	8008526 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	e000      	b.n	8008528 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40010000 	.word	0x40010000
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40010400 	.word	0x40010400
 800854c:	40001800 	.word	0x40001800
 8008550:	40014000 	.word	0x40014000
 8008554:	00010007 	.word	0x00010007

08008558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_TIM_ConfigClockSource+0x1c>
 8008570:	2302      	movs	r3, #2
 8008572:	e0dc      	b.n	800872e <HAL_TIM_ConfigClockSource+0x1d6>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	4b6a      	ldr	r3, [pc, #424]	@ (8008738 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008590:	4013      	ands	r3, r2
 8008592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800859a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a64      	ldr	r2, [pc, #400]	@ (800873c <HAL_TIM_ConfigClockSource+0x1e4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f000 80a9 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085b0:	4a62      	ldr	r2, [pc, #392]	@ (800873c <HAL_TIM_ConfigClockSource+0x1e4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f200 80ae 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085b8:	4a61      	ldr	r2, [pc, #388]	@ (8008740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f000 80a1 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085c0:	4a5f      	ldr	r2, [pc, #380]	@ (8008740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f200 80a6 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f000 8099 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085d0:	4a5c      	ldr	r2, [pc, #368]	@ (8008744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	f200 809e 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085dc:	f000 8091 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085e4:	f200 8096 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085ec:	f000 8089 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085f4:	f200 808e 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085fc:	d03e      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x124>
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008602:	f200 8087 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800860a:	f000 8086 	beq.w	800871a <HAL_TIM_ConfigClockSource+0x1c2>
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008612:	d87f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008614:	2b70      	cmp	r3, #112	@ 0x70
 8008616:	d01a      	beq.n	800864e <HAL_TIM_ConfigClockSource+0xf6>
 8008618:	2b70      	cmp	r3, #112	@ 0x70
 800861a:	d87b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800861c:	2b60      	cmp	r3, #96	@ 0x60
 800861e:	d050      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x16a>
 8008620:	2b60      	cmp	r3, #96	@ 0x60
 8008622:	d877      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008624:	2b50      	cmp	r3, #80	@ 0x50
 8008626:	d03c      	beq.n	80086a2 <HAL_TIM_ConfigClockSource+0x14a>
 8008628:	2b50      	cmp	r3, #80	@ 0x50
 800862a:	d873      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800862c:	2b40      	cmp	r3, #64	@ 0x40
 800862e:	d058      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x18a>
 8008630:	2b40      	cmp	r3, #64	@ 0x40
 8008632:	d86f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008634:	2b30      	cmp	r3, #48	@ 0x30
 8008636:	d064      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008638:	2b30      	cmp	r3, #48	@ 0x30
 800863a:	d86b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d060      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d867      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d05c      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d05a      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 800864c:	e062      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800865e:	f000 f991 	bl	8008984 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	609a      	str	r2, [r3, #8]
      break;
 800867a:	e04f      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800868c:	f000 f97a 	bl	8008984 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800869e:	609a      	str	r2, [r3, #8]
      break;
 80086a0:	e03c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ae:	461a      	mov	r2, r3
 80086b0:	f000 f8ea 	bl	8008888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2150      	movs	r1, #80	@ 0x50
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f944 	bl	8008948 <TIM_ITRx_SetConfig>
      break;
 80086c0:	e02c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ce:	461a      	mov	r2, r3
 80086d0:	f000 f909 	bl	80088e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2160      	movs	r1, #96	@ 0x60
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f934 	bl	8008948 <TIM_ITRx_SetConfig>
      break;
 80086e0:	e01c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 f8ca 	bl	8008888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2140      	movs	r1, #64	@ 0x40
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f924 	bl	8008948 <TIM_ITRx_SetConfig>
      break;
 8008700:	e00c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f000 f91b 	bl	8008948 <TIM_ITRx_SetConfig>
      break;
 8008712:	e003      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
      break;
 8008718:	e000      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800871a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	ffceff88 	.word	0xffceff88
 800873c:	00100040 	.word	0x00100040
 8008740:	00100030 	.word	0x00100030
 8008744:	00100020 	.word	0x00100020

08008748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a43      	ldr	r2, [pc, #268]	@ (8008868 <TIM_Base_SetConfig+0x120>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d013      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008766:	d00f      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a40      	ldr	r2, [pc, #256]	@ (800886c <TIM_Base_SetConfig+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a3f      	ldr	r2, [pc, #252]	@ (8008870 <TIM_Base_SetConfig+0x128>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a3e      	ldr	r2, [pc, #248]	@ (8008874 <TIM_Base_SetConfig+0x12c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a3d      	ldr	r2, [pc, #244]	@ (8008878 <TIM_Base_SetConfig+0x130>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d108      	bne.n	800879a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a32      	ldr	r2, [pc, #200]	@ (8008868 <TIM_Base_SetConfig+0x120>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d01f      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a8:	d01b      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a2f      	ldr	r2, [pc, #188]	@ (800886c <TIM_Base_SetConfig+0x124>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d017      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008870 <TIM_Base_SetConfig+0x128>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d013      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a2d      	ldr	r2, [pc, #180]	@ (8008874 <TIM_Base_SetConfig+0x12c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00f      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2c      	ldr	r2, [pc, #176]	@ (8008878 <TIM_Base_SetConfig+0x130>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00b      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2b      	ldr	r2, [pc, #172]	@ (800887c <TIM_Base_SetConfig+0x134>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d007      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2a      	ldr	r2, [pc, #168]	@ (8008880 <TIM_Base_SetConfig+0x138>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d003      	beq.n	80087e2 <TIM_Base_SetConfig+0x9a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a29      	ldr	r2, [pc, #164]	@ (8008884 <TIM_Base_SetConfig+0x13c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d108      	bne.n	80087f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a14      	ldr	r2, [pc, #80]	@ (8008868 <TIM_Base_SetConfig+0x120>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00f      	beq.n	800883a <TIM_Base_SetConfig+0xf2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a16      	ldr	r2, [pc, #88]	@ (8008878 <TIM_Base_SetConfig+0x130>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00b      	beq.n	800883a <TIM_Base_SetConfig+0xf2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a15      	ldr	r2, [pc, #84]	@ (800887c <TIM_Base_SetConfig+0x134>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d007      	beq.n	800883a <TIM_Base_SetConfig+0xf2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a14      	ldr	r2, [pc, #80]	@ (8008880 <TIM_Base_SetConfig+0x138>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d003      	beq.n	800883a <TIM_Base_SetConfig+0xf2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a13      	ldr	r2, [pc, #76]	@ (8008884 <TIM_Base_SetConfig+0x13c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d103      	bne.n	8008842 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	691a      	ldr	r2, [r3, #16]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f043 0204 	orr.w	r2, r3, #4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	601a      	str	r2, [r3, #0]
}
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40010400 	.word	0x40010400
 800887c:	40014000 	.word	0x40014000
 8008880:	40014400 	.word	0x40014400
 8008884:	40014800 	.word	0x40014800

08008888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f023 030a 	bic.w	r3, r3, #10
 80088c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f023 0210 	bic.w	r2, r3, #16
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4b09      	ldr	r3, [pc, #36]	@ (8008980 <TIM_ITRx_SetConfig+0x38>)
 800895c:	4013      	ands	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4313      	orrs	r3, r2
 8008966:	f043 0307 	orr.w	r3, r3, #7
 800896a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	609a      	str	r2, [r3, #8]
}
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	ffcfff8f 	.word	0xffcfff8f

08008984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800899e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	021a      	lsls	r2, r3, #8
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	431a      	orrs	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	609a      	str	r2, [r3, #8]
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089d8:	2302      	movs	r3, #2
 80089da:	e06d      	b.n	8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a30      	ldr	r2, [pc, #192]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d004      	beq.n	8008a10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d108      	bne.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a20      	ldr	r2, [pc, #128]	@ (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d022      	beq.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a4e:	d01d      	beq.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1d      	ldr	r2, [pc, #116]	@ (8008acc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d018      	beq.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1a      	ldr	r2, [pc, #104]	@ (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00e      	beq.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a15      	ldr	r2, [pc, #84]	@ (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d009      	beq.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a16      	ldr	r2, [pc, #88]	@ (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d004      	beq.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a15      	ldr	r2, [pc, #84]	@ (8008adc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d10c      	bne.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40010400 	.word	0x40010400
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	40000800 	.word	0x40000800
 8008ad4:	40000c00 	.word	0x40000c00
 8008ad8:	40001800 	.word	0x40001800
 8008adc:	40014000 	.word	0x40014000

08008ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e042      	b.n	8008b78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d106      	bne.n	8008b0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7f9 fb8d 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2224      	movs	r2, #36	@ 0x24
 8008b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0201 	bic.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fe1e 	bl	800976c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f8b3 	bl	8008c9c <UART_SetConfig>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e01b      	b.n	8008b78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0201 	orr.w	r2, r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fe9d 	bl	80098b0 <UART_CheckIdleState>
 8008b76:	4603      	mov	r3, r0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	@ 0x28
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d17b      	bne.n	8008c92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <HAL_UART_Transmit+0x26>
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e074      	b.n	8008c94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2221      	movs	r2, #33	@ 0x21
 8008bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bba:	f7f9 fe07 	bl	80027cc <HAL_GetTick>
 8008bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bd8:	d108      	bne.n	8008bec <HAL_UART_Transmit+0x6c>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d104      	bne.n	8008bec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	61bb      	str	r3, [r7, #24]
 8008bea:	e003      	b.n	8008bf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bf4:	e030      	b.n	8008c58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2180      	movs	r1, #128	@ 0x80
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 feff 	bl	8009a04 <UART_WaitOnFlagUntilTimeout>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e03d      	b.n	8008c94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	3302      	adds	r3, #2
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	e007      	b.n	8008c46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	3301      	adds	r3, #1
 8008c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1c8      	bne.n	8008bf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2140      	movs	r1, #64	@ 0x40
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fec8 	bl	8009a04 <UART_WaitOnFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e006      	b.n	8008c94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e000      	b.n	8008c94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008c92:	2302      	movs	r3, #2
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ca0:	b092      	sub	sp, #72	@ 0x48
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	4bbe      	ldr	r3, [pc, #760]	@ (8008fc4 <UART_SetConfig+0x328>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4ab3      	ldr	r2, [pc, #716]	@ (8008fc8 <UART_SetConfig+0x32c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d004      	beq.n	8008d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d04:	4313      	orrs	r3, r2
 8008d06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	4baf      	ldr	r3, [pc, #700]	@ (8008fcc <UART_SetConfig+0x330>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	6812      	ldr	r2, [r2, #0]
 8008d16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	f023 010f 	bic.w	r1, r3, #15
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4aa6      	ldr	r2, [pc, #664]	@ (8008fd0 <UART_SetConfig+0x334>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d177      	bne.n	8008e2c <UART_SetConfig+0x190>
 8008d3c:	4ba5      	ldr	r3, [pc, #660]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d44:	2b28      	cmp	r3, #40	@ 0x28
 8008d46:	d86d      	bhi.n	8008e24 <UART_SetConfig+0x188>
 8008d48:	a201      	add	r2, pc, #4	@ (adr r2, 8008d50 <UART_SetConfig+0xb4>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008df5 	.word	0x08008df5
 8008d54:	08008e25 	.word	0x08008e25
 8008d58:	08008e25 	.word	0x08008e25
 8008d5c:	08008e25 	.word	0x08008e25
 8008d60:	08008e25 	.word	0x08008e25
 8008d64:	08008e25 	.word	0x08008e25
 8008d68:	08008e25 	.word	0x08008e25
 8008d6c:	08008e25 	.word	0x08008e25
 8008d70:	08008dfd 	.word	0x08008dfd
 8008d74:	08008e25 	.word	0x08008e25
 8008d78:	08008e25 	.word	0x08008e25
 8008d7c:	08008e25 	.word	0x08008e25
 8008d80:	08008e25 	.word	0x08008e25
 8008d84:	08008e25 	.word	0x08008e25
 8008d88:	08008e25 	.word	0x08008e25
 8008d8c:	08008e25 	.word	0x08008e25
 8008d90:	08008e05 	.word	0x08008e05
 8008d94:	08008e25 	.word	0x08008e25
 8008d98:	08008e25 	.word	0x08008e25
 8008d9c:	08008e25 	.word	0x08008e25
 8008da0:	08008e25 	.word	0x08008e25
 8008da4:	08008e25 	.word	0x08008e25
 8008da8:	08008e25 	.word	0x08008e25
 8008dac:	08008e25 	.word	0x08008e25
 8008db0:	08008e0d 	.word	0x08008e0d
 8008db4:	08008e25 	.word	0x08008e25
 8008db8:	08008e25 	.word	0x08008e25
 8008dbc:	08008e25 	.word	0x08008e25
 8008dc0:	08008e25 	.word	0x08008e25
 8008dc4:	08008e25 	.word	0x08008e25
 8008dc8:	08008e25 	.word	0x08008e25
 8008dcc:	08008e25 	.word	0x08008e25
 8008dd0:	08008e15 	.word	0x08008e15
 8008dd4:	08008e25 	.word	0x08008e25
 8008dd8:	08008e25 	.word	0x08008e25
 8008ddc:	08008e25 	.word	0x08008e25
 8008de0:	08008e25 	.word	0x08008e25
 8008de4:	08008e25 	.word	0x08008e25
 8008de8:	08008e25 	.word	0x08008e25
 8008dec:	08008e25 	.word	0x08008e25
 8008df0:	08008e1d 	.word	0x08008e1d
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e222      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e21e      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e04:	2308      	movs	r3, #8
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e21a      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e216      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e14:	2320      	movs	r3, #32
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e212      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e1c:	2340      	movs	r3, #64	@ 0x40
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e20e      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e24:	2380      	movs	r3, #128	@ 0x80
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e20a      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a69      	ldr	r2, [pc, #420]	@ (8008fd8 <UART_SetConfig+0x33c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d130      	bne.n	8008e98 <UART_SetConfig+0x1fc>
 8008e36:	4b67      	ldr	r3, [pc, #412]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d826      	bhi.n	8008e90 <UART_SetConfig+0x1f4>
 8008e42:	a201      	add	r2, pc, #4	@ (adr r2, 8008e48 <UART_SetConfig+0x1ac>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e69 	.word	0x08008e69
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e1ec      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e1e8      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e70:	2308      	movs	r3, #8
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e1e4      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e1e0      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e80:	2320      	movs	r3, #32
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e1dc      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e88:	2340      	movs	r3, #64	@ 0x40
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e1d8      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e90:	2380      	movs	r3, #128	@ 0x80
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e1d4      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008fdc <UART_SetConfig+0x340>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d130      	bne.n	8008f04 <UART_SetConfig+0x268>
 8008ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d826      	bhi.n	8008efc <UART_SetConfig+0x260>
 8008eae:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb4 <UART_SetConfig+0x218>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ecd 	.word	0x08008ecd
 8008eb8:	08008ed5 	.word	0x08008ed5
 8008ebc:	08008edd 	.word	0x08008edd
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008eed 	.word	0x08008eed
 8008ec8:	08008ef5 	.word	0x08008ef5
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e1b6      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008ed4:	2304      	movs	r3, #4
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e1b2      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008edc:	2308      	movs	r3, #8
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e1ae      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e1aa      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008eec:	2320      	movs	r3, #32
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e1a6      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008ef4:	2340      	movs	r3, #64	@ 0x40
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e1a2      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008efc:	2380      	movs	r3, #128	@ 0x80
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e19e      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a35      	ldr	r2, [pc, #212]	@ (8008fe0 <UART_SetConfig+0x344>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d130      	bne.n	8008f70 <UART_SetConfig+0x2d4>
 8008f0e:	4b31      	ldr	r3, [pc, #196]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d826      	bhi.n	8008f68 <UART_SetConfig+0x2cc>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <UART_SetConfig+0x284>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f39 	.word	0x08008f39
 8008f24:	08008f41 	.word	0x08008f41
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f59 	.word	0x08008f59
 8008f34:	08008f61 	.word	0x08008f61
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e180      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f40:	2304      	movs	r3, #4
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e17c      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e178      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f50:	2310      	movs	r3, #16
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e174      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f58:	2320      	movs	r3, #32
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e170      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e16c      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f68:	2380      	movs	r3, #128	@ 0x80
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e168      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1b      	ldr	r2, [pc, #108]	@ (8008fe4 <UART_SetConfig+0x348>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d142      	bne.n	8009000 <UART_SetConfig+0x364>
 8008f7a:	4b16      	ldr	r3, [pc, #88]	@ (8008fd4 <UART_SetConfig+0x338>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d838      	bhi.n	8008ff8 <UART_SetConfig+0x35c>
 8008f86:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <UART_SetConfig+0x2f0>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fad 	.word	0x08008fad
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fe9 	.word	0x08008fe9
 8008fa0:	08008ff1 	.word	0x08008ff1
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e14a      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e146      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e142      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e13e      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008fc4:	cfff69f3 	.word	0xcfff69f3
 8008fc8:	58000c00 	.word	0x58000c00
 8008fcc:	11fff4ff 	.word	0x11fff4ff
 8008fd0:	40011000 	.word	0x40011000
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	40004400 	.word	0x40004400
 8008fdc:	40004800 	.word	0x40004800
 8008fe0:	40004c00 	.word	0x40004c00
 8008fe4:	40005000 	.word	0x40005000
 8008fe8:	2320      	movs	r3, #32
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e128      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008ff0:	2340      	movs	r3, #64	@ 0x40
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e124      	b.n	8009242 <UART_SetConfig+0x5a6>
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e120      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4acb      	ldr	r2, [pc, #812]	@ (8009334 <UART_SetConfig+0x698>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d176      	bne.n	80090f8 <UART_SetConfig+0x45c>
 800900a:	4bcb      	ldr	r3, [pc, #812]	@ (8009338 <UART_SetConfig+0x69c>)
 800900c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009012:	2b28      	cmp	r3, #40	@ 0x28
 8009014:	d86c      	bhi.n	80090f0 <UART_SetConfig+0x454>
 8009016:	a201      	add	r2, pc, #4	@ (adr r2, 800901c <UART_SetConfig+0x380>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	080090c1 	.word	0x080090c1
 8009020:	080090f1 	.word	0x080090f1
 8009024:	080090f1 	.word	0x080090f1
 8009028:	080090f1 	.word	0x080090f1
 800902c:	080090f1 	.word	0x080090f1
 8009030:	080090f1 	.word	0x080090f1
 8009034:	080090f1 	.word	0x080090f1
 8009038:	080090f1 	.word	0x080090f1
 800903c:	080090c9 	.word	0x080090c9
 8009040:	080090f1 	.word	0x080090f1
 8009044:	080090f1 	.word	0x080090f1
 8009048:	080090f1 	.word	0x080090f1
 800904c:	080090f1 	.word	0x080090f1
 8009050:	080090f1 	.word	0x080090f1
 8009054:	080090f1 	.word	0x080090f1
 8009058:	080090f1 	.word	0x080090f1
 800905c:	080090d1 	.word	0x080090d1
 8009060:	080090f1 	.word	0x080090f1
 8009064:	080090f1 	.word	0x080090f1
 8009068:	080090f1 	.word	0x080090f1
 800906c:	080090f1 	.word	0x080090f1
 8009070:	080090f1 	.word	0x080090f1
 8009074:	080090f1 	.word	0x080090f1
 8009078:	080090f1 	.word	0x080090f1
 800907c:	080090d9 	.word	0x080090d9
 8009080:	080090f1 	.word	0x080090f1
 8009084:	080090f1 	.word	0x080090f1
 8009088:	080090f1 	.word	0x080090f1
 800908c:	080090f1 	.word	0x080090f1
 8009090:	080090f1 	.word	0x080090f1
 8009094:	080090f1 	.word	0x080090f1
 8009098:	080090f1 	.word	0x080090f1
 800909c:	080090e1 	.word	0x080090e1
 80090a0:	080090f1 	.word	0x080090f1
 80090a4:	080090f1 	.word	0x080090f1
 80090a8:	080090f1 	.word	0x080090f1
 80090ac:	080090f1 	.word	0x080090f1
 80090b0:	080090f1 	.word	0x080090f1
 80090b4:	080090f1 	.word	0x080090f1
 80090b8:	080090f1 	.word	0x080090f1
 80090bc:	080090e9 	.word	0x080090e9
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e0bc      	b.n	8009242 <UART_SetConfig+0x5a6>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e0b8      	b.n	8009242 <UART_SetConfig+0x5a6>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e0b4      	b.n	8009242 <UART_SetConfig+0x5a6>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e0b0      	b.n	8009242 <UART_SetConfig+0x5a6>
 80090e0:	2320      	movs	r3, #32
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e0ac      	b.n	8009242 <UART_SetConfig+0x5a6>
 80090e8:	2340      	movs	r3, #64	@ 0x40
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e0a8      	b.n	8009242 <UART_SetConfig+0x5a6>
 80090f0:	2380      	movs	r3, #128	@ 0x80
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e0a4      	b.n	8009242 <UART_SetConfig+0x5a6>
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a8f      	ldr	r2, [pc, #572]	@ (800933c <UART_SetConfig+0x6a0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d130      	bne.n	8009164 <UART_SetConfig+0x4c8>
 8009102:	4b8d      	ldr	r3, [pc, #564]	@ (8009338 <UART_SetConfig+0x69c>)
 8009104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	2b05      	cmp	r3, #5
 800910c:	d826      	bhi.n	800915c <UART_SetConfig+0x4c0>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <UART_SetConfig+0x478>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009135 	.word	0x08009135
 800911c:	0800913d 	.word	0x0800913d
 8009120:	08009145 	.word	0x08009145
 8009124:	0800914d 	.word	0x0800914d
 8009128:	08009155 	.word	0x08009155
 800912c:	2300      	movs	r3, #0
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e086      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009134:	2304      	movs	r3, #4
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e082      	b.n	8009242 <UART_SetConfig+0x5a6>
 800913c:	2308      	movs	r3, #8
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e07e      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009144:	2310      	movs	r3, #16
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e07a      	b.n	8009242 <UART_SetConfig+0x5a6>
 800914c:	2320      	movs	r3, #32
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e076      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009154:	2340      	movs	r3, #64	@ 0x40
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e072      	b.n	8009242 <UART_SetConfig+0x5a6>
 800915c:	2380      	movs	r3, #128	@ 0x80
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e06e      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a75      	ldr	r2, [pc, #468]	@ (8009340 <UART_SetConfig+0x6a4>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d130      	bne.n	80091d0 <UART_SetConfig+0x534>
 800916e:	4b72      	ldr	r3, [pc, #456]	@ (8009338 <UART_SetConfig+0x69c>)
 8009170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b05      	cmp	r3, #5
 8009178:	d826      	bhi.n	80091c8 <UART_SetConfig+0x52c>
 800917a:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <UART_SetConfig+0x4e4>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	08009199 	.word	0x08009199
 8009184:	080091a1 	.word	0x080091a1
 8009188:	080091a9 	.word	0x080091a9
 800918c:	080091b1 	.word	0x080091b1
 8009190:	080091b9 	.word	0x080091b9
 8009194:	080091c1 	.word	0x080091c1
 8009198:	2300      	movs	r3, #0
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e050      	b.n	8009242 <UART_SetConfig+0x5a6>
 80091a0:	2304      	movs	r3, #4
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e04c      	b.n	8009242 <UART_SetConfig+0x5a6>
 80091a8:	2308      	movs	r3, #8
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e048      	b.n	8009242 <UART_SetConfig+0x5a6>
 80091b0:	2310      	movs	r3, #16
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e044      	b.n	8009242 <UART_SetConfig+0x5a6>
 80091b8:	2320      	movs	r3, #32
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e040      	b.n	8009242 <UART_SetConfig+0x5a6>
 80091c0:	2340      	movs	r3, #64	@ 0x40
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e03c      	b.n	8009242 <UART_SetConfig+0x5a6>
 80091c8:	2380      	movs	r3, #128	@ 0x80
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e038      	b.n	8009242 <UART_SetConfig+0x5a6>
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a5b      	ldr	r2, [pc, #364]	@ (8009344 <UART_SetConfig+0x6a8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d130      	bne.n	800923c <UART_SetConfig+0x5a0>
 80091da:	4b57      	ldr	r3, [pc, #348]	@ (8009338 <UART_SetConfig+0x69c>)
 80091dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d826      	bhi.n	8009234 <UART_SetConfig+0x598>
 80091e6:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <UART_SetConfig+0x550>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	08009205 	.word	0x08009205
 80091f0:	0800920d 	.word	0x0800920d
 80091f4:	08009215 	.word	0x08009215
 80091f8:	0800921d 	.word	0x0800921d
 80091fc:	08009225 	.word	0x08009225
 8009200:	0800922d 	.word	0x0800922d
 8009204:	2302      	movs	r3, #2
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e01a      	b.n	8009242 <UART_SetConfig+0x5a6>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e016      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e012      	b.n	8009242 <UART_SetConfig+0x5a6>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e00e      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009224:	2320      	movs	r3, #32
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e00a      	b.n	8009242 <UART_SetConfig+0x5a6>
 800922c:	2340      	movs	r3, #64	@ 0x40
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e006      	b.n	8009242 <UART_SetConfig+0x5a6>
 8009234:	2380      	movs	r3, #128	@ 0x80
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e002      	b.n	8009242 <UART_SetConfig+0x5a6>
 800923c:	2380      	movs	r3, #128	@ 0x80
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a3f      	ldr	r2, [pc, #252]	@ (8009344 <UART_SetConfig+0x6a8>)
 8009248:	4293      	cmp	r3, r2
 800924a:	f040 80f8 	bne.w	800943e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800924e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009252:	2b20      	cmp	r3, #32
 8009254:	dc46      	bgt.n	80092e4 <UART_SetConfig+0x648>
 8009256:	2b02      	cmp	r3, #2
 8009258:	f2c0 8082 	blt.w	8009360 <UART_SetConfig+0x6c4>
 800925c:	3b02      	subs	r3, #2
 800925e:	2b1e      	cmp	r3, #30
 8009260:	d87e      	bhi.n	8009360 <UART_SetConfig+0x6c4>
 8009262:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <UART_SetConfig+0x5cc>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	080092eb 	.word	0x080092eb
 800926c:	08009361 	.word	0x08009361
 8009270:	080092f3 	.word	0x080092f3
 8009274:	08009361 	.word	0x08009361
 8009278:	08009361 	.word	0x08009361
 800927c:	08009361 	.word	0x08009361
 8009280:	08009303 	.word	0x08009303
 8009284:	08009361 	.word	0x08009361
 8009288:	08009361 	.word	0x08009361
 800928c:	08009361 	.word	0x08009361
 8009290:	08009361 	.word	0x08009361
 8009294:	08009361 	.word	0x08009361
 8009298:	08009361 	.word	0x08009361
 800929c:	08009361 	.word	0x08009361
 80092a0:	08009313 	.word	0x08009313
 80092a4:	08009361 	.word	0x08009361
 80092a8:	08009361 	.word	0x08009361
 80092ac:	08009361 	.word	0x08009361
 80092b0:	08009361 	.word	0x08009361
 80092b4:	08009361 	.word	0x08009361
 80092b8:	08009361 	.word	0x08009361
 80092bc:	08009361 	.word	0x08009361
 80092c0:	08009361 	.word	0x08009361
 80092c4:	08009361 	.word	0x08009361
 80092c8:	08009361 	.word	0x08009361
 80092cc:	08009361 	.word	0x08009361
 80092d0:	08009361 	.word	0x08009361
 80092d4:	08009361 	.word	0x08009361
 80092d8:	08009361 	.word	0x08009361
 80092dc:	08009361 	.word	0x08009361
 80092e0:	08009353 	.word	0x08009353
 80092e4:	2b40      	cmp	r3, #64	@ 0x40
 80092e6:	d037      	beq.n	8009358 <UART_SetConfig+0x6bc>
 80092e8:	e03a      	b.n	8009360 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80092ea:	f7fe faf9 	bl	80078e0 <HAL_RCCEx_GetD3PCLK1Freq>
 80092ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092f0:	e03c      	b.n	800936c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fb08 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009300:	e034      	b.n	800936c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009302:	f107 0318 	add.w	r3, r7, #24
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fc54 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009310:	e02c      	b.n	800936c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009312:	4b09      	ldr	r3, [pc, #36]	@ (8009338 <UART_SetConfig+0x69c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0320 	and.w	r3, r3, #32
 800931a:	2b00      	cmp	r3, #0
 800931c:	d016      	beq.n	800934c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800931e:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <UART_SetConfig+0x69c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	08db      	lsrs	r3, r3, #3
 8009324:	f003 0303 	and.w	r3, r3, #3
 8009328:	4a07      	ldr	r2, [pc, #28]	@ (8009348 <UART_SetConfig+0x6ac>)
 800932a:	fa22 f303 	lsr.w	r3, r2, r3
 800932e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009330:	e01c      	b.n	800936c <UART_SetConfig+0x6d0>
 8009332:	bf00      	nop
 8009334:	40011400 	.word	0x40011400
 8009338:	58024400 	.word	0x58024400
 800933c:	40007800 	.word	0x40007800
 8009340:	40007c00 	.word	0x40007c00
 8009344:	58000c00 	.word	0x58000c00
 8009348:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800934c:	4b9d      	ldr	r3, [pc, #628]	@ (80095c4 <UART_SetConfig+0x928>)
 800934e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009350:	e00c      	b.n	800936c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009352:	4b9d      	ldr	r3, [pc, #628]	@ (80095c8 <UART_SetConfig+0x92c>)
 8009354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009356:	e009      	b.n	800936c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800935e:	e005      	b.n	800936c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800936a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800936c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 81de 	beq.w	8009730 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009378:	4a94      	ldr	r2, [pc, #592]	@ (80095cc <UART_SetConfig+0x930>)
 800937a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800937e:	461a      	mov	r2, r3
 8009380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009382:	fbb3 f3f2 	udiv	r3, r3, r2
 8009386:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	4613      	mov	r3, r2
 800938e:	005b      	lsls	r3, r3, #1
 8009390:	4413      	add	r3, r2
 8009392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009394:	429a      	cmp	r2, r3
 8009396:	d305      	bcc.n	80093a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800939e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d903      	bls.n	80093ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093aa:	e1c1      	b.n	8009730 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ae:	2200      	movs	r2, #0
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	60fa      	str	r2, [r7, #12]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b8:	4a84      	ldr	r2, [pc, #528]	@ (80095cc <UART_SetConfig+0x930>)
 80093ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	2200      	movs	r2, #0
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093ce:	f7f7 f83f 	bl	8000450 <__aeabi_uldivmod>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4610      	mov	r0, r2
 80093d8:	4619      	mov	r1, r3
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	020b      	lsls	r3, r1, #8
 80093e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093e8:	0202      	lsls	r2, r0, #8
 80093ea:	6979      	ldr	r1, [r7, #20]
 80093ec:	6849      	ldr	r1, [r1, #4]
 80093ee:	0849      	lsrs	r1, r1, #1
 80093f0:	2000      	movs	r0, #0
 80093f2:	460c      	mov	r4, r1
 80093f4:	4605      	mov	r5, r0
 80093f6:	eb12 0804 	adds.w	r8, r2, r4
 80093fa:	eb43 0905 	adc.w	r9, r3, r5
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	469a      	mov	sl, r3
 8009406:	4693      	mov	fp, r2
 8009408:	4652      	mov	r2, sl
 800940a:	465b      	mov	r3, fp
 800940c:	4640      	mov	r0, r8
 800940e:	4649      	mov	r1, r9
 8009410:	f7f7 f81e 	bl	8000450 <__aeabi_uldivmod>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4613      	mov	r3, r2
 800941a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009422:	d308      	bcc.n	8009436 <UART_SetConfig+0x79a>
 8009424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800942a:	d204      	bcs.n	8009436 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009432:	60da      	str	r2, [r3, #12]
 8009434:	e17c      	b.n	8009730 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800943c:	e178      	b.n	8009730 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009446:	f040 80c5 	bne.w	80095d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800944a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800944e:	2b20      	cmp	r3, #32
 8009450:	dc48      	bgt.n	80094e4 <UART_SetConfig+0x848>
 8009452:	2b00      	cmp	r3, #0
 8009454:	db7b      	blt.n	800954e <UART_SetConfig+0x8b2>
 8009456:	2b20      	cmp	r3, #32
 8009458:	d879      	bhi.n	800954e <UART_SetConfig+0x8b2>
 800945a:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <UART_SetConfig+0x7c4>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	080094eb 	.word	0x080094eb
 8009464:	080094f3 	.word	0x080094f3
 8009468:	0800954f 	.word	0x0800954f
 800946c:	0800954f 	.word	0x0800954f
 8009470:	080094fb 	.word	0x080094fb
 8009474:	0800954f 	.word	0x0800954f
 8009478:	0800954f 	.word	0x0800954f
 800947c:	0800954f 	.word	0x0800954f
 8009480:	0800950b 	.word	0x0800950b
 8009484:	0800954f 	.word	0x0800954f
 8009488:	0800954f 	.word	0x0800954f
 800948c:	0800954f 	.word	0x0800954f
 8009490:	0800954f 	.word	0x0800954f
 8009494:	0800954f 	.word	0x0800954f
 8009498:	0800954f 	.word	0x0800954f
 800949c:	0800954f 	.word	0x0800954f
 80094a0:	0800951b 	.word	0x0800951b
 80094a4:	0800954f 	.word	0x0800954f
 80094a8:	0800954f 	.word	0x0800954f
 80094ac:	0800954f 	.word	0x0800954f
 80094b0:	0800954f 	.word	0x0800954f
 80094b4:	0800954f 	.word	0x0800954f
 80094b8:	0800954f 	.word	0x0800954f
 80094bc:	0800954f 	.word	0x0800954f
 80094c0:	0800954f 	.word	0x0800954f
 80094c4:	0800954f 	.word	0x0800954f
 80094c8:	0800954f 	.word	0x0800954f
 80094cc:	0800954f 	.word	0x0800954f
 80094d0:	0800954f 	.word	0x0800954f
 80094d4:	0800954f 	.word	0x0800954f
 80094d8:	0800954f 	.word	0x0800954f
 80094dc:	0800954f 	.word	0x0800954f
 80094e0:	08009541 	.word	0x08009541
 80094e4:	2b40      	cmp	r3, #64	@ 0x40
 80094e6:	d02e      	beq.n	8009546 <UART_SetConfig+0x8aa>
 80094e8:	e031      	b.n	800954e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094ea:	f7fc fa43 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 80094ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094f0:	e033      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094f2:	f7fc fa55 	bl	80059a0 <HAL_RCC_GetPCLK2Freq>
 80094f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094f8:	e02f      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe fa04 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009508:	e027      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950a:	f107 0318 	add.w	r3, r7, #24
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fb50 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009518:	e01f      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800951a:	4b2d      	ldr	r3, [pc, #180]	@ (80095d0 <UART_SetConfig+0x934>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009526:	4b2a      	ldr	r3, [pc, #168]	@ (80095d0 <UART_SetConfig+0x934>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	08db      	lsrs	r3, r3, #3
 800952c:	f003 0303 	and.w	r3, r3, #3
 8009530:	4a24      	ldr	r2, [pc, #144]	@ (80095c4 <UART_SetConfig+0x928>)
 8009532:	fa22 f303 	lsr.w	r3, r2, r3
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009538:	e00f      	b.n	800955a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800953a:	4b22      	ldr	r3, [pc, #136]	@ (80095c4 <UART_SetConfig+0x928>)
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800953e:	e00c      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009540:	4b21      	ldr	r3, [pc, #132]	@ (80095c8 <UART_SetConfig+0x92c>)
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009544:	e009      	b.n	800955a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954c:	e005      	b.n	800955a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009558:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800955a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 80e7 	beq.w	8009730 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009566:	4a19      	ldr	r2, [pc, #100]	@ (80095cc <UART_SetConfig+0x930>)
 8009568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800956c:	461a      	mov	r2, r3
 800956e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009570:	fbb3 f3f2 	udiv	r3, r3, r2
 8009574:	005a      	lsls	r2, r3, #1
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	085b      	lsrs	r3, r3, #1
 800957c:	441a      	add	r2, r3
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	fbb2 f3f3 	udiv	r3, r2, r3
 8009586:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	2b0f      	cmp	r3, #15
 800958c:	d916      	bls.n	80095bc <UART_SetConfig+0x920>
 800958e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009594:	d212      	bcs.n	80095bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009598:	b29b      	uxth	r3, r3
 800959a:	f023 030f 	bic.w	r3, r3, #15
 800959e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80095ae:	4313      	orrs	r3, r2
 80095b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80095b8:	60da      	str	r2, [r3, #12]
 80095ba:	e0b9      	b.n	8009730 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095c2:	e0b5      	b.n	8009730 <UART_SetConfig+0xa94>
 80095c4:	03d09000 	.word	0x03d09000
 80095c8:	003d0900 	.word	0x003d0900
 80095cc:	0800e124 	.word	0x0800e124
 80095d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80095d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095d8:	2b20      	cmp	r3, #32
 80095da:	dc49      	bgt.n	8009670 <UART_SetConfig+0x9d4>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	db7c      	blt.n	80096da <UART_SetConfig+0xa3e>
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d87a      	bhi.n	80096da <UART_SetConfig+0xa3e>
 80095e4:	a201      	add	r2, pc, #4	@ (adr r2, 80095ec <UART_SetConfig+0x950>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009677 	.word	0x08009677
 80095f0:	0800967f 	.word	0x0800967f
 80095f4:	080096db 	.word	0x080096db
 80095f8:	080096db 	.word	0x080096db
 80095fc:	08009687 	.word	0x08009687
 8009600:	080096db 	.word	0x080096db
 8009604:	080096db 	.word	0x080096db
 8009608:	080096db 	.word	0x080096db
 800960c:	08009697 	.word	0x08009697
 8009610:	080096db 	.word	0x080096db
 8009614:	080096db 	.word	0x080096db
 8009618:	080096db 	.word	0x080096db
 800961c:	080096db 	.word	0x080096db
 8009620:	080096db 	.word	0x080096db
 8009624:	080096db 	.word	0x080096db
 8009628:	080096db 	.word	0x080096db
 800962c:	080096a7 	.word	0x080096a7
 8009630:	080096db 	.word	0x080096db
 8009634:	080096db 	.word	0x080096db
 8009638:	080096db 	.word	0x080096db
 800963c:	080096db 	.word	0x080096db
 8009640:	080096db 	.word	0x080096db
 8009644:	080096db 	.word	0x080096db
 8009648:	080096db 	.word	0x080096db
 800964c:	080096db 	.word	0x080096db
 8009650:	080096db 	.word	0x080096db
 8009654:	080096db 	.word	0x080096db
 8009658:	080096db 	.word	0x080096db
 800965c:	080096db 	.word	0x080096db
 8009660:	080096db 	.word	0x080096db
 8009664:	080096db 	.word	0x080096db
 8009668:	080096db 	.word	0x080096db
 800966c:	080096cd 	.word	0x080096cd
 8009670:	2b40      	cmp	r3, #64	@ 0x40
 8009672:	d02e      	beq.n	80096d2 <UART_SetConfig+0xa36>
 8009674:	e031      	b.n	80096da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009676:	f7fc f97d 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 800967a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800967c:	e033      	b.n	80096e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800967e:	f7fc f98f 	bl	80059a0 <HAL_RCC_GetPCLK2Freq>
 8009682:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009684:	e02f      	b.n	80096e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe f93e 	bl	800790c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009694:	e027      	b.n	80096e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009696:	f107 0318 	add.w	r3, r7, #24
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fa8a 	bl	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a4:	e01f      	b.n	80096e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096a6:	4b2d      	ldr	r3, [pc, #180]	@ (800975c <UART_SetConfig+0xac0>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d009      	beq.n	80096c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096b2:	4b2a      	ldr	r3, [pc, #168]	@ (800975c <UART_SetConfig+0xac0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	08db      	lsrs	r3, r3, #3
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	4a28      	ldr	r2, [pc, #160]	@ (8009760 <UART_SetConfig+0xac4>)
 80096be:	fa22 f303 	lsr.w	r3, r2, r3
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096c4:	e00f      	b.n	80096e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80096c6:	4b26      	ldr	r3, [pc, #152]	@ (8009760 <UART_SetConfig+0xac4>)
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ca:	e00c      	b.n	80096e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096cc:	4b25      	ldr	r3, [pc, #148]	@ (8009764 <UART_SetConfig+0xac8>)
 80096ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d0:	e009      	b.n	80096e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d8:	e005      	b.n	80096e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80096e4:	bf00      	nop
    }

    if (pclk != 0U)
 80096e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d021      	beq.n	8009730 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009768 <UART_SetConfig+0xacc>)
 80096f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096f6:	461a      	mov	r2, r3
 80096f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	085b      	lsrs	r3, r3, #1
 8009704:	441a      	add	r2, r3
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	fbb2 f3f3 	udiv	r3, r2, r3
 800970e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009712:	2b0f      	cmp	r3, #15
 8009714:	d909      	bls.n	800972a <UART_SetConfig+0xa8e>
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800971c:	d205      	bcs.n	800972a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	b29a      	uxth	r2, r3
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	60da      	str	r2, [r3, #12]
 8009728:	e002      	b.n	8009730 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2201      	movs	r2, #1
 8009734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2201      	movs	r2, #1
 800973c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2200      	movs	r2, #0
 8009744:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2200      	movs	r2, #0
 800974a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800974c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009750:	4618      	mov	r0, r3
 8009752:	3748      	adds	r7, #72	@ 0x48
 8009754:	46bd      	mov	sp, r7
 8009756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800975a:	bf00      	nop
 800975c:	58024400 	.word	0x58024400
 8009760:	03d09000 	.word	0x03d09000
 8009764:	003d0900 	.word	0x003d0900
 8009768:	0800e124 	.word	0x0800e124

0800976c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009778:	f003 0308 	and.w	r3, r3, #8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00a      	beq.n	8009796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	430a      	orrs	r2, r1
 8009794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00a      	beq.n	80097b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	430a      	orrs	r2, r1
 80097b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00a      	beq.n	80097da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097de:	f003 0304 	and.w	r3, r3, #4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00a      	beq.n	800981e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	430a      	orrs	r2, r1
 800983e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01a      	beq.n	8009882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800986a:	d10a      	bne.n	8009882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	605a      	str	r2, [r3, #4]
  }
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b098      	sub	sp, #96	@ 0x60
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098c0:	f7f8 ff84 	bl	80027cc <HAL_GetTick>
 80098c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0308 	and.w	r3, r3, #8
 80098d0:	2b08      	cmp	r3, #8
 80098d2:	d12f      	bne.n	8009934 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098dc:	2200      	movs	r2, #0
 80098de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f88e 	bl	8009a04 <UART_WaitOnFlagUntilTimeout>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d022      	beq.n	8009934 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f6:	e853 3f00 	ldrex	r3, [r3]
 80098fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009902:	653b      	str	r3, [r7, #80]	@ 0x50
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800990c:	647b      	str	r3, [r7, #68]	@ 0x44
 800990e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800991a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e6      	bne.n	80098ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e063      	b.n	80099fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	2b04      	cmp	r3, #4
 8009940:	d149      	bne.n	80099d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009942:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800994a:	2200      	movs	r2, #0
 800994c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f857 	bl	8009a04 <UART_WaitOnFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d03c      	beq.n	80099d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	623b      	str	r3, [r7, #32]
   return(result);
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009970:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800997a:	633b      	str	r3, [r7, #48]	@ 0x30
 800997c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e6      	bne.n	800995c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3308      	adds	r3, #8
 8009994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	60fb      	str	r3, [r7, #12]
   return(result);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3308      	adds	r3, #8
 80099ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099ae:	61fa      	str	r2, [r7, #28]
 80099b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	69b9      	ldr	r1, [r7, #24]
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	617b      	str	r3, [r7, #20]
   return(result);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e5      	bne.n	800998e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e012      	b.n	80099fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2220      	movs	r2, #32
 80099da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3758      	adds	r7, #88	@ 0x58
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	4613      	mov	r3, r2
 8009a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a14:	e04f      	b.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1c:	d04b      	beq.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1e:	f7f8 fed5 	bl	80027cc <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d302      	bcc.n	8009a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e04e      	b.n	8009ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d037      	beq.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b80      	cmp	r3, #128	@ 0x80
 8009a4a:	d034      	beq.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b40      	cmp	r3, #64	@ 0x40
 8009a50:	d031      	beq.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	f003 0308 	and.w	r3, r3, #8
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d110      	bne.n	8009a82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2208      	movs	r2, #8
 8009a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 f839 	bl	8009ae0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2208      	movs	r2, #8
 8009a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e029      	b.n	8009ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a90:	d111      	bne.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 f81f 	bl	8009ae0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e00f      	b.n	8009ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69da      	ldr	r2, [r3, #28]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2301      	moveq	r3, #1
 8009ac8:	2300      	movne	r3, #0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	461a      	mov	r2, r3
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d0a0      	beq.n	8009a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b095      	sub	sp, #84	@ 0x54
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e6      	bne.n	8009ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b2a:	69fa      	ldr	r2, [r7, #28]
 8009b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ba8 <UART_EndRxTransfer+0xc8>)
 8009b2e:	4013      	ands	r3, r2
 8009b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3308      	adds	r3, #8
 8009b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e5      	bne.n	8009b1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d118      	bne.n	8009b88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f023 0310 	bic.w	r3, r3, #16
 8009b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b74:	61bb      	str	r3, [r7, #24]
 8009b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6979      	ldr	r1, [r7, #20]
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	613b      	str	r3, [r7, #16]
   return(result);
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e6      	bne.n	8009b56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b9c:	bf00      	nop
 8009b9e:	3754      	adds	r7, #84	@ 0x54
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	effffffe 	.word	0xeffffffe

08009bac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d101      	bne.n	8009bc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e027      	b.n	8009c12 <HAL_UARTEx_DisableFifoMode+0x66>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2224      	movs	r2, #36	@ 0x24
 8009bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009bf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e02d      	b.n	8009c92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2224      	movs	r2, #36	@ 0x24
 8009c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f850 	bl	8009d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d101      	bne.n	8009cb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cae:	2302      	movs	r3, #2
 8009cb0:	e02d      	b.n	8009d0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2224      	movs	r2, #36	@ 0x24
 8009cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0201 	bic.w	r2, r2, #1
 8009cd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	683a      	ldr	r2, [r7, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f812 	bl	8009d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d108      	bne.n	8009d3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d38:	e031      	b.n	8009d9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d3a:	2310      	movs	r3, #16
 8009d3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d3e:	2310      	movs	r3, #16
 8009d40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	0e5b      	lsrs	r3, r3, #25
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	f003 0307 	and.w	r3, r3, #7
 8009d50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	0f5b      	lsrs	r3, r3, #29
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	7b3a      	ldrb	r2, [r7, #12]
 8009d66:	4911      	ldr	r1, [pc, #68]	@ (8009dac <UARTEx_SetNbDataToProcess+0x94>)
 8009d68:	5c8a      	ldrb	r2, [r1, r2]
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d6e:	7b3a      	ldrb	r2, [r7, #12]
 8009d70:	490f      	ldr	r1, [pc, #60]	@ (8009db0 <UARTEx_SetNbDataToProcess+0x98>)
 8009d72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	7b7a      	ldrb	r2, [r7, #13]
 8009d84:	4909      	ldr	r1, [pc, #36]	@ (8009dac <UARTEx_SetNbDataToProcess+0x94>)
 8009d86:	5c8a      	ldrb	r2, [r1, r2]
 8009d88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d8c:	7b7a      	ldrb	r2, [r7, #13]
 8009d8e:	4908      	ldr	r1, [pc, #32]	@ (8009db0 <UARTEx_SetNbDataToProcess+0x98>)
 8009d90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d92:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d9e:	bf00      	nop
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	0800e13c 	.word	0x0800e13c
 8009db0:	0800e144 	.word	0x0800e144

08009db4 <arm_rfft_fast_init_f32>:
 8009db4:	084b      	lsrs	r3, r1, #1
 8009db6:	2b80      	cmp	r3, #128	@ 0x80
 8009db8:	b430      	push	{r4, r5}
 8009dba:	8201      	strh	r1, [r0, #16]
 8009dbc:	8003      	strh	r3, [r0, #0]
 8009dbe:	d06f      	beq.n	8009ea0 <arm_rfft_fast_init_f32+0xec>
 8009dc0:	d916      	bls.n	8009df0 <arm_rfft_fast_init_f32+0x3c>
 8009dc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dc6:	d05e      	beq.n	8009e86 <arm_rfft_fast_init_f32+0xd2>
 8009dc8:	d935      	bls.n	8009e36 <arm_rfft_fast_init_f32+0x82>
 8009dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dce:	d025      	beq.n	8009e1c <arm_rfft_fast_init_f32+0x68>
 8009dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dd4:	d112      	bne.n	8009dfc <arm_rfft_fast_init_f32+0x48>
 8009dd6:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8009dda:	4c37      	ldr	r4, [pc, #220]	@ (8009eb8 <arm_rfft_fast_init_f32+0x104>)
 8009ddc:	4937      	ldr	r1, [pc, #220]	@ (8009ebc <arm_rfft_fast_init_f32+0x108>)
 8009dde:	2300      	movs	r3, #0
 8009de0:	4a37      	ldr	r2, [pc, #220]	@ (8009ec0 <arm_rfft_fast_init_f32+0x10c>)
 8009de2:	8185      	strh	r5, [r0, #12]
 8009de4:	6084      	str	r4, [r0, #8]
 8009de6:	6041      	str	r1, [r0, #4]
 8009de8:	6142      	str	r2, [r0, #20]
 8009dea:	b258      	sxtb	r0, r3
 8009dec:	bc30      	pop	{r4, r5}
 8009dee:	4770      	bx	lr
 8009df0:	2b20      	cmp	r3, #32
 8009df2:	d030      	beq.n	8009e56 <arm_rfft_fast_init_f32+0xa2>
 8009df4:	2b40      	cmp	r3, #64	@ 0x40
 8009df6:	d005      	beq.n	8009e04 <arm_rfft_fast_init_f32+0x50>
 8009df8:	2b10      	cmp	r3, #16
 8009dfa:	d038      	beq.n	8009e6e <arm_rfft_fast_init_f32+0xba>
 8009dfc:	23ff      	movs	r3, #255	@ 0xff
 8009dfe:	bc30      	pop	{r4, r5}
 8009e00:	b258      	sxtb	r0, r3
 8009e02:	4770      	bx	lr
 8009e04:	2538      	movs	r5, #56	@ 0x38
 8009e06:	4c2f      	ldr	r4, [pc, #188]	@ (8009ec4 <arm_rfft_fast_init_f32+0x110>)
 8009e08:	492f      	ldr	r1, [pc, #188]	@ (8009ec8 <arm_rfft_fast_init_f32+0x114>)
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8009ecc <arm_rfft_fast_init_f32+0x118>)
 8009e0e:	8185      	strh	r5, [r0, #12]
 8009e10:	6084      	str	r4, [r0, #8]
 8009e12:	6041      	str	r1, [r0, #4]
 8009e14:	6142      	str	r2, [r0, #20]
 8009e16:	b258      	sxtb	r0, r3
 8009e18:	bc30      	pop	{r4, r5}
 8009e1a:	4770      	bx	lr
 8009e1c:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8009e20:	4c2b      	ldr	r4, [pc, #172]	@ (8009ed0 <arm_rfft_fast_init_f32+0x11c>)
 8009e22:	492c      	ldr	r1, [pc, #176]	@ (8009ed4 <arm_rfft_fast_init_f32+0x120>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4a2c      	ldr	r2, [pc, #176]	@ (8009ed8 <arm_rfft_fast_init_f32+0x124>)
 8009e28:	8185      	strh	r5, [r0, #12]
 8009e2a:	6084      	str	r4, [r0, #8]
 8009e2c:	6041      	str	r1, [r0, #4]
 8009e2e:	6142      	str	r2, [r0, #20]
 8009e30:	b258      	sxtb	r0, r3
 8009e32:	bc30      	pop	{r4, r5}
 8009e34:	4770      	bx	lr
 8009e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e3a:	d1df      	bne.n	8009dfc <arm_rfft_fast_init_f32+0x48>
 8009e3c:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8009e40:	4c26      	ldr	r4, [pc, #152]	@ (8009edc <arm_rfft_fast_init_f32+0x128>)
 8009e42:	4927      	ldr	r1, [pc, #156]	@ (8009ee0 <arm_rfft_fast_init_f32+0x12c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4a27      	ldr	r2, [pc, #156]	@ (8009ee4 <arm_rfft_fast_init_f32+0x130>)
 8009e48:	8185      	strh	r5, [r0, #12]
 8009e4a:	6084      	str	r4, [r0, #8]
 8009e4c:	6041      	str	r1, [r0, #4]
 8009e4e:	6142      	str	r2, [r0, #20]
 8009e50:	b258      	sxtb	r0, r3
 8009e52:	bc30      	pop	{r4, r5}
 8009e54:	4770      	bx	lr
 8009e56:	2530      	movs	r5, #48	@ 0x30
 8009e58:	4c23      	ldr	r4, [pc, #140]	@ (8009ee8 <arm_rfft_fast_init_f32+0x134>)
 8009e5a:	4924      	ldr	r1, [pc, #144]	@ (8009eec <arm_rfft_fast_init_f32+0x138>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4a24      	ldr	r2, [pc, #144]	@ (8009ef0 <arm_rfft_fast_init_f32+0x13c>)
 8009e60:	8185      	strh	r5, [r0, #12]
 8009e62:	6084      	str	r4, [r0, #8]
 8009e64:	6041      	str	r1, [r0, #4]
 8009e66:	6142      	str	r2, [r0, #20]
 8009e68:	b258      	sxtb	r0, r3
 8009e6a:	bc30      	pop	{r4, r5}
 8009e6c:	4770      	bx	lr
 8009e6e:	2514      	movs	r5, #20
 8009e70:	4c20      	ldr	r4, [pc, #128]	@ (8009ef4 <arm_rfft_fast_init_f32+0x140>)
 8009e72:	4921      	ldr	r1, [pc, #132]	@ (8009ef8 <arm_rfft_fast_init_f32+0x144>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4a21      	ldr	r2, [pc, #132]	@ (8009efc <arm_rfft_fast_init_f32+0x148>)
 8009e78:	8185      	strh	r5, [r0, #12]
 8009e7a:	6084      	str	r4, [r0, #8]
 8009e7c:	6041      	str	r1, [r0, #4]
 8009e7e:	6142      	str	r2, [r0, #20]
 8009e80:	b258      	sxtb	r0, r3
 8009e82:	bc30      	pop	{r4, r5}
 8009e84:	4770      	bx	lr
 8009e86:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8009e8a:	4c1d      	ldr	r4, [pc, #116]	@ (8009f00 <arm_rfft_fast_init_f32+0x14c>)
 8009e8c:	491d      	ldr	r1, [pc, #116]	@ (8009f04 <arm_rfft_fast_init_f32+0x150>)
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4a1d      	ldr	r2, [pc, #116]	@ (8009f08 <arm_rfft_fast_init_f32+0x154>)
 8009e92:	8185      	strh	r5, [r0, #12]
 8009e94:	6084      	str	r4, [r0, #8]
 8009e96:	6041      	str	r1, [r0, #4]
 8009e98:	6142      	str	r2, [r0, #20]
 8009e9a:	b258      	sxtb	r0, r3
 8009e9c:	bc30      	pop	{r4, r5}
 8009e9e:	4770      	bx	lr
 8009ea0:	25d0      	movs	r5, #208	@ 0xd0
 8009ea2:	4c1a      	ldr	r4, [pc, #104]	@ (8009f0c <arm_rfft_fast_init_f32+0x158>)
 8009ea4:	491a      	ldr	r1, [pc, #104]	@ (8009f10 <arm_rfft_fast_init_f32+0x15c>)
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8009f14 <arm_rfft_fast_init_f32+0x160>)
 8009eaa:	8185      	strh	r5, [r0, #12]
 8009eac:	6084      	str	r4, [r0, #8]
 8009eae:	6041      	str	r1, [r0, #4]
 8009eb0:	6142      	str	r2, [r0, #20]
 8009eb2:	b258      	sxtb	r0, r3
 8009eb4:	bc30      	pop	{r4, r5}
 8009eb6:	4770      	bx	lr
 8009eb8:	0801cf54 	.word	0x0801cf54
 8009ebc:	0800e14c 	.word	0x0800e14c
 8009ec0:	080142bc 	.word	0x080142bc
 8009ec4:	0801224c 	.word	0x0801224c
 8009ec8:	0801ed14 	.word	0x0801ed14
 8009ecc:	08021204 	.word	0x08021204
 8009ed0:	0801ac3c 	.word	0x0801ac3c
 8009ed4:	08018b3c 	.word	0x08018b3c
 8009ed8:	080122bc 	.word	0x080122bc
 8009edc:	08020e94 	.word	0x08020e94
 8009ee0:	080182bc 	.word	0x080182bc
 8009ee4:	0801ef14 	.word	0x0801ef14
 8009ee8:	0801baf4 	.word	0x0801baf4
 8009eec:	0801ab3c 	.word	0x0801ab3c
 8009ef0:	0801214c 	.word	0x0801214c
 8009ef4:	0801ba4c 	.word	0x0801ba4c
 8009ef8:	08018abc 	.word	0x08018abc
 8009efc:	0801ba74 	.word	0x0801ba74
 8009f00:	0801f714 	.word	0x0801f714
 8009f04:	0801bf54 	.word	0x0801bf54
 8009f08:	0801fa94 	.word	0x0801fa94
 8009f0c:	08021404 	.word	0x08021404
 8009f10:	0801bb54 	.word	0x0801bb54
 8009f14:	08020a94 	.word	0x08020a94

08009f18 <arm_rfft_fast_f32>:
 8009f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1c:	8a05      	ldrh	r5, [r0, #16]
 8009f1e:	4606      	mov	r6, r0
 8009f20:	4690      	mov	r8, r2
 8009f22:	460c      	mov	r4, r1
 8009f24:	086d      	lsrs	r5, r5, #1
 8009f26:	8005      	strh	r5, [r0, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d15e      	bne.n	8009fea <arm_rfft_fast_f32+0xd2>
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f000 fbe0 	bl	800a6f4 <arm_cfft_f32>
 8009f34:	edd4 7a00 	vldr	s15, [r4]
 8009f38:	ed94 7a01 	vldr	s14, [r4, #4]
 8009f3c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009f40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f44:	8837      	ldrh	r7, [r6, #0]
 8009f46:	ee37 7a07 	vadd.f32	s14, s14, s14
 8009f4a:	6975      	ldr	r5, [r6, #20]
 8009f4c:	3f01      	subs	r7, #1
 8009f4e:	eef0 3a46 	vmov.f32	s7, s12
 8009f52:	3510      	adds	r5, #16
 8009f54:	f108 0610 	add.w	r6, r8, #16
 8009f58:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009f5c:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8009f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f64:	f104 0310 	add.w	r3, r4, #16
 8009f68:	3808      	subs	r0, #8
 8009f6a:	ee26 7a86 	vmul.f32	s14, s13, s12
 8009f6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009f72:	ed88 7a00 	vstr	s14, [r8]
 8009f76:	edc8 7a01 	vstr	s15, [r8, #4]
 8009f7a:	edd0 6a02 	vldr	s13, [r0, #8]
 8009f7e:	3f01      	subs	r7, #1
 8009f80:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009f84:	f1a0 0008 	sub.w	r0, r0, #8
 8009f88:	ed13 7a01 	vldr	s14, [r3, #-4]
 8009f8c:	f105 0508 	add.w	r5, r5, #8
 8009f90:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8009f94:	ed15 6a04 	vldr	s12, [r5, #-16]
 8009f98:	edd0 5a05 	vldr	s11, [r0, #20]
 8009f9c:	ee36 5a85 	vadd.f32	s10, s13, s10
 8009fa0:	ed55 6a03 	vldr	s13, [r5, #-12]
 8009fa4:	f103 0308 	add.w	r3, r3, #8
 8009fa8:	ee35 4a87 	vadd.f32	s8, s11, s14
 8009fac:	f106 0608 	add.w	r6, r6, #8
 8009fb0:	ee66 4a27 	vmul.f32	s9, s12, s15
 8009fb4:	ee77 5a65 	vsub.f32	s11, s14, s11
 8009fb8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8009fbc:	ee34 5a85 	vadd.f32	s10, s9, s10
 8009fc0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009fc4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8009fc8:	ee77 7a25 	vadd.f32	s15, s14, s11
 8009fcc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009fd0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009fd4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009fd8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009fdc:	ed46 6a04 	vstr	s13, [r6, #-16]
 8009fe0:	ed46 7a03 	vstr	s15, [r6, #-12]
 8009fe4:	d1c9      	bne.n	8009f7a <arm_rfft_fast_f32+0x62>
 8009fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fea:	edd1 7a00 	vldr	s15, [r1]
 8009fee:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8009ff2:	edd1 6a01 	vldr	s13, [r1, #4]
 8009ff6:	1e68      	subs	r0, r5, #1
 8009ff8:	6975      	ldr	r5, [r6, #20]
 8009ffa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009ffe:	00c1      	lsls	r1, r0, #3
 800a000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a004:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a008:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a00c:	ed82 7a00 	vstr	s14, [r2]
 800a010:	edc2 7a01 	vstr	s15, [r2, #4]
 800a014:	b3e0      	cbz	r0, 800a090 <arm_rfft_fast_f32+0x178>
 800a016:	3908      	subs	r1, #8
 800a018:	f104 0210 	add.w	r2, r4, #16
 800a01c:	3510      	adds	r5, #16
 800a01e:	440c      	add	r4, r1
 800a020:	f108 0110 	add.w	r1, r8, #16
 800a024:	ed94 7a02 	vldr	s14, [r4, #8]
 800a028:	3801      	subs	r0, #1
 800a02a:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a02e:	f1a4 0408 	sub.w	r4, r4, #8
 800a032:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a036:	f102 0208 	add.w	r2, r2, #8
 800a03a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800a03e:	ed94 4a05 	vldr	s8, [r4, #20]
 800a042:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a046:	ee77 6a26 	vadd.f32	s13, s14, s13
 800a04a:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a04e:	f101 0108 	add.w	r1, r1, #8
 800a052:	ee26 3a27 	vmul.f32	s6, s12, s15
 800a056:	f105 0508 	add.w	r5, r5, #8
 800a05a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a05e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800a062:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a066:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a06a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a06e:	ee77 7a05 	vadd.f32	s15, s14, s10
 800a072:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a076:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a07a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800a07e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a082:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a086:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a08a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a08e:	d1c9      	bne.n	800a024 <arm_rfft_fast_f32+0x10c>
 800a090:	4630      	mov	r0, r6
 800a092:	4641      	mov	r1, r8
 800a094:	461a      	mov	r2, r3
 800a096:	2301      	movs	r3, #1
 800a098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	f000 bb2a 	b.w	800a6f4 <arm_cfft_f32>

0800a0a0 <arm_cfft_radix8by2_f32>:
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	ed2d 8b06 	vpush	{d8-d10}
 800a0a8:	f8b0 e000 	ldrh.w	lr, [r0]
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	6842      	ldr	r2, [r0, #4]
 800a0b0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800a0b4:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800a0b8:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a0bc:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800a0c0:	f000 80af 	beq.w	800a222 <arm_cfft_radix8by2_f32+0x182>
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	3210      	adds	r2, #16
 800a0c8:	f101 0610 	add.w	r6, r1, #16
 800a0cc:	f108 0510 	add.w	r5, r8, #16
 800a0d0:	18cc      	adds	r4, r1, r3
 800a0d2:	4443      	add	r3, r8
 800a0d4:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a0d8:	f1be 0e01 	subs.w	lr, lr, #1
 800a0dc:	ed56 4a04 	vldr	s9, [r6, #-16]
 800a0e0:	f104 0410 	add.w	r4, r4, #16
 800a0e4:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a0e8:	f106 0610 	add.w	r6, r6, #16
 800a0ec:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800a0f0:	ed53 0a04 	vldr	s1, [r3, #-16]
 800a0f4:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a0f8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a0fc:	ed13 3a02 	vldr	s6, [r3, #-8]
 800a100:	f102 0210 	add.w	r2, r2, #16
 800a104:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a108:	f103 0310 	add.w	r3, r3, #16
 800a10c:	ed55 2a01 	vldr	s5, [r5, #-4]
 800a110:	f105 0510 	add.w	r5, r5, #16
 800a114:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800a118:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800a11c:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800a120:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a124:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800a128:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800a12c:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a130:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800a134:	ee76 aa87 	vadd.f32	s21, s13, s14
 800a138:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800a13c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a140:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800a144:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800a148:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800a14c:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a150:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a154:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800a158:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a15c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a160:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a164:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800a168:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800a16c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a170:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800a174:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a178:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800a17c:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a180:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800a184:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a188:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800a18c:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800a190:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800a194:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a198:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a19c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a1a0:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a1a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a1a8:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a1ac:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a1b0:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a1b4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a1b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a1bc:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a1c0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a1c4:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800a1c8:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800a1cc:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800a1d0:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800a1d4:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800a1d8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800a1dc:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a1e0:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a1e4:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a1e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1ec:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a1f0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a1f4:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a1f8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a1fc:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a200:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a204:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a208:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a20c:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800a210:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800a214:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800a218:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800a21c:	f47f af5a 	bne.w	800a0d4 <arm_cfft_radix8by2_f32+0x34>
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	fa1f f48c 	uxth.w	r4, ip
 800a226:	4608      	mov	r0, r1
 800a228:	2302      	movs	r3, #2
 800a22a:	4621      	mov	r1, r4
 800a22c:	f000 fada 	bl	800a7e4 <arm_radix8_butterfly_f32>
 800a230:	4640      	mov	r0, r8
 800a232:	4621      	mov	r1, r4
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	2302      	movs	r3, #2
 800a238:	ecbd 8b06 	vpop	{d8-d10}
 800a23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	f000 bad0 	b.w	800a7e4 <arm_radix8_butterfly_f32>

0800a244 <arm_cfft_radix8by4_f32>:
 800a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	ed2d 8b06 	vpush	{d8-d10}
 800a24c:	8804      	ldrh	r4, [r0, #0]
 800a24e:	b08f      	sub	sp, #60	@ 0x3c
 800a250:	ed91 6a00 	vldr	s12, [r1]
 800a254:	460a      	mov	r2, r1
 800a256:	0864      	lsrs	r4, r4, #1
 800a258:	ed91 7a01 	vldr	s14, [r1, #4]
 800a25c:	9101      	str	r1, [sp, #4]
 800a25e:	00a3      	lsls	r3, r4, #2
 800a260:	9104      	str	r1, [sp, #16]
 800a262:	0864      	lsrs	r4, r4, #1
 800a264:	6841      	ldr	r1, [r0, #4]
 800a266:	900c      	str	r0, [sp, #48]	@ 0x30
 800a268:	4625      	mov	r5, r4
 800a26a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a26c:	f101 0408 	add.w	r4, r1, #8
 800a270:	f101 0610 	add.w	r6, r1, #16
 800a274:	9406      	str	r4, [sp, #24]
 800a276:	18d4      	adds	r4, r2, r3
 800a278:	1eaa      	subs	r2, r5, #2
 800a27a:	f101 0518 	add.w	r5, r1, #24
 800a27e:	18e0      	adds	r0, r4, r3
 800a280:	ed94 4a00 	vldr	s8, [r4]
 800a284:	edd4 3a01 	vldr	s7, [r4, #4]
 800a288:	46a6      	mov	lr, r4
 800a28a:	edd0 6a00 	vldr	s13, [r0]
 800a28e:	18c7      	adds	r7, r0, r3
 800a290:	edd0 7a01 	vldr	s15, [r0, #4]
 800a294:	46a0      	mov	r8, r4
 800a296:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a29a:	edd7 4a00 	vldr	s9, [r7]
 800a29e:	9402      	str	r4, [sp, #8]
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	9507      	str	r5, [sp, #28]
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	ee75 2a84 	vadd.f32	s5, s11, s8
 800a2aa:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2ac:	9801      	ldr	r0, [sp, #4]
 800a2ae:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a2b2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a2b6:	ed97 5a01 	vldr	s10, [r7, #4]
 800a2ba:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a2be:	46bc      	mov	ip, r7
 800a2c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2c4:	9605      	str	r6, [sp, #20]
 800a2c6:	ee36 7a63 	vsub.f32	s14, s12, s7
 800a2ca:	9703      	str	r7, [sp, #12]
 800a2cc:	ee12 9a90 	vmov	r9, s5
 800a2d0:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800a2d4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800a2d8:	1f3e      	subs	r6, r7, #4
 800a2da:	f840 9b08 	str.w	r9, [r0], #8
 800a2de:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800a2e2:	edde 2a01 	vldr	s5, [lr, #4]
 800a2e6:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800a2ea:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a2ee:	ed9c 4a01 	vldr	s8, [ip, #4]
 800a2f2:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a2f6:	9001      	str	r0, [sp, #4]
 800a2f8:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a2fc:	9804      	ldr	r0, [sp, #16]
 800a2fe:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a302:	f1ae 0704 	sub.w	r7, lr, #4
 800a306:	ee36 6a04 	vadd.f32	s12, s12, s8
 800a30a:	ee33 4a45 	vsub.f32	s8, s6, s10
 800a30e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a312:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800a316:	ed80 6a01 	vstr	s12, [r0, #4]
 800a31a:	ee14 9a10 	vmov	r9, s8
 800a31e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a322:	f848 9b08 	str.w	r9, [r8], #8
 800a326:	ed8e 5a01 	vstr	s10, [lr, #4]
 800a32a:	ee15 ea90 	vmov	lr, s11
 800a32e:	f844 eb08 	str.w	lr, [r4], #8
 800a332:	ee16 ea90 	vmov	lr, s13
 800a336:	9408      	str	r4, [sp, #32]
 800a338:	462c      	mov	r4, r5
 800a33a:	ed85 7a01 	vstr	s14, [r5, #4]
 800a33e:	9d03      	ldr	r5, [sp, #12]
 800a340:	f84c eb08 	str.w	lr, [ip], #8
 800a344:	edc5 7a01 	vstr	s15, [r5, #4]
 800a348:	0855      	lsrs	r5, r2, #1
 800a34a:	9509      	str	r5, [sp, #36]	@ 0x24
 800a34c:	f000 8130 	beq.w	800a5b0 <arm_cfft_radix8by4_f32+0x36c>
 800a350:	9804      	ldr	r0, [sp, #16]
 800a352:	3b08      	subs	r3, #8
 800a354:	46ab      	mov	fp, r5
 800a356:	f1a4 020c 	sub.w	r2, r4, #12
 800a35a:	f100 0510 	add.w	r5, r0, #16
 800a35e:	f101 0920 	add.w	r9, r1, #32
 800a362:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800a366:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a36a:	4433      	add	r3, r6
 800a36c:	3410      	adds	r4, #16
 800a36e:	4660      	mov	r0, ip
 800a370:	4641      	mov	r1, r8
 800a372:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800a376:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a37a:	f1bb 0b01 	subs.w	fp, fp, #1
 800a37e:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a382:	f10a 0a08 	add.w	sl, sl, #8
 800a386:	edd1 7a00 	vldr	s15, [r1]
 800a38a:	f105 0508 	add.w	r5, r5, #8
 800a38e:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800a392:	edd0 2a00 	vldr	s5, [r0]
 800a396:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a39a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a39e:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a3a2:	f1a2 0208 	sub.w	r2, r2, #8
 800a3a6:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800a3aa:	ed90 2a01 	vldr	s4, [r0, #4]
 800a3ae:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a3b2:	ed91 6a01 	vldr	s12, [r1, #4]
 800a3b6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a3ba:	f109 0910 	add.w	r9, r9, #16
 800a3be:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800a3c2:	f104 0408 	add.w	r4, r4, #8
 800a3c6:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800a3ca:	f10e 0e18 	add.w	lr, lr, #24
 800a3ce:	ee37 3a67 	vsub.f32	s6, s14, s15
 800a3d2:	f1a3 0308 	sub.w	r3, r3, #8
 800a3d6:	ed45 6a04 	vstr	s13, [r5, #-16]
 800a3da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3de:	edd1 6a01 	vldr	s13, [r1, #4]
 800a3e2:	ee76 1a25 	vadd.f32	s3, s12, s11
 800a3e6:	edd0 4a01 	vldr	s9, [r0, #4]
 800a3ea:	ee33 3a22 	vadd.f32	s6, s6, s5
 800a3ee:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a3f2:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a3f6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a3fa:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a3fe:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800a402:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a406:	ed45 6a03 	vstr	s13, [r5, #-12]
 800a40a:	ee32 2a06 	vadd.f32	s4, s4, s12
 800a40e:	edd6 7a00 	vldr	s15, [r6]
 800a412:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a416:	ed97 1a00 	vldr	s2, [r7]
 800a41a:	ee77 2a62 	vsub.f32	s5, s14, s5
 800a41e:	ed92 8a04 	vldr	s16, [r2, #16]
 800a422:	ee71 8a27 	vadd.f32	s17, s2, s15
 800a426:	ed93 aa04 	vldr	s20, [r3, #16]
 800a42a:	ed16 7a01 	vldr	s14, [r6, #-4]
 800a42e:	ee71 7a67 	vsub.f32	s15, s2, s15
 800a432:	ed57 0a01 	vldr	s1, [r7, #-4]
 800a436:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800a43a:	ee38 6a88 	vadd.f32	s12, s17, s16
 800a43e:	edd3 9a03 	vldr	s19, [r3, #12]
 800a442:	ee30 0a87 	vadd.f32	s0, s1, s14
 800a446:	ed92 9a03 	vldr	s18, [r2, #12]
 800a44a:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800a44e:	ee3a 6a06 	vadd.f32	s12, s20, s12
 800a452:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800a456:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800a45a:	ee16 ca10 	vmov	ip, s12
 800a45e:	ee30 6a49 	vsub.f32	s12, s0, s18
 800a462:	ee71 4a07 	vadd.f32	s9, s2, s14
 800a466:	f847 c908 	str.w	ip, [r7], #-8
 800a46a:	ee34 4a29 	vadd.f32	s8, s8, s19
 800a46e:	edd2 8a03 	vldr	s17, [r2, #12]
 800a472:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800a476:	ed93 8a03 	vldr	s16, [r3, #12]
 800a47a:	ee71 0a47 	vsub.f32	s1, s2, s14
 800a47e:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a482:	ee39 1a67 	vsub.f32	s2, s18, s15
 800a486:	ee36 6a69 	vsub.f32	s12, s12, s19
 800a48a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a48e:	ee75 5aca 	vsub.f32	s11, s11, s20
 800a492:	ed87 0a01 	vstr	s0, [r7, #4]
 800a496:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800a49a:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800a49e:	ee21 8a80 	vmul.f32	s16, s3, s0
 800a4a2:	ee23 7a26 	vmul.f32	s14, s6, s13
 800a4a6:	ee64 7a26 	vmul.f32	s15, s8, s13
 800a4aa:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800a4ae:	ee24 4a00 	vmul.f32	s8, s8, s0
 800a4b2:	ee23 3a00 	vmul.f32	s6, s6, s0
 800a4b6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a4ba:	ee24 0a80 	vmul.f32	s0, s9, s0
 800a4be:	ee38 7a07 	vadd.f32	s14, s16, s14
 800a4c2:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a4c6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a4ca:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a4ce:	ee17 ca10 	vmov	ip, s14
 800a4d2:	f841 cb08 	str.w	ip, [r1], #8
 800a4d6:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a4da:	ed82 0a04 	vstr	s0, [r2, #16]
 800a4de:	edc2 6a03 	vstr	s13, [r2, #12]
 800a4e2:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800a4e6:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800a4ea:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800a4ee:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800a4f2:	ee65 4a27 	vmul.f32	s9, s10, s15
 800a4f6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a4fa:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a4fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a502:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a506:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a50a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a50e:	ee34 6a24 	vadd.f32	s12, s8, s9
 800a512:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a516:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a51a:	ee17 ca90 	vmov	ip, s15
 800a51e:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a522:	ed04 5a03 	vstr	s10, [r4, #-12]
 800a526:	f846 c908 	str.w	ip, [r6], #-8
 800a52a:	edc6 6a01 	vstr	s13, [r6, #4]
 800a52e:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800a532:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800a536:	ee62 5a27 	vmul.f32	s11, s4, s15
 800a53a:	ee22 6a87 	vmul.f32	s12, s5, s14
 800a53e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a542:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800a546:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a54a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a54e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a552:	ee61 7a27 	vmul.f32	s15, s2, s15
 800a556:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a55a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800a55e:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800a562:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a566:	ee16 ca10 	vmov	ip, s12
 800a56a:	f840 cb08 	str.w	ip, [r0], #8
 800a56e:	ed40 2a01 	vstr	s5, [r0, #-4]
 800a572:	edc3 0a04 	vstr	s1, [r3, #16]
 800a576:	edc3 7a03 	vstr	s15, [r3, #12]
 800a57a:	f47f aefc 	bne.w	800a376 <arm_cfft_radix8by4_f32+0x132>
 800a57e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a580:	9805      	ldr	r0, [sp, #20]
 800a582:	00cb      	lsls	r3, r1, #3
 800a584:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800a588:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a58c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a590:	4498      	add	r8, r3
 800a592:	449c      	add	ip, r3
 800a594:	9105      	str	r1, [sp, #20]
 800a596:	9901      	ldr	r1, [sp, #4]
 800a598:	4419      	add	r1, r3
 800a59a:	9101      	str	r1, [sp, #4]
 800a59c:	9906      	ldr	r1, [sp, #24]
 800a59e:	4419      	add	r1, r3
 800a5a0:	9106      	str	r1, [sp, #24]
 800a5a2:	9908      	ldr	r1, [sp, #32]
 800a5a4:	4419      	add	r1, r3
 800a5a6:	9b07      	ldr	r3, [sp, #28]
 800a5a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5ac:	9108      	str	r1, [sp, #32]
 800a5ae:	9307      	str	r3, [sp, #28]
 800a5b0:	9a01      	ldr	r2, [sp, #4]
 800a5b2:	2304      	movs	r3, #4
 800a5b4:	9e08      	ldr	r6, [sp, #32]
 800a5b6:	edd2 6a00 	vldr	s13, [r2]
 800a5ba:	ed96 4a00 	vldr	s8, [r6]
 800a5be:	edd8 7a00 	vldr	s15, [r8]
 800a5c2:	ee36 6a84 	vadd.f32	s12, s13, s8
 800a5c6:	eddc 2a00 	vldr	s5, [ip]
 800a5ca:	ed96 7a01 	vldr	s14, [r6, #4]
 800a5ce:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800a5d2:	edd2 6a01 	vldr	s13, [r2, #4]
 800a5d6:	ee76 4a27 	vadd.f32	s9, s12, s15
 800a5da:	ed98 2a01 	vldr	s4, [r8, #4]
 800a5de:	ee76 5a87 	vadd.f32	s11, s13, s14
 800a5e2:	ed9c 5a01 	vldr	s10, [ip, #4]
 800a5e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a5ea:	9d05      	ldr	r5, [sp, #20]
 800a5ec:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800a5f0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800a5f4:	ee72 3a04 	vadd.f32	s7, s4, s8
 800a5f8:	9804      	ldr	r0, [sp, #16]
 800a5fa:	ee77 4a67 	vsub.f32	s9, s14, s15
 800a5fe:	4621      	mov	r1, r4
 800a600:	edc2 6a00 	vstr	s13, [r2]
 800a604:	ee76 6a67 	vsub.f32	s13, s12, s15
 800a608:	ed98 3a01 	vldr	s6, [r8, #4]
 800a60c:	ee35 6ac2 	vsub.f32	s12, s11, s4
 800a610:	eddc 1a01 	vldr	s3, [ip, #4]
 800a614:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800a618:	ee35 3a83 	vadd.f32	s6, s11, s6
 800a61c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a620:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a624:	ee73 5a21 	vadd.f32	s11, s6, s3
 800a628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a62c:	ee36 6a45 	vsub.f32	s12, s12, s10
 800a630:	edc2 5a01 	vstr	s11, [r2, #4]
 800a634:	ee35 5a04 	vadd.f32	s10, s10, s8
 800a638:	9a06      	ldr	r2, [sp, #24]
 800a63a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a63e:	edd2 7a00 	vldr	s15, [r2]
 800a642:	edd2 5a01 	vldr	s11, [r2, #4]
 800a646:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800a64a:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800a64e:	ee64 5aa5 	vmul.f32	s11, s9, s11
 800a652:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800a656:	ee77 7a62 	vsub.f32	s15, s14, s5
 800a65a:	ee74 5a25 	vadd.f32	s11, s8, s11
 800a65e:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800a662:	edc8 5a00 	vstr	s11, [r8]
 800a666:	edc8 4a01 	vstr	s9, [r8, #4]
 800a66a:	edd5 4a01 	vldr	s9, [r5, #4]
 800a66e:	ed95 7a00 	vldr	s14, [r5]
 800a672:	9d07      	ldr	r5, [sp, #28]
 800a674:	ee66 5a87 	vmul.f32	s11, s13, s14
 800a678:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800a67c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a680:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a684:	ee77 6a66 	vsub.f32	s13, s14, s13
 800a688:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a68c:	edc6 6a01 	vstr	s13, [r6, #4]
 800a690:	ed86 6a00 	vstr	s12, [r6]
 800a694:	ed95 6a01 	vldr	s12, [r5, #4]
 800a698:	ed95 7a00 	vldr	s14, [r5]
 800a69c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a69e:	ee65 6a07 	vmul.f32	s13, s10, s14
 800a6a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a6a6:	ee25 5a06 	vmul.f32	s10, s10, s12
 800a6aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a6ae:	ee37 5a45 	vsub.f32	s10, s14, s10
 800a6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b6:	ed8c 5a01 	vstr	s10, [ip, #4]
 800a6ba:	edcc 7a00 	vstr	s15, [ip]
 800a6be:	6872      	ldr	r2, [r6, #4]
 800a6c0:	f000 f890 	bl	800a7e4 <arm_radix8_butterfly_f32>
 800a6c4:	9802      	ldr	r0, [sp, #8]
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	6872      	ldr	r2, [r6, #4]
 800a6ca:	2304      	movs	r3, #4
 800a6cc:	f000 f88a 	bl	800a7e4 <arm_radix8_butterfly_f32>
 800a6d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	6872      	ldr	r2, [r6, #4]
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	f000 f884 	bl	800a7e4 <arm_radix8_butterfly_f32>
 800a6dc:	9803      	ldr	r0, [sp, #12]
 800a6de:	4621      	mov	r1, r4
 800a6e0:	6872      	ldr	r2, [r6, #4]
 800a6e2:	2304      	movs	r3, #4
 800a6e4:	b00f      	add	sp, #60	@ 0x3c
 800a6e6:	ecbd 8b06 	vpop	{d8-d10}
 800a6ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ee:	f000 b879 	b.w	800a7e4 <arm_radix8_butterfly_f32>
 800a6f2:	bf00      	nop

0800a6f4 <arm_cfft_f32>:
 800a6f4:	2a01      	cmp	r2, #1
 800a6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	4617      	mov	r7, r2
 800a6fe:	460c      	mov	r4, r1
 800a700:	4698      	mov	r8, r3
 800a702:	8805      	ldrh	r5, [r0, #0]
 800a704:	d053      	beq.n	800a7ae <arm_cfft_f32+0xba>
 800a706:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a70a:	d04b      	beq.n	800a7a4 <arm_cfft_f32+0xb0>
 800a70c:	d916      	bls.n	800a73c <arm_cfft_f32+0x48>
 800a70e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800a712:	d01a      	beq.n	800a74a <arm_cfft_f32+0x56>
 800a714:	d95a      	bls.n	800a7cc <arm_cfft_f32+0xd8>
 800a716:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800a71a:	d043      	beq.n	800a7a4 <arm_cfft_f32+0xb0>
 800a71c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800a720:	d105      	bne.n	800a72e <arm_cfft_f32+0x3a>
 800a722:	4620      	mov	r0, r4
 800a724:	4629      	mov	r1, r5
 800a726:	6872      	ldr	r2, [r6, #4]
 800a728:	2301      	movs	r3, #1
 800a72a:	f000 f85b 	bl	800a7e4 <arm_radix8_butterfly_f32>
 800a72e:	f1b8 0f00 	cmp.w	r8, #0
 800a732:	d111      	bne.n	800a758 <arm_cfft_f32+0x64>
 800a734:	2f01      	cmp	r7, #1
 800a736:	d016      	beq.n	800a766 <arm_cfft_f32+0x72>
 800a738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a73c:	2d20      	cmp	r5, #32
 800a73e:	d031      	beq.n	800a7a4 <arm_cfft_f32+0xb0>
 800a740:	d948      	bls.n	800a7d4 <arm_cfft_f32+0xe0>
 800a742:	2d40      	cmp	r5, #64	@ 0x40
 800a744:	d0ed      	beq.n	800a722 <arm_cfft_f32+0x2e>
 800a746:	2d80      	cmp	r5, #128	@ 0x80
 800a748:	d1f1      	bne.n	800a72e <arm_cfft_f32+0x3a>
 800a74a:	4630      	mov	r0, r6
 800a74c:	4621      	mov	r1, r4
 800a74e:	f7ff fca7 	bl	800a0a0 <arm_cfft_radix8by2_f32>
 800a752:	f1b8 0f00 	cmp.w	r8, #0
 800a756:	d0ed      	beq.n	800a734 <arm_cfft_f32+0x40>
 800a758:	4620      	mov	r0, r4
 800a75a:	89b1      	ldrh	r1, [r6, #12]
 800a75c:	68b2      	ldr	r2, [r6, #8]
 800a75e:	f7f5 fdbf 	bl	80002e0 <arm_bitreversal_32>
 800a762:	2f01      	cmp	r7, #1
 800a764:	d1e8      	bne.n	800a738 <arm_cfft_f32+0x44>
 800a766:	ee07 5a90 	vmov	s15, r5
 800a76a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a772:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800a776:	2d00      	cmp	r5, #0
 800a778:	d0de      	beq.n	800a738 <arm_cfft_f32+0x44>
 800a77a:	f104 0108 	add.w	r1, r4, #8
 800a77e:	2300      	movs	r3, #0
 800a780:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a784:	3301      	adds	r3, #1
 800a786:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a78a:	3108      	adds	r1, #8
 800a78c:	429d      	cmp	r5, r3
 800a78e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a792:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a796:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a79a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a79e:	d1ef      	bne.n	800a780 <arm_cfft_f32+0x8c>
 800a7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	f7ff fd4c 	bl	800a244 <arm_cfft_radix8by4_f32>
 800a7ac:	e7bf      	b.n	800a72e <arm_cfft_f32+0x3a>
 800a7ae:	b1a5      	cbz	r5, 800a7da <arm_cfft_f32+0xe6>
 800a7b0:	f101 030c 	add.w	r3, r1, #12
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	3308      	adds	r3, #8
 800a7be:	eef1 7a67 	vneg.f32	s15, s15
 800a7c2:	4295      	cmp	r5, r2
 800a7c4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a7c8:	d1f5      	bne.n	800a7b6 <arm_cfft_f32+0xc2>
 800a7ca:	e79c      	b.n	800a706 <arm_cfft_f32+0x12>
 800a7cc:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800a7d0:	d0a7      	beq.n	800a722 <arm_cfft_f32+0x2e>
 800a7d2:	e7ac      	b.n	800a72e <arm_cfft_f32+0x3a>
 800a7d4:	2d10      	cmp	r5, #16
 800a7d6:	d0b8      	beq.n	800a74a <arm_cfft_f32+0x56>
 800a7d8:	e7a9      	b.n	800a72e <arm_cfft_f32+0x3a>
 800a7da:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a7de:	d896      	bhi.n	800a70e <arm_cfft_f32+0x1a>
 800a7e0:	e7ac      	b.n	800a73c <arm_cfft_f32+0x48>
 800a7e2:	bf00      	nop

0800a7e4 <arm_radix8_butterfly_f32>:
 800a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	1d03      	adds	r3, r0, #4
 800a7ec:	4683      	mov	fp, r0
 800a7ee:	468a      	mov	sl, r1
 800a7f0:	4688      	mov	r8, r1
 800a7f2:	469c      	mov	ip, r3
 800a7f4:	ed2d 8b10 	vpush	{d8-d15}
 800a7f8:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800ab0c <arm_radix8_butterfly_f32+0x328>
 800a7fc:	b09f      	sub	sp, #124	@ 0x7c
 800a7fe:	921c      	str	r2, [sp, #112]	@ 0x70
 800a800:	931d      	str	r3, [sp, #116]	@ 0x74
 800a802:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800a806:	f04f 0900 	mov.w	r9, #0
 800a80a:	461a      	mov	r2, r3
 800a80c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a80e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a812:	0051      	lsls	r1, r2, #1
 800a814:	4608      	mov	r0, r1
 800a816:	9103      	str	r1, [sp, #12]
 800a818:	00d1      	lsls	r1, r2, #3
 800a81a:	1885      	adds	r5, r0, r2
 800a81c:	0110      	lsls	r0, r2, #4
 800a81e:	eb0b 0601 	add.w	r6, fp, r1
 800a822:	9101      	str	r1, [sp, #4]
 800a824:	18ac      	adds	r4, r5, r2
 800a826:	9002      	str	r0, [sp, #8]
 800a828:	1877      	adds	r7, r6, r1
 800a82a:	4611      	mov	r1, r2
 800a82c:	4422      	add	r2, r4
 800a82e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800a832:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800a836:	1850      	adds	r0, r2, r1
 800a838:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800a83c:	4401      	add	r1, r0
 800a83e:	3204      	adds	r2, #4
 800a840:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800a844:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800a848:	3104      	adds	r1, #4
 800a84a:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800a84e:	44c1      	add	r9, r8
 800a850:	edd4 6a00 	vldr	s13, [r4]
 800a854:	ed97 6a00 	vldr	s12, [r7]
 800a858:	45ca      	cmp	sl, r9
 800a85a:	edd0 7a00 	vldr	s15, [r0]
 800a85e:	ee37 5a66 	vsub.f32	s10, s14, s13
 800a862:	edd6 5a00 	vldr	s11, [r6]
 800a866:	ee37 2a26 	vadd.f32	s4, s14, s13
 800a86a:	ee76 2a67 	vsub.f32	s5, s12, s15
 800a86e:	edd5 6a00 	vldr	s13, [r5]
 800a872:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a876:	ee76 4a27 	vadd.f32	s9, s12, s15
 800a87a:	ed11 6a01 	vldr	s12, [r1, #-4]
 800a87e:	ee75 1a87 	vadd.f32	s3, s11, s14
 800a882:	ee36 4a86 	vadd.f32	s8, s13, s12
 800a886:	ee72 7a24 	vadd.f32	s15, s4, s9
 800a88a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a88e:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800a892:	ee31 6a84 	vadd.f32	s12, s3, s8
 800a896:	ee32 2a64 	vsub.f32	s4, s4, s9
 800a89a:	ee77 6a65 	vsub.f32	s13, s14, s11
 800a89e:	ee77 4a86 	vadd.f32	s9, s15, s12
 800a8a2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a8a6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a8aa:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800a8ae:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800a8b2:	edc4 7a00 	vstr	s15, [r4]
 800a8b6:	ee66 6a89 	vmul.f32	s13, s13, s18
 800a8ba:	edd6 5a01 	vldr	s11, [r6, #4]
 800a8be:	ee27 6a09 	vmul.f32	s12, s14, s18
 800a8c2:	edd5 3a01 	vldr	s7, [r5, #4]
 800a8c6:	ed92 4a00 	vldr	s8, [r2]
 800a8ca:	ee35 1a26 	vadd.f32	s2, s10, s13
 800a8ce:	edd1 4a00 	vldr	s9, [r1]
 800a8d2:	ee75 6a66 	vsub.f32	s13, s10, s13
 800a8d6:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800a8da:	ed94 0a01 	vldr	s0, [r4, #4]
 800a8de:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800a8e2:	ed9c 7a00 	vldr	s14, [ip]
 800a8e6:	edd0 0a01 	vldr	s1, [r0, #4]
 800a8ea:	ee35 4a84 	vadd.f32	s8, s11, s8
 800a8ee:	ed97 5a01 	vldr	s10, [r7, #4]
 800a8f2:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800a8f6:	ee73 5a27 	vadd.f32	s11, s6, s15
 800a8fa:	ee77 3a00 	vadd.f32	s7, s14, s0
 800a8fe:	ee33 3a67 	vsub.f32	s6, s6, s15
 800a902:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a906:	ee35 0a20 	vadd.f32	s0, s10, s1
 800a90a:	ee63 7a09 	vmul.f32	s15, s6, s18
 800a90e:	ee35 5a60 	vsub.f32	s10, s10, s1
 800a912:	ee33 3a80 	vadd.f32	s6, s7, s0
 800a916:	ee74 0a24 	vadd.f32	s1, s8, s9
 800a91a:	ee65 5a89 	vmul.f32	s11, s11, s18
 800a91e:	ee74 4a64 	vsub.f32	s9, s8, s9
 800a922:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800a926:	ee75 3a25 	vadd.f32	s7, s10, s11
 800a92a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a92e:	ee37 5a27 	vadd.f32	s10, s14, s15
 800a932:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a936:	ee32 7a86 	vadd.f32	s14, s5, s12
 800a93a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800a93e:	ee73 2a20 	vadd.f32	s5, s6, s1
 800a942:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a946:	ee72 0a24 	vadd.f32	s1, s4, s9
 800a94a:	edcc 2a00 	vstr	s5, [ip]
 800a94e:	ee72 4a64 	vsub.f32	s9, s4, s9
 800a952:	ed84 3a01 	vstr	s6, [r4, #4]
 800a956:	ee74 2a61 	vsub.f32	s5, s8, s3
 800a95a:	ee31 3a23 	vadd.f32	s6, s2, s7
 800a95e:	edc7 0a00 	vstr	s1, [r7]
 800a962:	ee31 1a63 	vsub.f32	s2, s2, s7
 800a966:	edc0 4a00 	vstr	s9, [r0]
 800a96a:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800a96e:	edc7 2a01 	vstr	s5, [r7, #4]
 800a972:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800a976:	441c      	add	r4, r3
 800a978:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a97c:	449c      	add	ip, r3
 800a97e:	ee35 5a07 	vadd.f32	s10, s10, s14
 800a982:	441f      	add	r7, r3
 800a984:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800a988:	ee34 4a21 	vadd.f32	s8, s8, s3
 800a98c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a990:	ed80 4a01 	vstr	s8, [r0, #4]
 800a994:	4418      	add	r0, r3
 800a996:	ed86 3a00 	vstr	s6, [r6]
 800a99a:	ed01 1a01 	vstr	s2, [r1, #-4]
 800a99e:	ed42 3a01 	vstr	s7, [r2, #-4]
 800a9a2:	edc5 6a00 	vstr	s13, [r5]
 800a9a6:	edc6 5a01 	vstr	s11, [r6, #4]
 800a9aa:	441e      	add	r6, r3
 800a9ac:	ed81 5a00 	vstr	s10, [r1]
 800a9b0:	4419      	add	r1, r3
 800a9b2:	ed82 7a00 	vstr	s14, [r2]
 800a9b6:	441a      	add	r2, r3
 800a9b8:	edc5 7a01 	vstr	s15, [r5, #4]
 800a9bc:	441d      	add	r5, r3
 800a9be:	f63f af44 	bhi.w	800a84a <arm_radix8_butterfly_f32+0x66>
 800a9c2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800a9c4:	2f07      	cmp	r7, #7
 800a9c6:	f240 81e8 	bls.w	800ad9a <arm_radix8_butterfly_f32+0x5b6>
 800a9ca:	9903      	ldr	r1, [sp, #12]
 800a9cc:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800a9d0:	9e01      	ldr	r6, [sp, #4]
 800a9d2:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800a9d6:	19ca      	adds	r2, r1, r7
 800a9d8:	1c4c      	adds	r4, r1, #1
 800a9da:	eb05 010e 	add.w	r1, r5, lr
 800a9de:	00ed      	lsls	r5, r5, #3
 800a9e0:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800a9e4:	3608      	adds	r6, #8
 800a9e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a9e8:	eb01 050e 	add.w	r5, r1, lr
 800a9ec:	00c9      	lsls	r1, r1, #3
 800a9ee:	443c      	add	r4, r7
 800a9f0:	9618      	str	r6, [sp, #96]	@ 0x60
 800a9f2:	00ee      	lsls	r6, r5, #3
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	9114      	str	r1, [sp, #80]	@ 0x50
 800a9f8:	9902      	ldr	r1, [sp, #8]
 800a9fa:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800a9fe:	9611      	str	r6, [sp, #68]	@ 0x44
 800aa00:	00c0      	lsls	r0, r0, #3
 800aa02:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800aa04:	3108      	adds	r1, #8
 800aa06:	3404      	adds	r4, #4
 800aa08:	f04f 0901 	mov.w	r9, #1
 800aa0c:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa0e:	eb05 010e 	add.w	r1, r5, lr
 800aa12:	4635      	mov	r5, r6
 800aa14:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa16:	9301      	str	r3, [sp, #4]
 800aa18:	443d      	add	r5, r7
 800aa1a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800aa1c:	9507      	str	r5, [sp, #28]
 800aa1e:	eb01 050e 	add.w	r5, r1, lr
 800aa22:	00c9      	lsls	r1, r1, #3
 800aa24:	19f7      	adds	r7, r6, r7
 800aa26:	00ed      	lsls	r5, r5, #3
 800aa28:	9110      	str	r1, [sp, #64]	@ 0x40
 800aa2a:	00d1      	lsls	r1, r2, #3
 800aa2c:	970a      	str	r7, [sp, #40]	@ 0x28
 800aa2e:	462f      	mov	r7, r5
 800aa30:	9515      	str	r5, [sp, #84]	@ 0x54
 800aa32:	0112      	lsls	r2, r2, #4
 800aa34:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800aa36:	19f4      	adds	r4, r6, r7
 800aa38:	320c      	adds	r2, #12
 800aa3a:	3108      	adds	r1, #8
 800aa3c:	1975      	adds	r5, r6, r5
 800aa3e:	9408      	str	r4, [sp, #32]
 800aa40:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa42:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800aa46:	9509      	str	r5, [sp, #36]	@ 0x24
 800aa48:	f100 020c 	add.w	r2, r0, #12
 800aa4c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800aa4e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800aa50:	1975      	adds	r5, r6, r5
 800aa52:	9216      	str	r2, [sp, #88]	@ 0x58
 800aa54:	1932      	adds	r2, r6, r4
 800aa56:	911b      	str	r1, [sp, #108]	@ 0x6c
 800aa58:	9505      	str	r5, [sp, #20]
 800aa5a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800aa5e:	0179      	lsls	r1, r7, #5
 800aa60:	9204      	str	r2, [sp, #16]
 800aa62:	1972      	adds	r2, r6, r5
 800aa64:	9412      	str	r4, [sp, #72]	@ 0x48
 800aa66:	9513      	str	r5, [sp, #76]	@ 0x4c
 800aa68:	9206      	str	r2, [sp, #24]
 800aa6a:	f101 0208 	add.w	r2, r1, #8
 800aa6e:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa70:	2200      	movs	r2, #0
 800aa72:	f102 0108 	add.w	r1, r2, #8
 800aa76:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa78:	46cc      	mov	ip, r9
 800aa7a:	460f      	mov	r7, r1
 800aa7c:	910c      	str	r1, [sp, #48]	@ 0x30
 800aa7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa80:	eb0b 0e07 	add.w	lr, fp, r7
 800aa84:	9f04      	ldr	r7, [sp, #16]
 800aa86:	188e      	adds	r6, r1, r2
 800aa88:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800aa8a:	edd7 fa00 	vldr	s31, [r7]
 800aa8e:	9f06      	ldr	r7, [sp, #24]
 800aa90:	188d      	adds	r5, r1, r2
 800aa92:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800aa94:	445e      	add	r6, fp
 800aa96:	ed97 fa00 	vldr	s30, [r7]
 800aa9a:	445d      	add	r5, fp
 800aa9c:	9f05      	ldr	r7, [sp, #20]
 800aa9e:	188c      	adds	r4, r1, r2
 800aaa0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800aaa2:	edd7 ea00 	vldr	s29, [r7]
 800aaa6:	445c      	add	r4, fp
 800aaa8:	9f07      	ldr	r7, [sp, #28]
 800aaaa:	1888      	adds	r0, r1, r2
 800aaac:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800aaae:	ed97 ea00 	vldr	s28, [r7]
 800aab2:	4458      	add	r0, fp
 800aab4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800aab6:	4411      	add	r1, r2
 800aab8:	441a      	add	r2, r3
 800aaba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aabc:	edd7 da00 	vldr	s27, [r7]
 800aac0:	4459      	add	r1, fp
 800aac2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800aac4:	445a      	add	r2, fp
 800aac6:	930d      	str	r3, [sp, #52]	@ 0x34
 800aac8:	ed97 da00 	vldr	s26, [r7]
 800aacc:	9f08      	ldr	r7, [sp, #32]
 800aace:	edd7 ca00 	vldr	s25, [r7]
 800aad2:	9f04      	ldr	r7, [sp, #16]
 800aad4:	ed97 ca01 	vldr	s24, [r7, #4]
 800aad8:	9f06      	ldr	r7, [sp, #24]
 800aada:	edd7 ba01 	vldr	s23, [r7, #4]
 800aade:	9f05      	ldr	r7, [sp, #20]
 800aae0:	ed97 ba01 	vldr	s22, [r7, #4]
 800aae4:	9f07      	ldr	r7, [sp, #28]
 800aae6:	edd7 aa01 	vldr	s21, [r7, #4]
 800aaea:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800aaec:	ed97 aa01 	vldr	s20, [r7, #4]
 800aaf0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800aaf2:	9b01      	ldr	r3, [sp, #4]
 800aaf4:	edd7 7a01 	vldr	s15, [r7, #4]
 800aaf8:	9f08      	ldr	r7, [sp, #32]
 800aafa:	edcd 7a02 	vstr	s15, [sp, #8]
 800aafe:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab02:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800ab04:	edcd 7a03 	vstr	s15, [sp, #12]
 800ab08:	e002      	b.n	800ab10 <arm_radix8_butterfly_f32+0x32c>
 800ab0a:	bf00      	nop
 800ab0c:	3f3504f3 	.word	0x3f3504f3
 800ab10:	ed90 2a00 	vldr	s4, [r0]
 800ab14:	44c4      	add	ip, r8
 800ab16:	ed96 7a00 	vldr	s14, [r6]
 800ab1a:	ed94 8a00 	vldr	s16, [r4]
 800ab1e:	45e2      	cmp	sl, ip
 800ab20:	ed52 7a01 	vldr	s15, [r2, #-4]
 800ab24:	ed95 5a00 	vldr	s10, [r5]
 800ab28:	ed51 5a01 	vldr	s11, [r1, #-4]
 800ab2c:	ee38 6a27 	vadd.f32	s12, s16, s15
 800ab30:	ed9e 1a00 	vldr	s2, [lr]
 800ab34:	ee78 2a67 	vsub.f32	s5, s16, s15
 800ab38:	ed17 4a01 	vldr	s8, [r7, #-4]
 800ab3c:	ee75 3a25 	vadd.f32	s7, s10, s11
 800ab40:	ee31 3a07 	vadd.f32	s6, s2, s14
 800ab44:	edde 4a01 	vldr	s9, [lr, #4]
 800ab48:	ee72 6a04 	vadd.f32	s13, s4, s8
 800ab4c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ab50:	ee73 1a06 	vadd.f32	s3, s6, s12
 800ab54:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800ab58:	ee32 4a44 	vsub.f32	s8, s4, s8
 800ab5c:	ee31 1a47 	vsub.f32	s2, s2, s14
 800ab60:	ee31 7a85 	vadd.f32	s14, s3, s10
 800ab64:	ee75 7a84 	vadd.f32	s15, s11, s8
 800ab68:	ee33 3a46 	vsub.f32	s6, s6, s12
 800ab6c:	ed8e 7a00 	vstr	s14, [lr]
 800ab70:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800ab74:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ab78:	ed90 2a01 	vldr	s4, [r0, #4]
 800ab7c:	ed95 7a01 	vldr	s14, [r5, #4]
 800ab80:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800ab84:	ed91 6a00 	vldr	s12, [r1]
 800ab88:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800ab8c:	edd7 8a00 	vldr	s17, [r7]
 800ab90:	ee32 8ae7 	vsub.f32	s16, s5, s15
 800ab94:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800ab98:	edd2 0a00 	vldr	s1, [r2]
 800ab9c:	ee72 6a68 	vsub.f32	s13, s4, s17
 800aba0:	edd6 7a01 	vldr	s15, [r6, #4]
 800aba4:	ee77 2a46 	vsub.f32	s5, s14, s12
 800aba8:	ee37 0a06 	vadd.f32	s0, s14, s12
 800abac:	ed94 7a01 	vldr	s14, [r4, #4]
 800abb0:	ee32 6a28 	vadd.f32	s12, s4, s17
 800abb4:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800abb8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800abbc:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800abc0:	ee77 6a20 	vadd.f32	s13, s14, s1
 800abc4:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800abc8:	ee37 7a60 	vsub.f32	s14, s14, s1
 800abcc:	ee24 4a09 	vmul.f32	s8, s8, s18
 800abd0:	ee70 0a06 	vadd.f32	s1, s0, s12
 800abd4:	ee69 7a89 	vmul.f32	s15, s19, s18
 800abd8:	ee62 2a89 	vmul.f32	s5, s5, s18
 800abdc:	ee30 6a46 	vsub.f32	s12, s0, s12
 800abe0:	ee32 0a26 	vadd.f32	s0, s4, s13
 800abe4:	ee72 6a66 	vsub.f32	s13, s4, s13
 800abe8:	ee77 8a62 	vsub.f32	s17, s14, s5
 800abec:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800abf0:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800abf4:	ee77 4a22 	vadd.f32	s9, s14, s5
 800abf8:	ee71 2a04 	vadd.f32	s5, s2, s8
 800abfc:	ee31 7a44 	vsub.f32	s14, s2, s8
 800ac00:	ee30 1a60 	vsub.f32	s2, s0, s1
 800ac04:	ee73 1a06 	vadd.f32	s3, s6, s12
 800ac08:	ee33 6a46 	vsub.f32	s12, s6, s12
 800ac0c:	ee36 3ae3 	vsub.f32	s6, s13, s7
 800ac10:	ee37 4ac8 	vsub.f32	s8, s15, s16
 800ac14:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800ac18:	ee77 7a88 	vadd.f32	s15, s15, s16
 800ac1c:	ee72 3a65 	vsub.f32	s7, s4, s11
 800ac20:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800ac24:	ee72 5a25 	vadd.f32	s11, s4, s11
 800ac28:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800ac2c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800ac30:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800ac34:	ee77 2a28 	vadd.f32	s5, s14, s17
 800ac38:	ee37 7a68 	vsub.f32	s14, s14, s17
 800ac3c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800ac40:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800ac44:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800ac48:	ee70 0a20 	vadd.f32	s1, s0, s1
 800ac4c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800ac50:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800ac54:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800ac58:	edce 0a01 	vstr	s1, [lr, #4]
 800ac5c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800ac60:	449e      	add	lr, r3
 800ac62:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800ac66:	ee31 5a45 	vsub.f32	s10, s2, s10
 800ac6a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800ac6e:	ed86 8a00 	vstr	s16, [r6]
 800ac72:	ee39 0a80 	vadd.f32	s0, s19, s0
 800ac76:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ac7a:	ed86 5a01 	vstr	s10, [r6, #4]
 800ac7e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800ac82:	edcd 3a01 	vstr	s7, [sp, #4]
 800ac86:	ed9d 5a03 	vldr	s10, [sp, #12]
 800ac8a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800ac8e:	eddd 3a02 	vldr	s7, [sp, #8]
 800ac92:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800ac96:	ed84 0a00 	vstr	s0, [r4]
 800ac9a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ac9e:	ed84 3a01 	vstr	s6, [r4, #4]
 800aca2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800aca6:	ee23 6a86 	vmul.f32	s12, s7, s12
 800acaa:	eddd 3a01 	vldr	s7, [sp, #4]
 800acae:	ee25 5a25 	vmul.f32	s10, s10, s11
 800acb2:	441e      	add	r6, r3
 800acb4:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800acb8:	441c      	add	r4, r3
 800acba:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800acbe:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800acc2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800acc6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800acca:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800acce:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800acd2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800acd6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800acda:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800acde:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800ace2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800ace6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800acea:	ee38 8a01 	vadd.f32	s16, s16, s2
 800acee:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800acf2:	ee39 5a85 	vadd.f32	s10, s19, s10
 800acf6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800acfa:	ed02 8a01 	vstr	s16, [r2, #-4]
 800acfe:	ee30 0a21 	vadd.f32	s0, s0, s3
 800ad02:	ed82 6a00 	vstr	s12, [r2]
 800ad06:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ad0a:	edc5 0a00 	vstr	s1, [r5]
 800ad0e:	ee33 3a28 	vadd.f32	s6, s6, s17
 800ad12:	edc5 3a01 	vstr	s7, [r5, #4]
 800ad16:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ad1a:	ed07 5a01 	vstr	s10, [r7, #-4]
 800ad1e:	edc7 4a00 	vstr	s9, [r7]
 800ad22:	441d      	add	r5, r3
 800ad24:	ed01 0a01 	vstr	s0, [r1, #-4]
 800ad28:	441a      	add	r2, r3
 800ad2a:	edc1 2a00 	vstr	s5, [r1]
 800ad2e:	441f      	add	r7, r3
 800ad30:	ed80 3a00 	vstr	s6, [r0]
 800ad34:	4419      	add	r1, r3
 800ad36:	ed80 7a01 	vstr	s14, [r0, #4]
 800ad3a:	4418      	add	r0, r3
 800ad3c:	f63f aee8 	bhi.w	800ab10 <arm_radix8_butterfly_f32+0x32c>
 800ad40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ad42:	f109 0901 	add.w	r9, r9, #1
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad4e:	9304      	str	r3, [sp, #16]
 800ad50:	9b06      	ldr	r3, [sp, #24]
 800ad52:	4413      	add	r3, r2
 800ad54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad56:	9306      	str	r3, [sp, #24]
 800ad58:	9b05      	ldr	r3, [sp, #20]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad5e:	9305      	str	r3, [sp, #20]
 800ad60:	9b07      	ldr	r3, [sp, #28]
 800ad62:	4413      	add	r3, r2
 800ad64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad66:	9307      	str	r3, [sp, #28]
 800ad68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad6a:	4413      	add	r3, r2
 800ad6c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ad6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad72:	4413      	add	r3, r2
 800ad74:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ad76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad78:	9b08      	ldr	r3, [sp, #32]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad7e:	9308      	str	r3, [sp, #32]
 800ad80:	3208      	adds	r2, #8
 800ad82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad84:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad86:	4599      	cmp	r9, r3
 800ad88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad8a:	f47f ae72 	bne.w	800aa72 <arm_radix8_butterfly_f32+0x28e>
 800ad8e:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800ad92:	46c8      	mov	r8, r9
 800ad94:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800ad98:	e533      	b.n	800a802 <arm_radix8_butterfly_f32+0x1e>
 800ad9a:	b01f      	add	sp, #124	@ 0x7c
 800ad9c:	ecbd 8b10 	vpop	{d8-d15}
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ada4 <__cvt>:
 800ada4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada6:	ed2d 8b02 	vpush	{d8}
 800adaa:	eeb0 8b40 	vmov.f64	d8, d0
 800adae:	b085      	sub	sp, #20
 800adb0:	4617      	mov	r7, r2
 800adb2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800adb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adb6:	ee18 2a90 	vmov	r2, s17
 800adba:	f025 0520 	bic.w	r5, r5, #32
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	bfb6      	itet	lt
 800adc2:	222d      	movlt	r2, #45	@ 0x2d
 800adc4:	2200      	movge	r2, #0
 800adc6:	eeb1 8b40 	vneglt.f64	d8, d0
 800adca:	2d46      	cmp	r5, #70	@ 0x46
 800adcc:	460c      	mov	r4, r1
 800adce:	701a      	strb	r2, [r3, #0]
 800add0:	d004      	beq.n	800addc <__cvt+0x38>
 800add2:	2d45      	cmp	r5, #69	@ 0x45
 800add4:	d100      	bne.n	800add8 <__cvt+0x34>
 800add6:	3401      	adds	r4, #1
 800add8:	2102      	movs	r1, #2
 800adda:	e000      	b.n	800adde <__cvt+0x3a>
 800addc:	2103      	movs	r1, #3
 800adde:	ab03      	add	r3, sp, #12
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	ab02      	add	r3, sp, #8
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	4622      	mov	r2, r4
 800ade8:	4633      	mov	r3, r6
 800adea:	eeb0 0b48 	vmov.f64	d0, d8
 800adee:	f000 fe53 	bl	800ba98 <_dtoa_r>
 800adf2:	2d47      	cmp	r5, #71	@ 0x47
 800adf4:	d114      	bne.n	800ae20 <__cvt+0x7c>
 800adf6:	07fb      	lsls	r3, r7, #31
 800adf8:	d50a      	bpl.n	800ae10 <__cvt+0x6c>
 800adfa:	1902      	adds	r2, r0, r4
 800adfc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	bf08      	it	eq
 800ae06:	9203      	streq	r2, [sp, #12]
 800ae08:	2130      	movs	r1, #48	@ 0x30
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d319      	bcc.n	800ae44 <__cvt+0xa0>
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae14:	1a1b      	subs	r3, r3, r0
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	b005      	add	sp, #20
 800ae1a:	ecbd 8b02 	vpop	{d8}
 800ae1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae20:	2d46      	cmp	r5, #70	@ 0x46
 800ae22:	eb00 0204 	add.w	r2, r0, r4
 800ae26:	d1e9      	bne.n	800adfc <__cvt+0x58>
 800ae28:	7803      	ldrb	r3, [r0, #0]
 800ae2a:	2b30      	cmp	r3, #48	@ 0x30
 800ae2c:	d107      	bne.n	800ae3e <__cvt+0x9a>
 800ae2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	bf1c      	itt	ne
 800ae38:	f1c4 0401 	rsbne	r4, r4, #1
 800ae3c:	6034      	strne	r4, [r6, #0]
 800ae3e:	6833      	ldr	r3, [r6, #0]
 800ae40:	441a      	add	r2, r3
 800ae42:	e7db      	b.n	800adfc <__cvt+0x58>
 800ae44:	1c5c      	adds	r4, r3, #1
 800ae46:	9403      	str	r4, [sp, #12]
 800ae48:	7019      	strb	r1, [r3, #0]
 800ae4a:	e7de      	b.n	800ae0a <__cvt+0x66>

0800ae4c <__exponent>:
 800ae4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae4e:	2900      	cmp	r1, #0
 800ae50:	bfba      	itte	lt
 800ae52:	4249      	neglt	r1, r1
 800ae54:	232d      	movlt	r3, #45	@ 0x2d
 800ae56:	232b      	movge	r3, #43	@ 0x2b
 800ae58:	2909      	cmp	r1, #9
 800ae5a:	7002      	strb	r2, [r0, #0]
 800ae5c:	7043      	strb	r3, [r0, #1]
 800ae5e:	dd29      	ble.n	800aeb4 <__exponent+0x68>
 800ae60:	f10d 0307 	add.w	r3, sp, #7
 800ae64:	461d      	mov	r5, r3
 800ae66:	270a      	movs	r7, #10
 800ae68:	461a      	mov	r2, r3
 800ae6a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae6e:	fb07 1416 	mls	r4, r7, r6, r1
 800ae72:	3430      	adds	r4, #48	@ 0x30
 800ae74:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae78:	460c      	mov	r4, r1
 800ae7a:	2c63      	cmp	r4, #99	@ 0x63
 800ae7c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae80:	4631      	mov	r1, r6
 800ae82:	dcf1      	bgt.n	800ae68 <__exponent+0x1c>
 800ae84:	3130      	adds	r1, #48	@ 0x30
 800ae86:	1e94      	subs	r4, r2, #2
 800ae88:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae8c:	1c41      	adds	r1, r0, #1
 800ae8e:	4623      	mov	r3, r4
 800ae90:	42ab      	cmp	r3, r5
 800ae92:	d30a      	bcc.n	800aeaa <__exponent+0x5e>
 800ae94:	f10d 0309 	add.w	r3, sp, #9
 800ae98:	1a9b      	subs	r3, r3, r2
 800ae9a:	42ac      	cmp	r4, r5
 800ae9c:	bf88      	it	hi
 800ae9e:	2300      	movhi	r3, #0
 800aea0:	3302      	adds	r3, #2
 800aea2:	4403      	add	r3, r0
 800aea4:	1a18      	subs	r0, r3, r0
 800aea6:	b003      	add	sp, #12
 800aea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeaa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aeae:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aeb2:	e7ed      	b.n	800ae90 <__exponent+0x44>
 800aeb4:	2330      	movs	r3, #48	@ 0x30
 800aeb6:	3130      	adds	r1, #48	@ 0x30
 800aeb8:	7083      	strb	r3, [r0, #2]
 800aeba:	70c1      	strb	r1, [r0, #3]
 800aebc:	1d03      	adds	r3, r0, #4
 800aebe:	e7f1      	b.n	800aea4 <__exponent+0x58>

0800aec0 <_printf_float>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	b08d      	sub	sp, #52	@ 0x34
 800aec6:	460c      	mov	r4, r1
 800aec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aecc:	4616      	mov	r6, r2
 800aece:	461f      	mov	r7, r3
 800aed0:	4605      	mov	r5, r0
 800aed2:	f000 fcdf 	bl	800b894 <_localeconv_r>
 800aed6:	f8d0 b000 	ldr.w	fp, [r0]
 800aeda:	4658      	mov	r0, fp
 800aedc:	f7f5 fab0 	bl	8000440 <strlen>
 800aee0:	2300      	movs	r3, #0
 800aee2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aee4:	f8d8 3000 	ldr.w	r3, [r8]
 800aee8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800aeec:	6822      	ldr	r2, [r4, #0]
 800aeee:	9005      	str	r0, [sp, #20]
 800aef0:	3307      	adds	r3, #7
 800aef2:	f023 0307 	bic.w	r3, r3, #7
 800aef6:	f103 0108 	add.w	r1, r3, #8
 800aefa:	f8c8 1000 	str.w	r1, [r8]
 800aefe:	ed93 0b00 	vldr	d0, [r3]
 800af02:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b160 <_printf_float+0x2a0>
 800af06:	eeb0 7bc0 	vabs.f64	d7, d0
 800af0a:	eeb4 7b46 	vcmp.f64	d7, d6
 800af0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af12:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800af16:	dd24      	ble.n	800af62 <_printf_float+0xa2>
 800af18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800af1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af20:	d502      	bpl.n	800af28 <_printf_float+0x68>
 800af22:	232d      	movs	r3, #45	@ 0x2d
 800af24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af28:	498f      	ldr	r1, [pc, #572]	@ (800b168 <_printf_float+0x2a8>)
 800af2a:	4b90      	ldr	r3, [pc, #576]	@ (800b16c <_printf_float+0x2ac>)
 800af2c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800af30:	bf8c      	ite	hi
 800af32:	4688      	movhi	r8, r1
 800af34:	4698      	movls	r8, r3
 800af36:	f022 0204 	bic.w	r2, r2, #4
 800af3a:	2303      	movs	r3, #3
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	6022      	str	r2, [r4, #0]
 800af40:	f04f 0a00 	mov.w	sl, #0
 800af44:	9700      	str	r7, [sp, #0]
 800af46:	4633      	mov	r3, r6
 800af48:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af4a:	4621      	mov	r1, r4
 800af4c:	4628      	mov	r0, r5
 800af4e:	f000 f9d1 	bl	800b2f4 <_printf_common>
 800af52:	3001      	adds	r0, #1
 800af54:	f040 8089 	bne.w	800b06a <_printf_float+0x1aa>
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	b00d      	add	sp, #52	@ 0x34
 800af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af62:	eeb4 0b40 	vcmp.f64	d0, d0
 800af66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6a:	d709      	bvc.n	800af80 <_printf_float+0xc0>
 800af6c:	ee10 3a90 	vmov	r3, s1
 800af70:	2b00      	cmp	r3, #0
 800af72:	bfbc      	itt	lt
 800af74:	232d      	movlt	r3, #45	@ 0x2d
 800af76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af7a:	497d      	ldr	r1, [pc, #500]	@ (800b170 <_printf_float+0x2b0>)
 800af7c:	4b7d      	ldr	r3, [pc, #500]	@ (800b174 <_printf_float+0x2b4>)
 800af7e:	e7d5      	b.n	800af2c <_printf_float+0x6c>
 800af80:	6863      	ldr	r3, [r4, #4]
 800af82:	1c59      	adds	r1, r3, #1
 800af84:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800af88:	d139      	bne.n	800affe <_printf_float+0x13e>
 800af8a:	2306      	movs	r3, #6
 800af8c:	6063      	str	r3, [r4, #4]
 800af8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af92:	2300      	movs	r3, #0
 800af94:	6022      	str	r2, [r4, #0]
 800af96:	9303      	str	r3, [sp, #12]
 800af98:	ab0a      	add	r3, sp, #40	@ 0x28
 800af9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800af9e:	ab09      	add	r3, sp, #36	@ 0x24
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	6861      	ldr	r1, [r4, #4]
 800afa4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800afa8:	4628      	mov	r0, r5
 800afaa:	f7ff fefb 	bl	800ada4 <__cvt>
 800afae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800afb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afb4:	4680      	mov	r8, r0
 800afb6:	d129      	bne.n	800b00c <_printf_float+0x14c>
 800afb8:	1cc8      	adds	r0, r1, #3
 800afba:	db02      	blt.n	800afc2 <_printf_float+0x102>
 800afbc:	6863      	ldr	r3, [r4, #4]
 800afbe:	4299      	cmp	r1, r3
 800afc0:	dd41      	ble.n	800b046 <_printf_float+0x186>
 800afc2:	f1a9 0902 	sub.w	r9, r9, #2
 800afc6:	fa5f f989 	uxtb.w	r9, r9
 800afca:	3901      	subs	r1, #1
 800afcc:	464a      	mov	r2, r9
 800afce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800afd2:	9109      	str	r1, [sp, #36]	@ 0x24
 800afd4:	f7ff ff3a 	bl	800ae4c <__exponent>
 800afd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afda:	1813      	adds	r3, r2, r0
 800afdc:	2a01      	cmp	r2, #1
 800afde:	4682      	mov	sl, r0
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	dc02      	bgt.n	800afea <_printf_float+0x12a>
 800afe4:	6822      	ldr	r2, [r4, #0]
 800afe6:	07d2      	lsls	r2, r2, #31
 800afe8:	d501      	bpl.n	800afee <_printf_float+0x12e>
 800afea:	3301      	adds	r3, #1
 800afec:	6123      	str	r3, [r4, #16]
 800afee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0a6      	beq.n	800af44 <_printf_float+0x84>
 800aff6:	232d      	movs	r3, #45	@ 0x2d
 800aff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800affc:	e7a2      	b.n	800af44 <_printf_float+0x84>
 800affe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b002:	d1c4      	bne.n	800af8e <_printf_float+0xce>
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1c2      	bne.n	800af8e <_printf_float+0xce>
 800b008:	2301      	movs	r3, #1
 800b00a:	e7bf      	b.n	800af8c <_printf_float+0xcc>
 800b00c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b010:	d9db      	bls.n	800afca <_printf_float+0x10a>
 800b012:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b016:	d118      	bne.n	800b04a <_printf_float+0x18a>
 800b018:	2900      	cmp	r1, #0
 800b01a:	6863      	ldr	r3, [r4, #4]
 800b01c:	dd0b      	ble.n	800b036 <_printf_float+0x176>
 800b01e:	6121      	str	r1, [r4, #16]
 800b020:	b913      	cbnz	r3, 800b028 <_printf_float+0x168>
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	07d0      	lsls	r0, r2, #31
 800b026:	d502      	bpl.n	800b02e <_printf_float+0x16e>
 800b028:	3301      	adds	r3, #1
 800b02a:	440b      	add	r3, r1
 800b02c:	6123      	str	r3, [r4, #16]
 800b02e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b030:	f04f 0a00 	mov.w	sl, #0
 800b034:	e7db      	b.n	800afee <_printf_float+0x12e>
 800b036:	b913      	cbnz	r3, 800b03e <_printf_float+0x17e>
 800b038:	6822      	ldr	r2, [r4, #0]
 800b03a:	07d2      	lsls	r2, r2, #31
 800b03c:	d501      	bpl.n	800b042 <_printf_float+0x182>
 800b03e:	3302      	adds	r3, #2
 800b040:	e7f4      	b.n	800b02c <_printf_float+0x16c>
 800b042:	2301      	movs	r3, #1
 800b044:	e7f2      	b.n	800b02c <_printf_float+0x16c>
 800b046:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b04a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04c:	4299      	cmp	r1, r3
 800b04e:	db05      	blt.n	800b05c <_printf_float+0x19c>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	6121      	str	r1, [r4, #16]
 800b054:	07d8      	lsls	r0, r3, #31
 800b056:	d5ea      	bpl.n	800b02e <_printf_float+0x16e>
 800b058:	1c4b      	adds	r3, r1, #1
 800b05a:	e7e7      	b.n	800b02c <_printf_float+0x16c>
 800b05c:	2900      	cmp	r1, #0
 800b05e:	bfd4      	ite	le
 800b060:	f1c1 0202 	rsble	r2, r1, #2
 800b064:	2201      	movgt	r2, #1
 800b066:	4413      	add	r3, r2
 800b068:	e7e0      	b.n	800b02c <_printf_float+0x16c>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	055a      	lsls	r2, r3, #21
 800b06e:	d407      	bmi.n	800b080 <_printf_float+0x1c0>
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	4642      	mov	r2, r8
 800b074:	4631      	mov	r1, r6
 800b076:	4628      	mov	r0, r5
 800b078:	47b8      	blx	r7
 800b07a:	3001      	adds	r0, #1
 800b07c:	d12a      	bne.n	800b0d4 <_printf_float+0x214>
 800b07e:	e76b      	b.n	800af58 <_printf_float+0x98>
 800b080:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b084:	f240 80e0 	bls.w	800b248 <_printf_float+0x388>
 800b088:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b08c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b094:	d133      	bne.n	800b0fe <_printf_float+0x23e>
 800b096:	4a38      	ldr	r2, [pc, #224]	@ (800b178 <_printf_float+0x2b8>)
 800b098:	2301      	movs	r3, #1
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b8      	blx	r7
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f43f af59 	beq.w	800af58 <_printf_float+0x98>
 800b0a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b0aa:	4543      	cmp	r3, r8
 800b0ac:	db02      	blt.n	800b0b4 <_printf_float+0x1f4>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	07d8      	lsls	r0, r3, #31
 800b0b2:	d50f      	bpl.n	800b0d4 <_printf_float+0x214>
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	465a      	mov	r2, fp
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	47b8      	blx	r7
 800b0be:	3001      	adds	r0, #1
 800b0c0:	f43f af4a 	beq.w	800af58 <_printf_float+0x98>
 800b0c4:	f04f 0900 	mov.w	r9, #0
 800b0c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0cc:	f104 0a1a 	add.w	sl, r4, #26
 800b0d0:	45c8      	cmp	r8, r9
 800b0d2:	dc09      	bgt.n	800b0e8 <_printf_float+0x228>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	079b      	lsls	r3, r3, #30
 800b0d8:	f100 8107 	bmi.w	800b2ea <_printf_float+0x42a>
 800b0dc:	68e0      	ldr	r0, [r4, #12]
 800b0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0e0:	4298      	cmp	r0, r3
 800b0e2:	bfb8      	it	lt
 800b0e4:	4618      	movlt	r0, r3
 800b0e6:	e739      	b.n	800af5c <_printf_float+0x9c>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f af30 	beq.w	800af58 <_printf_float+0x98>
 800b0f8:	f109 0901 	add.w	r9, r9, #1
 800b0fc:	e7e8      	b.n	800b0d0 <_printf_float+0x210>
 800b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc3b      	bgt.n	800b17c <_printf_float+0x2bc>
 800b104:	4a1c      	ldr	r2, [pc, #112]	@ (800b178 <_printf_float+0x2b8>)
 800b106:	2301      	movs	r3, #1
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f af22 	beq.w	800af58 <_printf_float+0x98>
 800b114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b118:	ea59 0303 	orrs.w	r3, r9, r3
 800b11c:	d102      	bne.n	800b124 <_printf_float+0x264>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	07d9      	lsls	r1, r3, #31
 800b122:	d5d7      	bpl.n	800b0d4 <_printf_float+0x214>
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	465a      	mov	r2, fp
 800b128:	4631      	mov	r1, r6
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b8      	blx	r7
 800b12e:	3001      	adds	r0, #1
 800b130:	f43f af12 	beq.w	800af58 <_printf_float+0x98>
 800b134:	f04f 0a00 	mov.w	sl, #0
 800b138:	f104 0b1a 	add.w	fp, r4, #26
 800b13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13e:	425b      	negs	r3, r3
 800b140:	4553      	cmp	r3, sl
 800b142:	dc01      	bgt.n	800b148 <_printf_float+0x288>
 800b144:	464b      	mov	r3, r9
 800b146:	e794      	b.n	800b072 <_printf_float+0x1b2>
 800b148:	2301      	movs	r3, #1
 800b14a:	465a      	mov	r2, fp
 800b14c:	4631      	mov	r1, r6
 800b14e:	4628      	mov	r0, r5
 800b150:	47b8      	blx	r7
 800b152:	3001      	adds	r0, #1
 800b154:	f43f af00 	beq.w	800af58 <_printf_float+0x98>
 800b158:	f10a 0a01 	add.w	sl, sl, #1
 800b15c:	e7ee      	b.n	800b13c <_printf_float+0x27c>
 800b15e:	bf00      	nop
 800b160:	ffffffff 	.word	0xffffffff
 800b164:	7fefffff 	.word	0x7fefffff
 800b168:	080215a8 	.word	0x080215a8
 800b16c:	080215a4 	.word	0x080215a4
 800b170:	080215b0 	.word	0x080215b0
 800b174:	080215ac 	.word	0x080215ac
 800b178:	080215b4 	.word	0x080215b4
 800b17c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b17e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b182:	4553      	cmp	r3, sl
 800b184:	bfa8      	it	ge
 800b186:	4653      	movge	r3, sl
 800b188:	2b00      	cmp	r3, #0
 800b18a:	4699      	mov	r9, r3
 800b18c:	dc37      	bgt.n	800b1fe <_printf_float+0x33e>
 800b18e:	2300      	movs	r3, #0
 800b190:	9307      	str	r3, [sp, #28]
 800b192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b196:	f104 021a 	add.w	r2, r4, #26
 800b19a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b19c:	9907      	ldr	r1, [sp, #28]
 800b19e:	9306      	str	r3, [sp, #24]
 800b1a0:	eba3 0309 	sub.w	r3, r3, r9
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	dc31      	bgt.n	800b20c <_printf_float+0x34c>
 800b1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1aa:	459a      	cmp	sl, r3
 800b1ac:	dc3b      	bgt.n	800b226 <_printf_float+0x366>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	07da      	lsls	r2, r3, #31
 800b1b2:	d438      	bmi.n	800b226 <_printf_float+0x366>
 800b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b6:	ebaa 0903 	sub.w	r9, sl, r3
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b1c0:	4599      	cmp	r9, r3
 800b1c2:	bfa8      	it	ge
 800b1c4:	4699      	movge	r9, r3
 800b1c6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ca:	dc34      	bgt.n	800b236 <_printf_float+0x376>
 800b1cc:	f04f 0800 	mov.w	r8, #0
 800b1d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1d4:	f104 0b1a 	add.w	fp, r4, #26
 800b1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1da:	ebaa 0303 	sub.w	r3, sl, r3
 800b1de:	eba3 0309 	sub.w	r3, r3, r9
 800b1e2:	4543      	cmp	r3, r8
 800b1e4:	f77f af76 	ble.w	800b0d4 <_printf_float+0x214>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	465a      	mov	r2, fp
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b8      	blx	r7
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	f43f aeb0 	beq.w	800af58 <_printf_float+0x98>
 800b1f8:	f108 0801 	add.w	r8, r8, #1
 800b1fc:	e7ec      	b.n	800b1d8 <_printf_float+0x318>
 800b1fe:	4642      	mov	r2, r8
 800b200:	4631      	mov	r1, r6
 800b202:	4628      	mov	r0, r5
 800b204:	47b8      	blx	r7
 800b206:	3001      	adds	r0, #1
 800b208:	d1c1      	bne.n	800b18e <_printf_float+0x2ce>
 800b20a:	e6a5      	b.n	800af58 <_printf_float+0x98>
 800b20c:	2301      	movs	r3, #1
 800b20e:	4631      	mov	r1, r6
 800b210:	4628      	mov	r0, r5
 800b212:	9206      	str	r2, [sp, #24]
 800b214:	47b8      	blx	r7
 800b216:	3001      	adds	r0, #1
 800b218:	f43f ae9e 	beq.w	800af58 <_printf_float+0x98>
 800b21c:	9b07      	ldr	r3, [sp, #28]
 800b21e:	9a06      	ldr	r2, [sp, #24]
 800b220:	3301      	adds	r3, #1
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	e7b9      	b.n	800b19a <_printf_float+0x2da>
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	465a      	mov	r2, fp
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b8      	blx	r7
 800b230:	3001      	adds	r0, #1
 800b232:	d1bf      	bne.n	800b1b4 <_printf_float+0x2f4>
 800b234:	e690      	b.n	800af58 <_printf_float+0x98>
 800b236:	9a06      	ldr	r2, [sp, #24]
 800b238:	464b      	mov	r3, r9
 800b23a:	4442      	add	r2, r8
 800b23c:	4631      	mov	r1, r6
 800b23e:	4628      	mov	r0, r5
 800b240:	47b8      	blx	r7
 800b242:	3001      	adds	r0, #1
 800b244:	d1c2      	bne.n	800b1cc <_printf_float+0x30c>
 800b246:	e687      	b.n	800af58 <_printf_float+0x98>
 800b248:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b24c:	f1b9 0f01 	cmp.w	r9, #1
 800b250:	dc01      	bgt.n	800b256 <_printf_float+0x396>
 800b252:	07db      	lsls	r3, r3, #31
 800b254:	d536      	bpl.n	800b2c4 <_printf_float+0x404>
 800b256:	2301      	movs	r3, #1
 800b258:	4642      	mov	r2, r8
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f ae79 	beq.w	800af58 <_printf_float+0x98>
 800b266:	9b05      	ldr	r3, [sp, #20]
 800b268:	465a      	mov	r2, fp
 800b26a:	4631      	mov	r1, r6
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b8      	blx	r7
 800b270:	3001      	adds	r0, #1
 800b272:	f43f ae71 	beq.w	800af58 <_printf_float+0x98>
 800b276:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b27a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b282:	f109 39ff 	add.w	r9, r9, #4294967295
 800b286:	d018      	beq.n	800b2ba <_printf_float+0x3fa>
 800b288:	464b      	mov	r3, r9
 800b28a:	f108 0201 	add.w	r2, r8, #1
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	d10c      	bne.n	800b2b2 <_printf_float+0x3f2>
 800b298:	e65e      	b.n	800af58 <_printf_float+0x98>
 800b29a:	2301      	movs	r3, #1
 800b29c:	465a      	mov	r2, fp
 800b29e:	4631      	mov	r1, r6
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	47b8      	blx	r7
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	f43f ae57 	beq.w	800af58 <_printf_float+0x98>
 800b2aa:	f108 0801 	add.w	r8, r8, #1
 800b2ae:	45c8      	cmp	r8, r9
 800b2b0:	dbf3      	blt.n	800b29a <_printf_float+0x3da>
 800b2b2:	4653      	mov	r3, sl
 800b2b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2b8:	e6dc      	b.n	800b074 <_printf_float+0x1b4>
 800b2ba:	f04f 0800 	mov.w	r8, #0
 800b2be:	f104 0b1a 	add.w	fp, r4, #26
 800b2c2:	e7f4      	b.n	800b2ae <_printf_float+0x3ee>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	4642      	mov	r2, r8
 800b2c8:	e7e1      	b.n	800b28e <_printf_float+0x3ce>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	464a      	mov	r2, r9
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	47b8      	blx	r7
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f43f ae3f 	beq.w	800af58 <_printf_float+0x98>
 800b2da:	f108 0801 	add.w	r8, r8, #1
 800b2de:	68e3      	ldr	r3, [r4, #12]
 800b2e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2e2:	1a5b      	subs	r3, r3, r1
 800b2e4:	4543      	cmp	r3, r8
 800b2e6:	dcf0      	bgt.n	800b2ca <_printf_float+0x40a>
 800b2e8:	e6f8      	b.n	800b0dc <_printf_float+0x21c>
 800b2ea:	f04f 0800 	mov.w	r8, #0
 800b2ee:	f104 0919 	add.w	r9, r4, #25
 800b2f2:	e7f4      	b.n	800b2de <_printf_float+0x41e>

0800b2f4 <_printf_common>:
 800b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	4616      	mov	r6, r2
 800b2fa:	4698      	mov	r8, r3
 800b2fc:	688a      	ldr	r2, [r1, #8]
 800b2fe:	690b      	ldr	r3, [r1, #16]
 800b300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b304:	4293      	cmp	r3, r2
 800b306:	bfb8      	it	lt
 800b308:	4613      	movlt	r3, r2
 800b30a:	6033      	str	r3, [r6, #0]
 800b30c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b310:	4607      	mov	r7, r0
 800b312:	460c      	mov	r4, r1
 800b314:	b10a      	cbz	r2, 800b31a <_printf_common+0x26>
 800b316:	3301      	adds	r3, #1
 800b318:	6033      	str	r3, [r6, #0]
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	0699      	lsls	r1, r3, #26
 800b31e:	bf42      	ittt	mi
 800b320:	6833      	ldrmi	r3, [r6, #0]
 800b322:	3302      	addmi	r3, #2
 800b324:	6033      	strmi	r3, [r6, #0]
 800b326:	6825      	ldr	r5, [r4, #0]
 800b328:	f015 0506 	ands.w	r5, r5, #6
 800b32c:	d106      	bne.n	800b33c <_printf_common+0x48>
 800b32e:	f104 0a19 	add.w	sl, r4, #25
 800b332:	68e3      	ldr	r3, [r4, #12]
 800b334:	6832      	ldr	r2, [r6, #0]
 800b336:	1a9b      	subs	r3, r3, r2
 800b338:	42ab      	cmp	r3, r5
 800b33a:	dc26      	bgt.n	800b38a <_printf_common+0x96>
 800b33c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	3b00      	subs	r3, #0
 800b344:	bf18      	it	ne
 800b346:	2301      	movne	r3, #1
 800b348:	0692      	lsls	r2, r2, #26
 800b34a:	d42b      	bmi.n	800b3a4 <_printf_common+0xb0>
 800b34c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b350:	4641      	mov	r1, r8
 800b352:	4638      	mov	r0, r7
 800b354:	47c8      	blx	r9
 800b356:	3001      	adds	r0, #1
 800b358:	d01e      	beq.n	800b398 <_printf_common+0xa4>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	6922      	ldr	r2, [r4, #16]
 800b35e:	f003 0306 	and.w	r3, r3, #6
 800b362:	2b04      	cmp	r3, #4
 800b364:	bf02      	ittt	eq
 800b366:	68e5      	ldreq	r5, [r4, #12]
 800b368:	6833      	ldreq	r3, [r6, #0]
 800b36a:	1aed      	subeq	r5, r5, r3
 800b36c:	68a3      	ldr	r3, [r4, #8]
 800b36e:	bf0c      	ite	eq
 800b370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b374:	2500      	movne	r5, #0
 800b376:	4293      	cmp	r3, r2
 800b378:	bfc4      	itt	gt
 800b37a:	1a9b      	subgt	r3, r3, r2
 800b37c:	18ed      	addgt	r5, r5, r3
 800b37e:	2600      	movs	r6, #0
 800b380:	341a      	adds	r4, #26
 800b382:	42b5      	cmp	r5, r6
 800b384:	d11a      	bne.n	800b3bc <_printf_common+0xc8>
 800b386:	2000      	movs	r0, #0
 800b388:	e008      	b.n	800b39c <_printf_common+0xa8>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4652      	mov	r2, sl
 800b38e:	4641      	mov	r1, r8
 800b390:	4638      	mov	r0, r7
 800b392:	47c8      	blx	r9
 800b394:	3001      	adds	r0, #1
 800b396:	d103      	bne.n	800b3a0 <_printf_common+0xac>
 800b398:	f04f 30ff 	mov.w	r0, #4294967295
 800b39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	e7c6      	b.n	800b332 <_printf_common+0x3e>
 800b3a4:	18e1      	adds	r1, r4, r3
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	2030      	movs	r0, #48	@ 0x30
 800b3aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3ae:	4422      	add	r2, r4
 800b3b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3b8:	3302      	adds	r3, #2
 800b3ba:	e7c7      	b.n	800b34c <_printf_common+0x58>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	4622      	mov	r2, r4
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	47c8      	blx	r9
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d0e6      	beq.n	800b398 <_printf_common+0xa4>
 800b3ca:	3601      	adds	r6, #1
 800b3cc:	e7d9      	b.n	800b382 <_printf_common+0x8e>
	...

0800b3d0 <_printf_i>:
 800b3d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d4:	7e0f      	ldrb	r7, [r1, #24]
 800b3d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3d8:	2f78      	cmp	r7, #120	@ 0x78
 800b3da:	4691      	mov	r9, r2
 800b3dc:	4680      	mov	r8, r0
 800b3de:	460c      	mov	r4, r1
 800b3e0:	469a      	mov	sl, r3
 800b3e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3e6:	d807      	bhi.n	800b3f8 <_printf_i+0x28>
 800b3e8:	2f62      	cmp	r7, #98	@ 0x62
 800b3ea:	d80a      	bhi.n	800b402 <_printf_i+0x32>
 800b3ec:	2f00      	cmp	r7, #0
 800b3ee:	f000 80d1 	beq.w	800b594 <_printf_i+0x1c4>
 800b3f2:	2f58      	cmp	r7, #88	@ 0x58
 800b3f4:	f000 80b8 	beq.w	800b568 <_printf_i+0x198>
 800b3f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b400:	e03a      	b.n	800b478 <_printf_i+0xa8>
 800b402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b406:	2b15      	cmp	r3, #21
 800b408:	d8f6      	bhi.n	800b3f8 <_printf_i+0x28>
 800b40a:	a101      	add	r1, pc, #4	@ (adr r1, 800b410 <_printf_i+0x40>)
 800b40c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b410:	0800b469 	.word	0x0800b469
 800b414:	0800b47d 	.word	0x0800b47d
 800b418:	0800b3f9 	.word	0x0800b3f9
 800b41c:	0800b3f9 	.word	0x0800b3f9
 800b420:	0800b3f9 	.word	0x0800b3f9
 800b424:	0800b3f9 	.word	0x0800b3f9
 800b428:	0800b47d 	.word	0x0800b47d
 800b42c:	0800b3f9 	.word	0x0800b3f9
 800b430:	0800b3f9 	.word	0x0800b3f9
 800b434:	0800b3f9 	.word	0x0800b3f9
 800b438:	0800b3f9 	.word	0x0800b3f9
 800b43c:	0800b57b 	.word	0x0800b57b
 800b440:	0800b4a7 	.word	0x0800b4a7
 800b444:	0800b535 	.word	0x0800b535
 800b448:	0800b3f9 	.word	0x0800b3f9
 800b44c:	0800b3f9 	.word	0x0800b3f9
 800b450:	0800b59d 	.word	0x0800b59d
 800b454:	0800b3f9 	.word	0x0800b3f9
 800b458:	0800b4a7 	.word	0x0800b4a7
 800b45c:	0800b3f9 	.word	0x0800b3f9
 800b460:	0800b3f9 	.word	0x0800b3f9
 800b464:	0800b53d 	.word	0x0800b53d
 800b468:	6833      	ldr	r3, [r6, #0]
 800b46a:	1d1a      	adds	r2, r3, #4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6032      	str	r2, [r6, #0]
 800b470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b478:	2301      	movs	r3, #1
 800b47a:	e09c      	b.n	800b5b6 <_printf_i+0x1e6>
 800b47c:	6833      	ldr	r3, [r6, #0]
 800b47e:	6820      	ldr	r0, [r4, #0]
 800b480:	1d19      	adds	r1, r3, #4
 800b482:	6031      	str	r1, [r6, #0]
 800b484:	0606      	lsls	r6, r0, #24
 800b486:	d501      	bpl.n	800b48c <_printf_i+0xbc>
 800b488:	681d      	ldr	r5, [r3, #0]
 800b48a:	e003      	b.n	800b494 <_printf_i+0xc4>
 800b48c:	0645      	lsls	r5, r0, #25
 800b48e:	d5fb      	bpl.n	800b488 <_printf_i+0xb8>
 800b490:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b494:	2d00      	cmp	r5, #0
 800b496:	da03      	bge.n	800b4a0 <_printf_i+0xd0>
 800b498:	232d      	movs	r3, #45	@ 0x2d
 800b49a:	426d      	negs	r5, r5
 800b49c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4a0:	4858      	ldr	r0, [pc, #352]	@ (800b604 <_printf_i+0x234>)
 800b4a2:	230a      	movs	r3, #10
 800b4a4:	e011      	b.n	800b4ca <_printf_i+0xfa>
 800b4a6:	6821      	ldr	r1, [r4, #0]
 800b4a8:	6833      	ldr	r3, [r6, #0]
 800b4aa:	0608      	lsls	r0, r1, #24
 800b4ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4b0:	d402      	bmi.n	800b4b8 <_printf_i+0xe8>
 800b4b2:	0649      	lsls	r1, r1, #25
 800b4b4:	bf48      	it	mi
 800b4b6:	b2ad      	uxthmi	r5, r5
 800b4b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4ba:	4852      	ldr	r0, [pc, #328]	@ (800b604 <_printf_i+0x234>)
 800b4bc:	6033      	str	r3, [r6, #0]
 800b4be:	bf14      	ite	ne
 800b4c0:	230a      	movne	r3, #10
 800b4c2:	2308      	moveq	r3, #8
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4ca:	6866      	ldr	r6, [r4, #4]
 800b4cc:	60a6      	str	r6, [r4, #8]
 800b4ce:	2e00      	cmp	r6, #0
 800b4d0:	db05      	blt.n	800b4de <_printf_i+0x10e>
 800b4d2:	6821      	ldr	r1, [r4, #0]
 800b4d4:	432e      	orrs	r6, r5
 800b4d6:	f021 0104 	bic.w	r1, r1, #4
 800b4da:	6021      	str	r1, [r4, #0]
 800b4dc:	d04b      	beq.n	800b576 <_printf_i+0x1a6>
 800b4de:	4616      	mov	r6, r2
 800b4e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4e4:	fb03 5711 	mls	r7, r3, r1, r5
 800b4e8:	5dc7      	ldrb	r7, [r0, r7]
 800b4ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4ee:	462f      	mov	r7, r5
 800b4f0:	42bb      	cmp	r3, r7
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	d9f4      	bls.n	800b4e0 <_printf_i+0x110>
 800b4f6:	2b08      	cmp	r3, #8
 800b4f8:	d10b      	bne.n	800b512 <_printf_i+0x142>
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	07df      	lsls	r7, r3, #31
 800b4fe:	d508      	bpl.n	800b512 <_printf_i+0x142>
 800b500:	6923      	ldr	r3, [r4, #16]
 800b502:	6861      	ldr	r1, [r4, #4]
 800b504:	4299      	cmp	r1, r3
 800b506:	bfde      	ittt	le
 800b508:	2330      	movle	r3, #48	@ 0x30
 800b50a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b50e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b512:	1b92      	subs	r2, r2, r6
 800b514:	6122      	str	r2, [r4, #16]
 800b516:	f8cd a000 	str.w	sl, [sp]
 800b51a:	464b      	mov	r3, r9
 800b51c:	aa03      	add	r2, sp, #12
 800b51e:	4621      	mov	r1, r4
 800b520:	4640      	mov	r0, r8
 800b522:	f7ff fee7 	bl	800b2f4 <_printf_common>
 800b526:	3001      	adds	r0, #1
 800b528:	d14a      	bne.n	800b5c0 <_printf_i+0x1f0>
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	b004      	add	sp, #16
 800b530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	f043 0320 	orr.w	r3, r3, #32
 800b53a:	6023      	str	r3, [r4, #0]
 800b53c:	4832      	ldr	r0, [pc, #200]	@ (800b608 <_printf_i+0x238>)
 800b53e:	2778      	movs	r7, #120	@ 0x78
 800b540:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	6831      	ldr	r1, [r6, #0]
 800b548:	061f      	lsls	r7, r3, #24
 800b54a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b54e:	d402      	bmi.n	800b556 <_printf_i+0x186>
 800b550:	065f      	lsls	r7, r3, #25
 800b552:	bf48      	it	mi
 800b554:	b2ad      	uxthmi	r5, r5
 800b556:	6031      	str	r1, [r6, #0]
 800b558:	07d9      	lsls	r1, r3, #31
 800b55a:	bf44      	itt	mi
 800b55c:	f043 0320 	orrmi.w	r3, r3, #32
 800b560:	6023      	strmi	r3, [r4, #0]
 800b562:	b11d      	cbz	r5, 800b56c <_printf_i+0x19c>
 800b564:	2310      	movs	r3, #16
 800b566:	e7ad      	b.n	800b4c4 <_printf_i+0xf4>
 800b568:	4826      	ldr	r0, [pc, #152]	@ (800b604 <_printf_i+0x234>)
 800b56a:	e7e9      	b.n	800b540 <_printf_i+0x170>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	f023 0320 	bic.w	r3, r3, #32
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	e7f6      	b.n	800b564 <_printf_i+0x194>
 800b576:	4616      	mov	r6, r2
 800b578:	e7bd      	b.n	800b4f6 <_printf_i+0x126>
 800b57a:	6833      	ldr	r3, [r6, #0]
 800b57c:	6825      	ldr	r5, [r4, #0]
 800b57e:	6961      	ldr	r1, [r4, #20]
 800b580:	1d18      	adds	r0, r3, #4
 800b582:	6030      	str	r0, [r6, #0]
 800b584:	062e      	lsls	r6, r5, #24
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	d501      	bpl.n	800b58e <_printf_i+0x1be>
 800b58a:	6019      	str	r1, [r3, #0]
 800b58c:	e002      	b.n	800b594 <_printf_i+0x1c4>
 800b58e:	0668      	lsls	r0, r5, #25
 800b590:	d5fb      	bpl.n	800b58a <_printf_i+0x1ba>
 800b592:	8019      	strh	r1, [r3, #0]
 800b594:	2300      	movs	r3, #0
 800b596:	6123      	str	r3, [r4, #16]
 800b598:	4616      	mov	r6, r2
 800b59a:	e7bc      	b.n	800b516 <_printf_i+0x146>
 800b59c:	6833      	ldr	r3, [r6, #0]
 800b59e:	1d1a      	adds	r2, r3, #4
 800b5a0:	6032      	str	r2, [r6, #0]
 800b5a2:	681e      	ldr	r6, [r3, #0]
 800b5a4:	6862      	ldr	r2, [r4, #4]
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7f4 fef9 	bl	80003a0 <memchr>
 800b5ae:	b108      	cbz	r0, 800b5b4 <_printf_i+0x1e4>
 800b5b0:	1b80      	subs	r0, r0, r6
 800b5b2:	6060      	str	r0, [r4, #4]
 800b5b4:	6863      	ldr	r3, [r4, #4]
 800b5b6:	6123      	str	r3, [r4, #16]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5be:	e7aa      	b.n	800b516 <_printf_i+0x146>
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	47d0      	blx	sl
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	d0ad      	beq.n	800b52a <_printf_i+0x15a>
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	079b      	lsls	r3, r3, #30
 800b5d2:	d413      	bmi.n	800b5fc <_printf_i+0x22c>
 800b5d4:	68e0      	ldr	r0, [r4, #12]
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	4298      	cmp	r0, r3
 800b5da:	bfb8      	it	lt
 800b5dc:	4618      	movlt	r0, r3
 800b5de:	e7a6      	b.n	800b52e <_printf_i+0x15e>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	47d0      	blx	sl
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d09d      	beq.n	800b52a <_printf_i+0x15a>
 800b5ee:	3501      	adds	r5, #1
 800b5f0:	68e3      	ldr	r3, [r4, #12]
 800b5f2:	9903      	ldr	r1, [sp, #12]
 800b5f4:	1a5b      	subs	r3, r3, r1
 800b5f6:	42ab      	cmp	r3, r5
 800b5f8:	dcf2      	bgt.n	800b5e0 <_printf_i+0x210>
 800b5fa:	e7eb      	b.n	800b5d4 <_printf_i+0x204>
 800b5fc:	2500      	movs	r5, #0
 800b5fe:	f104 0619 	add.w	r6, r4, #25
 800b602:	e7f5      	b.n	800b5f0 <_printf_i+0x220>
 800b604:	080215b6 	.word	0x080215b6
 800b608:	080215c7 	.word	0x080215c7

0800b60c <std>:
 800b60c:	2300      	movs	r3, #0
 800b60e:	b510      	push	{r4, lr}
 800b610:	4604      	mov	r4, r0
 800b612:	e9c0 3300 	strd	r3, r3, [r0]
 800b616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b61a:	6083      	str	r3, [r0, #8]
 800b61c:	8181      	strh	r1, [r0, #12]
 800b61e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b620:	81c2      	strh	r2, [r0, #14]
 800b622:	6183      	str	r3, [r0, #24]
 800b624:	4619      	mov	r1, r3
 800b626:	2208      	movs	r2, #8
 800b628:	305c      	adds	r0, #92	@ 0x5c
 800b62a:	f000 f92a 	bl	800b882 <memset>
 800b62e:	4b0d      	ldr	r3, [pc, #52]	@ (800b664 <std+0x58>)
 800b630:	6263      	str	r3, [r4, #36]	@ 0x24
 800b632:	4b0d      	ldr	r3, [pc, #52]	@ (800b668 <std+0x5c>)
 800b634:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b636:	4b0d      	ldr	r3, [pc, #52]	@ (800b66c <std+0x60>)
 800b638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b63a:	4b0d      	ldr	r3, [pc, #52]	@ (800b670 <std+0x64>)
 800b63c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b63e:	4b0d      	ldr	r3, [pc, #52]	@ (800b674 <std+0x68>)
 800b640:	6224      	str	r4, [r4, #32]
 800b642:	429c      	cmp	r4, r3
 800b644:	d006      	beq.n	800b654 <std+0x48>
 800b646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b64a:	4294      	cmp	r4, r2
 800b64c:	d002      	beq.n	800b654 <std+0x48>
 800b64e:	33d0      	adds	r3, #208	@ 0xd0
 800b650:	429c      	cmp	r4, r3
 800b652:	d105      	bne.n	800b660 <std+0x54>
 800b654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65c:	f000 b98e 	b.w	800b97c <__retarget_lock_init_recursive>
 800b660:	bd10      	pop	{r4, pc}
 800b662:	bf00      	nop
 800b664:	0800b7fd 	.word	0x0800b7fd
 800b668:	0800b81f 	.word	0x0800b81f
 800b66c:	0800b857 	.word	0x0800b857
 800b670:	0800b87b 	.word	0x0800b87b
 800b674:	24003d24 	.word	0x24003d24

0800b678 <stdio_exit_handler>:
 800b678:	4a02      	ldr	r2, [pc, #8]	@ (800b684 <stdio_exit_handler+0xc>)
 800b67a:	4903      	ldr	r1, [pc, #12]	@ (800b688 <stdio_exit_handler+0x10>)
 800b67c:	4803      	ldr	r0, [pc, #12]	@ (800b68c <stdio_exit_handler+0x14>)
 800b67e:	f000 b869 	b.w	800b754 <_fwalk_sglue>
 800b682:	bf00      	nop
 800b684:	2400004c 	.word	0x2400004c
 800b688:	0800d201 	.word	0x0800d201
 800b68c:	2400005c 	.word	0x2400005c

0800b690 <cleanup_stdio>:
 800b690:	6841      	ldr	r1, [r0, #4]
 800b692:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c4 <cleanup_stdio+0x34>)
 800b694:	4299      	cmp	r1, r3
 800b696:	b510      	push	{r4, lr}
 800b698:	4604      	mov	r4, r0
 800b69a:	d001      	beq.n	800b6a0 <cleanup_stdio+0x10>
 800b69c:	f001 fdb0 	bl	800d200 <_fflush_r>
 800b6a0:	68a1      	ldr	r1, [r4, #8]
 800b6a2:	4b09      	ldr	r3, [pc, #36]	@ (800b6c8 <cleanup_stdio+0x38>)
 800b6a4:	4299      	cmp	r1, r3
 800b6a6:	d002      	beq.n	800b6ae <cleanup_stdio+0x1e>
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f001 fda9 	bl	800d200 <_fflush_r>
 800b6ae:	68e1      	ldr	r1, [r4, #12]
 800b6b0:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <cleanup_stdio+0x3c>)
 800b6b2:	4299      	cmp	r1, r3
 800b6b4:	d004      	beq.n	800b6c0 <cleanup_stdio+0x30>
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6bc:	f001 bda0 	b.w	800d200 <_fflush_r>
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	bf00      	nop
 800b6c4:	24003d24 	.word	0x24003d24
 800b6c8:	24003d8c 	.word	0x24003d8c
 800b6cc:	24003df4 	.word	0x24003df4

0800b6d0 <global_stdio_init.part.0>:
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b700 <global_stdio_init.part.0+0x30>)
 800b6d4:	4c0b      	ldr	r4, [pc, #44]	@ (800b704 <global_stdio_init.part.0+0x34>)
 800b6d6:	4a0c      	ldr	r2, [pc, #48]	@ (800b708 <global_stdio_init.part.0+0x38>)
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2104      	movs	r1, #4
 800b6e0:	f7ff ff94 	bl	800b60c <std>
 800b6e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	2109      	movs	r1, #9
 800b6ec:	f7ff ff8e 	bl	800b60c <std>
 800b6f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6fa:	2112      	movs	r1, #18
 800b6fc:	f7ff bf86 	b.w	800b60c <std>
 800b700:	24003e5c 	.word	0x24003e5c
 800b704:	24003d24 	.word	0x24003d24
 800b708:	0800b679 	.word	0x0800b679

0800b70c <__sfp_lock_acquire>:
 800b70c:	4801      	ldr	r0, [pc, #4]	@ (800b714 <__sfp_lock_acquire+0x8>)
 800b70e:	f000 b936 	b.w	800b97e <__retarget_lock_acquire_recursive>
 800b712:	bf00      	nop
 800b714:	24003e65 	.word	0x24003e65

0800b718 <__sfp_lock_release>:
 800b718:	4801      	ldr	r0, [pc, #4]	@ (800b720 <__sfp_lock_release+0x8>)
 800b71a:	f000 b931 	b.w	800b980 <__retarget_lock_release_recursive>
 800b71e:	bf00      	nop
 800b720:	24003e65 	.word	0x24003e65

0800b724 <__sinit>:
 800b724:	b510      	push	{r4, lr}
 800b726:	4604      	mov	r4, r0
 800b728:	f7ff fff0 	bl	800b70c <__sfp_lock_acquire>
 800b72c:	6a23      	ldr	r3, [r4, #32]
 800b72e:	b11b      	cbz	r3, 800b738 <__sinit+0x14>
 800b730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b734:	f7ff bff0 	b.w	800b718 <__sfp_lock_release>
 800b738:	4b04      	ldr	r3, [pc, #16]	@ (800b74c <__sinit+0x28>)
 800b73a:	6223      	str	r3, [r4, #32]
 800b73c:	4b04      	ldr	r3, [pc, #16]	@ (800b750 <__sinit+0x2c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1f5      	bne.n	800b730 <__sinit+0xc>
 800b744:	f7ff ffc4 	bl	800b6d0 <global_stdio_init.part.0>
 800b748:	e7f2      	b.n	800b730 <__sinit+0xc>
 800b74a:	bf00      	nop
 800b74c:	0800b691 	.word	0x0800b691
 800b750:	24003e5c 	.word	0x24003e5c

0800b754 <_fwalk_sglue>:
 800b754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b758:	4607      	mov	r7, r0
 800b75a:	4688      	mov	r8, r1
 800b75c:	4614      	mov	r4, r2
 800b75e:	2600      	movs	r6, #0
 800b760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b764:	f1b9 0901 	subs.w	r9, r9, #1
 800b768:	d505      	bpl.n	800b776 <_fwalk_sglue+0x22>
 800b76a:	6824      	ldr	r4, [r4, #0]
 800b76c:	2c00      	cmp	r4, #0
 800b76e:	d1f7      	bne.n	800b760 <_fwalk_sglue+0xc>
 800b770:	4630      	mov	r0, r6
 800b772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b776:	89ab      	ldrh	r3, [r5, #12]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d907      	bls.n	800b78c <_fwalk_sglue+0x38>
 800b77c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b780:	3301      	adds	r3, #1
 800b782:	d003      	beq.n	800b78c <_fwalk_sglue+0x38>
 800b784:	4629      	mov	r1, r5
 800b786:	4638      	mov	r0, r7
 800b788:	47c0      	blx	r8
 800b78a:	4306      	orrs	r6, r0
 800b78c:	3568      	adds	r5, #104	@ 0x68
 800b78e:	e7e9      	b.n	800b764 <_fwalk_sglue+0x10>

0800b790 <sniprintf>:
 800b790:	b40c      	push	{r2, r3}
 800b792:	b530      	push	{r4, r5, lr}
 800b794:	4b18      	ldr	r3, [pc, #96]	@ (800b7f8 <sniprintf+0x68>)
 800b796:	1e0c      	subs	r4, r1, #0
 800b798:	681d      	ldr	r5, [r3, #0]
 800b79a:	b09d      	sub	sp, #116	@ 0x74
 800b79c:	da08      	bge.n	800b7b0 <sniprintf+0x20>
 800b79e:	238b      	movs	r3, #139	@ 0x8b
 800b7a0:	602b      	str	r3, [r5, #0]
 800b7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a6:	b01d      	add	sp, #116	@ 0x74
 800b7a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ac:	b002      	add	sp, #8
 800b7ae:	4770      	bx	lr
 800b7b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b7b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7b8:	f04f 0300 	mov.w	r3, #0
 800b7bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b7be:	bf14      	ite	ne
 800b7c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7c4:	4623      	moveq	r3, r4
 800b7c6:	9304      	str	r3, [sp, #16]
 800b7c8:	9307      	str	r3, [sp, #28]
 800b7ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b7ce:	9002      	str	r0, [sp, #8]
 800b7d0:	9006      	str	r0, [sp, #24]
 800b7d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b7d6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b7d8:	ab21      	add	r3, sp, #132	@ 0x84
 800b7da:	a902      	add	r1, sp, #8
 800b7dc:	4628      	mov	r0, r5
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	f001 fb8e 	bl	800cf00 <_svfiprintf_r>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	bfbc      	itt	lt
 800b7e8:	238b      	movlt	r3, #139	@ 0x8b
 800b7ea:	602b      	strlt	r3, [r5, #0]
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	d0da      	beq.n	800b7a6 <sniprintf+0x16>
 800b7f0:	9b02      	ldr	r3, [sp, #8]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	e7d6      	b.n	800b7a6 <sniprintf+0x16>
 800b7f8:	24000058 	.word	0x24000058

0800b7fc <__sread>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	460c      	mov	r4, r1
 800b800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b804:	f000 f86c 	bl	800b8e0 <_read_r>
 800b808:	2800      	cmp	r0, #0
 800b80a:	bfab      	itete	ge
 800b80c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b80e:	89a3      	ldrhlt	r3, [r4, #12]
 800b810:	181b      	addge	r3, r3, r0
 800b812:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b816:	bfac      	ite	ge
 800b818:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b81a:	81a3      	strhlt	r3, [r4, #12]
 800b81c:	bd10      	pop	{r4, pc}

0800b81e <__swrite>:
 800b81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b822:	461f      	mov	r7, r3
 800b824:	898b      	ldrh	r3, [r1, #12]
 800b826:	05db      	lsls	r3, r3, #23
 800b828:	4605      	mov	r5, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	4616      	mov	r6, r2
 800b82e:	d505      	bpl.n	800b83c <__swrite+0x1e>
 800b830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b834:	2302      	movs	r3, #2
 800b836:	2200      	movs	r2, #0
 800b838:	f000 f840 	bl	800b8bc <_lseek_r>
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	4632      	mov	r2, r6
 800b84a:	463b      	mov	r3, r7
 800b84c:	4628      	mov	r0, r5
 800b84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b852:	f000 b857 	b.w	800b904 <_write_r>

0800b856 <__sseek>:
 800b856:	b510      	push	{r4, lr}
 800b858:	460c      	mov	r4, r1
 800b85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b85e:	f000 f82d 	bl	800b8bc <_lseek_r>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	bf15      	itete	ne
 800b868:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b86a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b86e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b872:	81a3      	strheq	r3, [r4, #12]
 800b874:	bf18      	it	ne
 800b876:	81a3      	strhne	r3, [r4, #12]
 800b878:	bd10      	pop	{r4, pc}

0800b87a <__sclose>:
 800b87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87e:	f000 b80d 	b.w	800b89c <_close_r>

0800b882 <memset>:
 800b882:	4402      	add	r2, r0
 800b884:	4603      	mov	r3, r0
 800b886:	4293      	cmp	r3, r2
 800b888:	d100      	bne.n	800b88c <memset+0xa>
 800b88a:	4770      	bx	lr
 800b88c:	f803 1b01 	strb.w	r1, [r3], #1
 800b890:	e7f9      	b.n	800b886 <memset+0x4>
	...

0800b894 <_localeconv_r>:
 800b894:	4800      	ldr	r0, [pc, #0]	@ (800b898 <_localeconv_r+0x4>)
 800b896:	4770      	bx	lr
 800b898:	24000198 	.word	0x24000198

0800b89c <_close_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d06      	ldr	r5, [pc, #24]	@ (800b8b8 <_close_r+0x1c>)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	f7f6 fdbc 	bl	8002424 <_close>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d102      	bne.n	800b8b6 <_close_r+0x1a>
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	b103      	cbz	r3, 800b8b6 <_close_r+0x1a>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	24003e60 	.word	0x24003e60

0800b8bc <_lseek_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d07      	ldr	r5, [pc, #28]	@ (800b8dc <_lseek_r+0x20>)
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	4608      	mov	r0, r1
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	602a      	str	r2, [r5, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f7f6 fdd1 	bl	8002472 <_lseek>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d102      	bne.n	800b8da <_lseek_r+0x1e>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	b103      	cbz	r3, 800b8da <_lseek_r+0x1e>
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	24003e60 	.word	0x24003e60

0800b8e0 <_read_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d07      	ldr	r5, [pc, #28]	@ (800b900 <_read_r+0x20>)
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	602a      	str	r2, [r5, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f7f6 fd5f 	bl	80023b2 <_read>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_read_r+0x1e>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_read_r+0x1e>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	24003e60 	.word	0x24003e60

0800b904 <_write_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	@ (800b924 <_write_r+0x20>)
 800b908:	4604      	mov	r4, r0
 800b90a:	4608      	mov	r0, r1
 800b90c:	4611      	mov	r1, r2
 800b90e:	2200      	movs	r2, #0
 800b910:	602a      	str	r2, [r5, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	f7f6 fd6a 	bl	80023ec <_write>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_write_r+0x1e>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_write_r+0x1e>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	24003e60 	.word	0x24003e60

0800b928 <__errno>:
 800b928:	4b01      	ldr	r3, [pc, #4]	@ (800b930 <__errno+0x8>)
 800b92a:	6818      	ldr	r0, [r3, #0]
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	24000058 	.word	0x24000058

0800b934 <__libc_init_array>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	4d0d      	ldr	r5, [pc, #52]	@ (800b96c <__libc_init_array+0x38>)
 800b938:	4c0d      	ldr	r4, [pc, #52]	@ (800b970 <__libc_init_array+0x3c>)
 800b93a:	1b64      	subs	r4, r4, r5
 800b93c:	10a4      	asrs	r4, r4, #2
 800b93e:	2600      	movs	r6, #0
 800b940:	42a6      	cmp	r6, r4
 800b942:	d109      	bne.n	800b958 <__libc_init_array+0x24>
 800b944:	4d0b      	ldr	r5, [pc, #44]	@ (800b974 <__libc_init_array+0x40>)
 800b946:	4c0c      	ldr	r4, [pc, #48]	@ (800b978 <__libc_init_array+0x44>)
 800b948:	f002 f9f6 	bl	800dd38 <_init>
 800b94c:	1b64      	subs	r4, r4, r5
 800b94e:	10a4      	asrs	r4, r4, #2
 800b950:	2600      	movs	r6, #0
 800b952:	42a6      	cmp	r6, r4
 800b954:	d105      	bne.n	800b962 <__libc_init_array+0x2e>
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	f855 3b04 	ldr.w	r3, [r5], #4
 800b95c:	4798      	blx	r3
 800b95e:	3601      	adds	r6, #1
 800b960:	e7ee      	b.n	800b940 <__libc_init_array+0xc>
 800b962:	f855 3b04 	ldr.w	r3, [r5], #4
 800b966:	4798      	blx	r3
 800b968:	3601      	adds	r6, #1
 800b96a:	e7f2      	b.n	800b952 <__libc_init_array+0x1e>
 800b96c:	080221b8 	.word	0x080221b8
 800b970:	080221b8 	.word	0x080221b8
 800b974:	080221b8 	.word	0x080221b8
 800b978:	080221bc 	.word	0x080221bc

0800b97c <__retarget_lock_init_recursive>:
 800b97c:	4770      	bx	lr

0800b97e <__retarget_lock_acquire_recursive>:
 800b97e:	4770      	bx	lr

0800b980 <__retarget_lock_release_recursive>:
 800b980:	4770      	bx	lr

0800b982 <quorem>:
 800b982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b986:	6903      	ldr	r3, [r0, #16]
 800b988:	690c      	ldr	r4, [r1, #16]
 800b98a:	42a3      	cmp	r3, r4
 800b98c:	4607      	mov	r7, r0
 800b98e:	db7e      	blt.n	800ba8e <quorem+0x10c>
 800b990:	3c01      	subs	r4, #1
 800b992:	f101 0814 	add.w	r8, r1, #20
 800b996:	00a3      	lsls	r3, r4, #2
 800b998:	f100 0514 	add.w	r5, r0, #20
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9b8:	d32e      	bcc.n	800ba18 <quorem+0x96>
 800b9ba:	f04f 0a00 	mov.w	sl, #0
 800b9be:	46c4      	mov	ip, r8
 800b9c0:	46ae      	mov	lr, r5
 800b9c2:	46d3      	mov	fp, sl
 800b9c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9c8:	b298      	uxth	r0, r3
 800b9ca:	fb06 a000 	mla	r0, r6, r0, sl
 800b9ce:	0c02      	lsrs	r2, r0, #16
 800b9d0:	0c1b      	lsrs	r3, r3, #16
 800b9d2:	fb06 2303 	mla	r3, r6, r3, r2
 800b9d6:	f8de 2000 	ldr.w	r2, [lr]
 800b9da:	b280      	uxth	r0, r0
 800b9dc:	b292      	uxth	r2, r2
 800b9de:	1a12      	subs	r2, r2, r0
 800b9e0:	445a      	add	r2, fp
 800b9e2:	f8de 0000 	ldr.w	r0, [lr]
 800b9e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b9f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b9f4:	b292      	uxth	r2, r2
 800b9f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b9fa:	45e1      	cmp	r9, ip
 800b9fc:	f84e 2b04 	str.w	r2, [lr], #4
 800ba00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba04:	d2de      	bcs.n	800b9c4 <quorem+0x42>
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	58eb      	ldr	r3, [r5, r3]
 800ba0a:	b92b      	cbnz	r3, 800ba18 <quorem+0x96>
 800ba0c:	9b01      	ldr	r3, [sp, #4]
 800ba0e:	3b04      	subs	r3, #4
 800ba10:	429d      	cmp	r5, r3
 800ba12:	461a      	mov	r2, r3
 800ba14:	d32f      	bcc.n	800ba76 <quorem+0xf4>
 800ba16:	613c      	str	r4, [r7, #16]
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f001 f90d 	bl	800cc38 <__mcmp>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	db25      	blt.n	800ba6e <quorem+0xec>
 800ba22:	4629      	mov	r1, r5
 800ba24:	2000      	movs	r0, #0
 800ba26:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba2a:	f8d1 c000 	ldr.w	ip, [r1]
 800ba2e:	fa1f fe82 	uxth.w	lr, r2
 800ba32:	fa1f f38c 	uxth.w	r3, ip
 800ba36:	eba3 030e 	sub.w	r3, r3, lr
 800ba3a:	4403      	add	r3, r0
 800ba3c:	0c12      	lsrs	r2, r2, #16
 800ba3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba4c:	45c1      	cmp	r9, r8
 800ba4e:	f841 3b04 	str.w	r3, [r1], #4
 800ba52:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba56:	d2e6      	bcs.n	800ba26 <quorem+0xa4>
 800ba58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba60:	b922      	cbnz	r2, 800ba6c <quorem+0xea>
 800ba62:	3b04      	subs	r3, #4
 800ba64:	429d      	cmp	r5, r3
 800ba66:	461a      	mov	r2, r3
 800ba68:	d30b      	bcc.n	800ba82 <quorem+0x100>
 800ba6a:	613c      	str	r4, [r7, #16]
 800ba6c:	3601      	adds	r6, #1
 800ba6e:	4630      	mov	r0, r6
 800ba70:	b003      	add	sp, #12
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	6812      	ldr	r2, [r2, #0]
 800ba78:	3b04      	subs	r3, #4
 800ba7a:	2a00      	cmp	r2, #0
 800ba7c:	d1cb      	bne.n	800ba16 <quorem+0x94>
 800ba7e:	3c01      	subs	r4, #1
 800ba80:	e7c6      	b.n	800ba10 <quorem+0x8e>
 800ba82:	6812      	ldr	r2, [r2, #0]
 800ba84:	3b04      	subs	r3, #4
 800ba86:	2a00      	cmp	r2, #0
 800ba88:	d1ef      	bne.n	800ba6a <quorem+0xe8>
 800ba8a:	3c01      	subs	r4, #1
 800ba8c:	e7ea      	b.n	800ba64 <quorem+0xe2>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e7ee      	b.n	800ba70 <quorem+0xee>
 800ba92:	0000      	movs	r0, r0
 800ba94:	0000      	movs	r0, r0
	...

0800ba98 <_dtoa_r>:
 800ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9c:	ed2d 8b02 	vpush	{d8}
 800baa0:	69c7      	ldr	r7, [r0, #28]
 800baa2:	b091      	sub	sp, #68	@ 0x44
 800baa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800baa8:	ec55 4b10 	vmov	r4, r5, d0
 800baac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800baae:	9107      	str	r1, [sp, #28]
 800bab0:	4681      	mov	r9, r0
 800bab2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bab4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bab6:	b97f      	cbnz	r7, 800bad8 <_dtoa_r+0x40>
 800bab8:	2010      	movs	r0, #16
 800baba:	f000 fd95 	bl	800c5e8 <malloc>
 800babe:	4602      	mov	r2, r0
 800bac0:	f8c9 001c 	str.w	r0, [r9, #28]
 800bac4:	b920      	cbnz	r0, 800bad0 <_dtoa_r+0x38>
 800bac6:	4ba0      	ldr	r3, [pc, #640]	@ (800bd48 <_dtoa_r+0x2b0>)
 800bac8:	21ef      	movs	r1, #239	@ 0xef
 800baca:	48a0      	ldr	r0, [pc, #640]	@ (800bd4c <_dtoa_r+0x2b4>)
 800bacc:	f001 fbf8 	bl	800d2c0 <__assert_func>
 800bad0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bad4:	6007      	str	r7, [r0, #0]
 800bad6:	60c7      	str	r7, [r0, #12]
 800bad8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800badc:	6819      	ldr	r1, [r3, #0]
 800bade:	b159      	cbz	r1, 800baf8 <_dtoa_r+0x60>
 800bae0:	685a      	ldr	r2, [r3, #4]
 800bae2:	604a      	str	r2, [r1, #4]
 800bae4:	2301      	movs	r3, #1
 800bae6:	4093      	lsls	r3, r2
 800bae8:	608b      	str	r3, [r1, #8]
 800baea:	4648      	mov	r0, r9
 800baec:	f000 fe72 	bl	800c7d4 <_Bfree>
 800baf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	1e2b      	subs	r3, r5, #0
 800bafa:	bfbb      	ittet	lt
 800bafc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb00:	9303      	strlt	r3, [sp, #12]
 800bb02:	2300      	movge	r3, #0
 800bb04:	2201      	movlt	r2, #1
 800bb06:	bfac      	ite	ge
 800bb08:	6033      	strge	r3, [r6, #0]
 800bb0a:	6032      	strlt	r2, [r6, #0]
 800bb0c:	4b90      	ldr	r3, [pc, #576]	@ (800bd50 <_dtoa_r+0x2b8>)
 800bb0e:	9e03      	ldr	r6, [sp, #12]
 800bb10:	43b3      	bics	r3, r6
 800bb12:	d110      	bne.n	800bb36 <_dtoa_r+0x9e>
 800bb14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb16:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bb20:	4323      	orrs	r3, r4
 800bb22:	f000 84e6 	beq.w	800c4f2 <_dtoa_r+0xa5a>
 800bb26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb28:	4f8a      	ldr	r7, [pc, #552]	@ (800bd54 <_dtoa_r+0x2bc>)
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 84e8 	beq.w	800c500 <_dtoa_r+0xa68>
 800bb30:	1cfb      	adds	r3, r7, #3
 800bb32:	f000 bce3 	b.w	800c4fc <_dtoa_r+0xa64>
 800bb36:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bb3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb42:	d10a      	bne.n	800bb5a <_dtoa_r+0xc2>
 800bb44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb46:	2301      	movs	r3, #1
 800bb48:	6013      	str	r3, [r2, #0]
 800bb4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb4c:	b113      	cbz	r3, 800bb54 <_dtoa_r+0xbc>
 800bb4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bb50:	4b81      	ldr	r3, [pc, #516]	@ (800bd58 <_dtoa_r+0x2c0>)
 800bb52:	6013      	str	r3, [r2, #0]
 800bb54:	4f81      	ldr	r7, [pc, #516]	@ (800bd5c <_dtoa_r+0x2c4>)
 800bb56:	f000 bcd3 	b.w	800c500 <_dtoa_r+0xa68>
 800bb5a:	aa0e      	add	r2, sp, #56	@ 0x38
 800bb5c:	a90f      	add	r1, sp, #60	@ 0x3c
 800bb5e:	4648      	mov	r0, r9
 800bb60:	eeb0 0b48 	vmov.f64	d0, d8
 800bb64:	f001 f918 	bl	800cd98 <__d2b>
 800bb68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bb6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb6e:	9001      	str	r0, [sp, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d045      	beq.n	800bc00 <_dtoa_r+0x168>
 800bb74:	eeb0 7b48 	vmov.f64	d7, d8
 800bb78:	ee18 1a90 	vmov	r1, s17
 800bb7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bb80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bb84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bb88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bb8c:	2500      	movs	r5, #0
 800bb8e:	ee07 1a90 	vmov	s15, r1
 800bb92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bb96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bd30 <_dtoa_r+0x298>
 800bb9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bd38 <_dtoa_r+0x2a0>
 800bba2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bba6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bd40 <_dtoa_r+0x2a8>
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bbb2:	eeb0 7b46 	vmov.f64	d7, d6
 800bbb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bbba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bbbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	ee16 8a90 	vmov	r8, s13
 800bbca:	d508      	bpl.n	800bbde <_dtoa_r+0x146>
 800bbcc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bbd0:	eeb4 6b47 	vcmp.f64	d6, d7
 800bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd8:	bf18      	it	ne
 800bbda:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bbde:	f1b8 0f16 	cmp.w	r8, #22
 800bbe2:	d82b      	bhi.n	800bc3c <_dtoa_r+0x1a4>
 800bbe4:	495e      	ldr	r1, [pc, #376]	@ (800bd60 <_dtoa_r+0x2c8>)
 800bbe6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bbea:	ed91 7b00 	vldr	d7, [r1]
 800bbee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf6:	d501      	bpl.n	800bbfc <_dtoa_r+0x164>
 800bbf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	e01e      	b.n	800bc3e <_dtoa_r+0x1a6>
 800bc00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc02:	4413      	add	r3, r2
 800bc04:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bc08:	2920      	cmp	r1, #32
 800bc0a:	bfc1      	itttt	gt
 800bc0c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bc10:	408e      	lslgt	r6, r1
 800bc12:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bc16:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bc1a:	bfd6      	itet	le
 800bc1c:	f1c1 0120 	rsble	r1, r1, #32
 800bc20:	4331      	orrgt	r1, r6
 800bc22:	fa04 f101 	lslle.w	r1, r4, r1
 800bc26:	ee07 1a90 	vmov	s15, r1
 800bc2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	ee17 1a90 	vmov	r1, s15
 800bc34:	2501      	movs	r5, #1
 800bc36:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bc3a:	e7a8      	b.n	800bb8e <_dtoa_r+0xf6>
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	1ad2      	subs	r2, r2, r3
 800bc40:	1e53      	subs	r3, r2, #1
 800bc42:	9306      	str	r3, [sp, #24]
 800bc44:	bf45      	ittet	mi
 800bc46:	f1c2 0301 	rsbmi	r3, r2, #1
 800bc4a:	9304      	strmi	r3, [sp, #16]
 800bc4c:	2300      	movpl	r3, #0
 800bc4e:	2300      	movmi	r3, #0
 800bc50:	bf4c      	ite	mi
 800bc52:	9306      	strmi	r3, [sp, #24]
 800bc54:	9304      	strpl	r3, [sp, #16]
 800bc56:	f1b8 0f00 	cmp.w	r8, #0
 800bc5a:	910c      	str	r1, [sp, #48]	@ 0x30
 800bc5c:	db18      	blt.n	800bc90 <_dtoa_r+0x1f8>
 800bc5e:	9b06      	ldr	r3, [sp, #24]
 800bc60:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bc64:	4443      	add	r3, r8
 800bc66:	9306      	str	r3, [sp, #24]
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9a07      	ldr	r2, [sp, #28]
 800bc6c:	2a09      	cmp	r2, #9
 800bc6e:	d845      	bhi.n	800bcfc <_dtoa_r+0x264>
 800bc70:	2a05      	cmp	r2, #5
 800bc72:	bfc4      	itt	gt
 800bc74:	3a04      	subgt	r2, #4
 800bc76:	9207      	strgt	r2, [sp, #28]
 800bc78:	9a07      	ldr	r2, [sp, #28]
 800bc7a:	f1a2 0202 	sub.w	r2, r2, #2
 800bc7e:	bfcc      	ite	gt
 800bc80:	2400      	movgt	r4, #0
 800bc82:	2401      	movle	r4, #1
 800bc84:	2a03      	cmp	r2, #3
 800bc86:	d844      	bhi.n	800bd12 <_dtoa_r+0x27a>
 800bc88:	e8df f002 	tbb	[pc, r2]
 800bc8c:	0b173634 	.word	0x0b173634
 800bc90:	9b04      	ldr	r3, [sp, #16]
 800bc92:	2200      	movs	r2, #0
 800bc94:	eba3 0308 	sub.w	r3, r3, r8
 800bc98:	9304      	str	r3, [sp, #16]
 800bc9a:	920a      	str	r2, [sp, #40]	@ 0x28
 800bc9c:	f1c8 0300 	rsb	r3, r8, #0
 800bca0:	e7e3      	b.n	800bc6a <_dtoa_r+0x1d2>
 800bca2:	2201      	movs	r2, #1
 800bca4:	9208      	str	r2, [sp, #32]
 800bca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bca8:	eb08 0b02 	add.w	fp, r8, r2
 800bcac:	f10b 0a01 	add.w	sl, fp, #1
 800bcb0:	4652      	mov	r2, sl
 800bcb2:	2a01      	cmp	r2, #1
 800bcb4:	bfb8      	it	lt
 800bcb6:	2201      	movlt	r2, #1
 800bcb8:	e006      	b.n	800bcc8 <_dtoa_r+0x230>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	9208      	str	r2, [sp, #32]
 800bcbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	dd29      	ble.n	800bd18 <_dtoa_r+0x280>
 800bcc4:	4693      	mov	fp, r2
 800bcc6:	4692      	mov	sl, r2
 800bcc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800bccc:	2100      	movs	r1, #0
 800bcce:	2004      	movs	r0, #4
 800bcd0:	f100 0614 	add.w	r6, r0, #20
 800bcd4:	4296      	cmp	r6, r2
 800bcd6:	d926      	bls.n	800bd26 <_dtoa_r+0x28e>
 800bcd8:	6079      	str	r1, [r7, #4]
 800bcda:	4648      	mov	r0, r9
 800bcdc:	9305      	str	r3, [sp, #20]
 800bcde:	f000 fd39 	bl	800c754 <_Balloc>
 800bce2:	9b05      	ldr	r3, [sp, #20]
 800bce4:	4607      	mov	r7, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d13e      	bne.n	800bd68 <_dtoa_r+0x2d0>
 800bcea:	4b1e      	ldr	r3, [pc, #120]	@ (800bd64 <_dtoa_r+0x2cc>)
 800bcec:	4602      	mov	r2, r0
 800bcee:	f240 11af 	movw	r1, #431	@ 0x1af
 800bcf2:	e6ea      	b.n	800baca <_dtoa_r+0x32>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	e7e1      	b.n	800bcbc <_dtoa_r+0x224>
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	e7d3      	b.n	800bca4 <_dtoa_r+0x20c>
 800bcfc:	2401      	movs	r4, #1
 800bcfe:	2200      	movs	r2, #0
 800bd00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bd04:	f04f 3bff 	mov.w	fp, #4294967295
 800bd08:	2100      	movs	r1, #0
 800bd0a:	46da      	mov	sl, fp
 800bd0c:	2212      	movs	r2, #18
 800bd0e:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd10:	e7da      	b.n	800bcc8 <_dtoa_r+0x230>
 800bd12:	2201      	movs	r2, #1
 800bd14:	9208      	str	r2, [sp, #32]
 800bd16:	e7f5      	b.n	800bd04 <_dtoa_r+0x26c>
 800bd18:	f04f 0b01 	mov.w	fp, #1
 800bd1c:	46da      	mov	sl, fp
 800bd1e:	465a      	mov	r2, fp
 800bd20:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bd24:	e7d0      	b.n	800bcc8 <_dtoa_r+0x230>
 800bd26:	3101      	adds	r1, #1
 800bd28:	0040      	lsls	r0, r0, #1
 800bd2a:	e7d1      	b.n	800bcd0 <_dtoa_r+0x238>
 800bd2c:	f3af 8000 	nop.w
 800bd30:	636f4361 	.word	0x636f4361
 800bd34:	3fd287a7 	.word	0x3fd287a7
 800bd38:	8b60c8b3 	.word	0x8b60c8b3
 800bd3c:	3fc68a28 	.word	0x3fc68a28
 800bd40:	509f79fb 	.word	0x509f79fb
 800bd44:	3fd34413 	.word	0x3fd34413
 800bd48:	080215e5 	.word	0x080215e5
 800bd4c:	080215fc 	.word	0x080215fc
 800bd50:	7ff00000 	.word	0x7ff00000
 800bd54:	080215e1 	.word	0x080215e1
 800bd58:	080215b5 	.word	0x080215b5
 800bd5c:	080215b4 	.word	0x080215b4
 800bd60:	08021750 	.word	0x08021750
 800bd64:	08021654 	.word	0x08021654
 800bd68:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bd6c:	f1ba 0f0e 	cmp.w	sl, #14
 800bd70:	6010      	str	r0, [r2, #0]
 800bd72:	d86e      	bhi.n	800be52 <_dtoa_r+0x3ba>
 800bd74:	2c00      	cmp	r4, #0
 800bd76:	d06c      	beq.n	800be52 <_dtoa_r+0x3ba>
 800bd78:	f1b8 0f00 	cmp.w	r8, #0
 800bd7c:	f340 80b4 	ble.w	800bee8 <_dtoa_r+0x450>
 800bd80:	4ac8      	ldr	r2, [pc, #800]	@ (800c0a4 <_dtoa_r+0x60c>)
 800bd82:	f008 010f 	and.w	r1, r8, #15
 800bd86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bd8a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bd8e:	ed92 7b00 	vldr	d7, [r2]
 800bd92:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bd96:	f000 809b 	beq.w	800bed0 <_dtoa_r+0x438>
 800bd9a:	4ac3      	ldr	r2, [pc, #780]	@ (800c0a8 <_dtoa_r+0x610>)
 800bd9c:	ed92 6b08 	vldr	d6, [r2, #32]
 800bda0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bda4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bda8:	f001 010f 	and.w	r1, r1, #15
 800bdac:	2203      	movs	r2, #3
 800bdae:	48be      	ldr	r0, [pc, #760]	@ (800c0a8 <_dtoa_r+0x610>)
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	f040 808f 	bne.w	800bed4 <_dtoa_r+0x43c>
 800bdb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bdba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bdbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bdc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	f000 80b3 	beq.w	800bf34 <_dtoa_r+0x49c>
 800bdce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bdd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdda:	f140 80ab 	bpl.w	800bf34 <_dtoa_r+0x49c>
 800bdde:	f1ba 0f00 	cmp.w	sl, #0
 800bde2:	f000 80a7 	beq.w	800bf34 <_dtoa_r+0x49c>
 800bde6:	f1bb 0f00 	cmp.w	fp, #0
 800bdea:	dd30      	ble.n	800be4e <_dtoa_r+0x3b6>
 800bdec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bdf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bdf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdf8:	f108 31ff 	add.w	r1, r8, #4294967295
 800bdfc:	9105      	str	r1, [sp, #20]
 800bdfe:	3201      	adds	r2, #1
 800be00:	465c      	mov	r4, fp
 800be02:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be06:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800be0a:	ee07 2a90 	vmov	s15, r2
 800be0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800be12:	eea7 5b06 	vfma.f64	d5, d7, d6
 800be16:	ee15 2a90 	vmov	r2, s11
 800be1a:	ec51 0b15 	vmov	r0, r1, d5
 800be1e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800be22:	2c00      	cmp	r4, #0
 800be24:	f040 808a 	bne.w	800bf3c <_dtoa_r+0x4a4>
 800be28:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800be2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800be30:	ec41 0b17 	vmov	d7, r0, r1
 800be34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3c:	f300 826a 	bgt.w	800c314 <_dtoa_r+0x87c>
 800be40:	eeb1 7b47 	vneg.f64	d7, d7
 800be44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4c:	d423      	bmi.n	800be96 <_dtoa_r+0x3fe>
 800be4e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800be52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be54:	2a00      	cmp	r2, #0
 800be56:	f2c0 8129 	blt.w	800c0ac <_dtoa_r+0x614>
 800be5a:	f1b8 0f0e 	cmp.w	r8, #14
 800be5e:	f300 8125 	bgt.w	800c0ac <_dtoa_r+0x614>
 800be62:	4b90      	ldr	r3, [pc, #576]	@ (800c0a4 <_dtoa_r+0x60c>)
 800be64:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be68:	ed93 6b00 	vldr	d6, [r3]
 800be6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f280 80c8 	bge.w	800c004 <_dtoa_r+0x56c>
 800be74:	f1ba 0f00 	cmp.w	sl, #0
 800be78:	f300 80c4 	bgt.w	800c004 <_dtoa_r+0x56c>
 800be7c:	d10b      	bne.n	800be96 <_dtoa_r+0x3fe>
 800be7e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800be82:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be86:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be92:	f2c0 823c 	blt.w	800c30e <_dtoa_r+0x876>
 800be96:	2400      	movs	r4, #0
 800be98:	4625      	mov	r5, r4
 800be9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be9c:	43db      	mvns	r3, r3
 800be9e:	9305      	str	r3, [sp, #20]
 800bea0:	463e      	mov	r6, r7
 800bea2:	f04f 0800 	mov.w	r8, #0
 800bea6:	4621      	mov	r1, r4
 800bea8:	4648      	mov	r0, r9
 800beaa:	f000 fc93 	bl	800c7d4 <_Bfree>
 800beae:	2d00      	cmp	r5, #0
 800beb0:	f000 80a2 	beq.w	800bff8 <_dtoa_r+0x560>
 800beb4:	f1b8 0f00 	cmp.w	r8, #0
 800beb8:	d005      	beq.n	800bec6 <_dtoa_r+0x42e>
 800beba:	45a8      	cmp	r8, r5
 800bebc:	d003      	beq.n	800bec6 <_dtoa_r+0x42e>
 800bebe:	4641      	mov	r1, r8
 800bec0:	4648      	mov	r0, r9
 800bec2:	f000 fc87 	bl	800c7d4 <_Bfree>
 800bec6:	4629      	mov	r1, r5
 800bec8:	4648      	mov	r0, r9
 800beca:	f000 fc83 	bl	800c7d4 <_Bfree>
 800bece:	e093      	b.n	800bff8 <_dtoa_r+0x560>
 800bed0:	2202      	movs	r2, #2
 800bed2:	e76c      	b.n	800bdae <_dtoa_r+0x316>
 800bed4:	07cc      	lsls	r4, r1, #31
 800bed6:	d504      	bpl.n	800bee2 <_dtoa_r+0x44a>
 800bed8:	ed90 6b00 	vldr	d6, [r0]
 800bedc:	3201      	adds	r2, #1
 800bede:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bee2:	1049      	asrs	r1, r1, #1
 800bee4:	3008      	adds	r0, #8
 800bee6:	e763      	b.n	800bdb0 <_dtoa_r+0x318>
 800bee8:	d022      	beq.n	800bf30 <_dtoa_r+0x498>
 800beea:	f1c8 0100 	rsb	r1, r8, #0
 800beee:	4a6d      	ldr	r2, [pc, #436]	@ (800c0a4 <_dtoa_r+0x60c>)
 800bef0:	f001 000f 	and.w	r0, r1, #15
 800bef4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bef8:	ed92 7b00 	vldr	d7, [r2]
 800befc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bf00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf04:	4868      	ldr	r0, [pc, #416]	@ (800c0a8 <_dtoa_r+0x610>)
 800bf06:	1109      	asrs	r1, r1, #4
 800bf08:	2400      	movs	r4, #0
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	b929      	cbnz	r1, 800bf1a <_dtoa_r+0x482>
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	f43f af57 	beq.w	800bdc2 <_dtoa_r+0x32a>
 800bf14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf18:	e753      	b.n	800bdc2 <_dtoa_r+0x32a>
 800bf1a:	07ce      	lsls	r6, r1, #31
 800bf1c:	d505      	bpl.n	800bf2a <_dtoa_r+0x492>
 800bf1e:	ed90 6b00 	vldr	d6, [r0]
 800bf22:	3201      	adds	r2, #1
 800bf24:	2401      	movs	r4, #1
 800bf26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf2a:	1049      	asrs	r1, r1, #1
 800bf2c:	3008      	adds	r0, #8
 800bf2e:	e7ed      	b.n	800bf0c <_dtoa_r+0x474>
 800bf30:	2202      	movs	r2, #2
 800bf32:	e746      	b.n	800bdc2 <_dtoa_r+0x32a>
 800bf34:	f8cd 8014 	str.w	r8, [sp, #20]
 800bf38:	4654      	mov	r4, sl
 800bf3a:	e762      	b.n	800be02 <_dtoa_r+0x36a>
 800bf3c:	4a59      	ldr	r2, [pc, #356]	@ (800c0a4 <_dtoa_r+0x60c>)
 800bf3e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bf42:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bf46:	9a08      	ldr	r2, [sp, #32]
 800bf48:	ec41 0b17 	vmov	d7, r0, r1
 800bf4c:	443c      	add	r4, r7
 800bf4e:	b34a      	cbz	r2, 800bfa4 <_dtoa_r+0x50c>
 800bf50:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bf54:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bf58:	463e      	mov	r6, r7
 800bf5a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bf5e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bf62:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bf66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf6a:	ee14 2a90 	vmov	r2, s9
 800bf6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf72:	3230      	adds	r2, #48	@ 0x30
 800bf74:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	f806 2b01 	strb.w	r2, [r6], #1
 800bf84:	d438      	bmi.n	800bff8 <_dtoa_r+0x560>
 800bf86:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bf8a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bf8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf92:	d46e      	bmi.n	800c072 <_dtoa_r+0x5da>
 800bf94:	42a6      	cmp	r6, r4
 800bf96:	f43f af5a 	beq.w	800be4e <_dtoa_r+0x3b6>
 800bf9a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bf9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bfa2:	e7e0      	b.n	800bf66 <_dtoa_r+0x4ce>
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	463e      	mov	r6, r7
 800bfa8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bfac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bfb0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bfb4:	ee14 2a90 	vmov	r2, s9
 800bfb8:	3230      	adds	r2, #48	@ 0x30
 800bfba:	f806 2b01 	strb.w	r2, [r6], #1
 800bfbe:	42a6      	cmp	r6, r4
 800bfc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bfc4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bfc8:	d119      	bne.n	800bffe <_dtoa_r+0x566>
 800bfca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bfce:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bfd2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfda:	dc4a      	bgt.n	800c072 <_dtoa_r+0x5da>
 800bfdc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bfe0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe8:	f57f af31 	bpl.w	800be4e <_dtoa_r+0x3b6>
 800bfec:	460e      	mov	r6, r1
 800bfee:	3901      	subs	r1, #1
 800bff0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bff4:	2b30      	cmp	r3, #48	@ 0x30
 800bff6:	d0f9      	beq.n	800bfec <_dtoa_r+0x554>
 800bff8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bffc:	e027      	b.n	800c04e <_dtoa_r+0x5b6>
 800bffe:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c002:	e7d5      	b.n	800bfb0 <_dtoa_r+0x518>
 800c004:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c008:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c00c:	463e      	mov	r6, r7
 800c00e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c012:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c016:	ee15 3a10 	vmov	r3, s10
 800c01a:	3330      	adds	r3, #48	@ 0x30
 800c01c:	f806 3b01 	strb.w	r3, [r6], #1
 800c020:	1bf3      	subs	r3, r6, r7
 800c022:	459a      	cmp	sl, r3
 800c024:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c028:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c02c:	d132      	bne.n	800c094 <_dtoa_r+0x5fc>
 800c02e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c032:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03a:	dc18      	bgt.n	800c06e <_dtoa_r+0x5d6>
 800c03c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c044:	d103      	bne.n	800c04e <_dtoa_r+0x5b6>
 800c046:	ee15 3a10 	vmov	r3, s10
 800c04a:	07db      	lsls	r3, r3, #31
 800c04c:	d40f      	bmi.n	800c06e <_dtoa_r+0x5d6>
 800c04e:	9901      	ldr	r1, [sp, #4]
 800c050:	4648      	mov	r0, r9
 800c052:	f000 fbbf 	bl	800c7d4 <_Bfree>
 800c056:	2300      	movs	r3, #0
 800c058:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c05a:	7033      	strb	r3, [r6, #0]
 800c05c:	f108 0301 	add.w	r3, r8, #1
 800c060:	6013      	str	r3, [r2, #0]
 800c062:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 824b 	beq.w	800c500 <_dtoa_r+0xa68>
 800c06a:	601e      	str	r6, [r3, #0]
 800c06c:	e248      	b.n	800c500 <_dtoa_r+0xa68>
 800c06e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c072:	4633      	mov	r3, r6
 800c074:	461e      	mov	r6, r3
 800c076:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c07a:	2a39      	cmp	r2, #57	@ 0x39
 800c07c:	d106      	bne.n	800c08c <_dtoa_r+0x5f4>
 800c07e:	429f      	cmp	r7, r3
 800c080:	d1f8      	bne.n	800c074 <_dtoa_r+0x5dc>
 800c082:	9a05      	ldr	r2, [sp, #20]
 800c084:	3201      	adds	r2, #1
 800c086:	9205      	str	r2, [sp, #20]
 800c088:	2230      	movs	r2, #48	@ 0x30
 800c08a:	703a      	strb	r2, [r7, #0]
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	3201      	adds	r2, #1
 800c090:	701a      	strb	r2, [r3, #0]
 800c092:	e7b1      	b.n	800bff8 <_dtoa_r+0x560>
 800c094:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c098:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a0:	d1b5      	bne.n	800c00e <_dtoa_r+0x576>
 800c0a2:	e7d4      	b.n	800c04e <_dtoa_r+0x5b6>
 800c0a4:	08021750 	.word	0x08021750
 800c0a8:	08021728 	.word	0x08021728
 800c0ac:	9908      	ldr	r1, [sp, #32]
 800c0ae:	2900      	cmp	r1, #0
 800c0b0:	f000 80e9 	beq.w	800c286 <_dtoa_r+0x7ee>
 800c0b4:	9907      	ldr	r1, [sp, #28]
 800c0b6:	2901      	cmp	r1, #1
 800c0b8:	f300 80cb 	bgt.w	800c252 <_dtoa_r+0x7ba>
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	f000 80c4 	beq.w	800c24a <_dtoa_r+0x7b2>
 800c0c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c0c6:	9e04      	ldr	r6, [sp, #16]
 800c0c8:	461c      	mov	r4, r3
 800c0ca:	9305      	str	r3, [sp, #20]
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	9b06      	ldr	r3, [sp, #24]
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	4413      	add	r3, r2
 800c0d8:	4648      	mov	r0, r9
 800c0da:	9306      	str	r3, [sp, #24]
 800c0dc:	f000 fc2e 	bl	800c93c <__i2b>
 800c0e0:	9b05      	ldr	r3, [sp, #20]
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	b166      	cbz	r6, 800c100 <_dtoa_r+0x668>
 800c0e6:	9a06      	ldr	r2, [sp, #24]
 800c0e8:	2a00      	cmp	r2, #0
 800c0ea:	dd09      	ble.n	800c100 <_dtoa_r+0x668>
 800c0ec:	42b2      	cmp	r2, r6
 800c0ee:	9904      	ldr	r1, [sp, #16]
 800c0f0:	bfa8      	it	ge
 800c0f2:	4632      	movge	r2, r6
 800c0f4:	1a89      	subs	r1, r1, r2
 800c0f6:	9104      	str	r1, [sp, #16]
 800c0f8:	9906      	ldr	r1, [sp, #24]
 800c0fa:	1ab6      	subs	r6, r6, r2
 800c0fc:	1a8a      	subs	r2, r1, r2
 800c0fe:	9206      	str	r2, [sp, #24]
 800c100:	b30b      	cbz	r3, 800c146 <_dtoa_r+0x6ae>
 800c102:	9a08      	ldr	r2, [sp, #32]
 800c104:	2a00      	cmp	r2, #0
 800c106:	f000 80c5 	beq.w	800c294 <_dtoa_r+0x7fc>
 800c10a:	2c00      	cmp	r4, #0
 800c10c:	f000 80bf 	beq.w	800c28e <_dtoa_r+0x7f6>
 800c110:	4629      	mov	r1, r5
 800c112:	4622      	mov	r2, r4
 800c114:	4648      	mov	r0, r9
 800c116:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c118:	f000 fcc8 	bl	800caac <__pow5mult>
 800c11c:	9a01      	ldr	r2, [sp, #4]
 800c11e:	4601      	mov	r1, r0
 800c120:	4605      	mov	r5, r0
 800c122:	4648      	mov	r0, r9
 800c124:	f000 fc20 	bl	800c968 <__multiply>
 800c128:	9901      	ldr	r1, [sp, #4]
 800c12a:	9005      	str	r0, [sp, #20]
 800c12c:	4648      	mov	r0, r9
 800c12e:	f000 fb51 	bl	800c7d4 <_Bfree>
 800c132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c134:	1b1b      	subs	r3, r3, r4
 800c136:	f000 80b0 	beq.w	800c29a <_dtoa_r+0x802>
 800c13a:	9905      	ldr	r1, [sp, #20]
 800c13c:	461a      	mov	r2, r3
 800c13e:	4648      	mov	r0, r9
 800c140:	f000 fcb4 	bl	800caac <__pow5mult>
 800c144:	9001      	str	r0, [sp, #4]
 800c146:	2101      	movs	r1, #1
 800c148:	4648      	mov	r0, r9
 800c14a:	f000 fbf7 	bl	800c93c <__i2b>
 800c14e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c150:	4604      	mov	r4, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 81da 	beq.w	800c50c <_dtoa_r+0xa74>
 800c158:	461a      	mov	r2, r3
 800c15a:	4601      	mov	r1, r0
 800c15c:	4648      	mov	r0, r9
 800c15e:	f000 fca5 	bl	800caac <__pow5mult>
 800c162:	9b07      	ldr	r3, [sp, #28]
 800c164:	2b01      	cmp	r3, #1
 800c166:	4604      	mov	r4, r0
 800c168:	f300 80a0 	bgt.w	800c2ac <_dtoa_r+0x814>
 800c16c:	9b02      	ldr	r3, [sp, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f040 8096 	bne.w	800c2a0 <_dtoa_r+0x808>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c17a:	2a00      	cmp	r2, #0
 800c17c:	f040 8092 	bne.w	800c2a4 <_dtoa_r+0x80c>
 800c180:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c184:	0d12      	lsrs	r2, r2, #20
 800c186:	0512      	lsls	r2, r2, #20
 800c188:	2a00      	cmp	r2, #0
 800c18a:	f000 808d 	beq.w	800c2a8 <_dtoa_r+0x810>
 800c18e:	9b04      	ldr	r3, [sp, #16]
 800c190:	3301      	adds	r3, #1
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	9b06      	ldr	r3, [sp, #24]
 800c196:	3301      	adds	r3, #1
 800c198:	9306      	str	r3, [sp, #24]
 800c19a:	2301      	movs	r3, #1
 800c19c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c19e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 81b9 	beq.w	800c518 <_dtoa_r+0xa80>
 800c1a6:	6922      	ldr	r2, [r4, #16]
 800c1a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c1ac:	6910      	ldr	r0, [r2, #16]
 800c1ae:	f000 fb79 	bl	800c8a4 <__hi0bits>
 800c1b2:	f1c0 0020 	rsb	r0, r0, #32
 800c1b6:	9b06      	ldr	r3, [sp, #24]
 800c1b8:	4418      	add	r0, r3
 800c1ba:	f010 001f 	ands.w	r0, r0, #31
 800c1be:	f000 8081 	beq.w	800c2c4 <_dtoa_r+0x82c>
 800c1c2:	f1c0 0220 	rsb	r2, r0, #32
 800c1c6:	2a04      	cmp	r2, #4
 800c1c8:	dd73      	ble.n	800c2b2 <_dtoa_r+0x81a>
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	f1c0 001c 	rsb	r0, r0, #28
 800c1d0:	4403      	add	r3, r0
 800c1d2:	9304      	str	r3, [sp, #16]
 800c1d4:	9b06      	ldr	r3, [sp, #24]
 800c1d6:	4406      	add	r6, r0
 800c1d8:	4403      	add	r3, r0
 800c1da:	9306      	str	r3, [sp, #24]
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	dd05      	ble.n	800c1ee <_dtoa_r+0x756>
 800c1e2:	9901      	ldr	r1, [sp, #4]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	4648      	mov	r0, r9
 800c1e8:	f000 fcba 	bl	800cb60 <__lshift>
 800c1ec:	9001      	str	r0, [sp, #4]
 800c1ee:	9b06      	ldr	r3, [sp, #24]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	dd05      	ble.n	800c200 <_dtoa_r+0x768>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	4648      	mov	r0, r9
 800c1fa:	f000 fcb1 	bl	800cb60 <__lshift>
 800c1fe:	4604      	mov	r4, r0
 800c200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c202:	2b00      	cmp	r3, #0
 800c204:	d060      	beq.n	800c2c8 <_dtoa_r+0x830>
 800c206:	9801      	ldr	r0, [sp, #4]
 800c208:	4621      	mov	r1, r4
 800c20a:	f000 fd15 	bl	800cc38 <__mcmp>
 800c20e:	2800      	cmp	r0, #0
 800c210:	da5a      	bge.n	800c2c8 <_dtoa_r+0x830>
 800c212:	f108 33ff 	add.w	r3, r8, #4294967295
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	9901      	ldr	r1, [sp, #4]
 800c21a:	2300      	movs	r3, #0
 800c21c:	220a      	movs	r2, #10
 800c21e:	4648      	mov	r0, r9
 800c220:	f000 fafa 	bl	800c818 <__multadd>
 800c224:	9b08      	ldr	r3, [sp, #32]
 800c226:	9001      	str	r0, [sp, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 8177 	beq.w	800c51c <_dtoa_r+0xa84>
 800c22e:	4629      	mov	r1, r5
 800c230:	2300      	movs	r3, #0
 800c232:	220a      	movs	r2, #10
 800c234:	4648      	mov	r0, r9
 800c236:	f000 faef 	bl	800c818 <__multadd>
 800c23a:	f1bb 0f00 	cmp.w	fp, #0
 800c23e:	4605      	mov	r5, r0
 800c240:	dc6e      	bgt.n	800c320 <_dtoa_r+0x888>
 800c242:	9b07      	ldr	r3, [sp, #28]
 800c244:	2b02      	cmp	r3, #2
 800c246:	dc48      	bgt.n	800c2da <_dtoa_r+0x842>
 800c248:	e06a      	b.n	800c320 <_dtoa_r+0x888>
 800c24a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c24c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c250:	e739      	b.n	800c0c6 <_dtoa_r+0x62e>
 800c252:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c256:	42a3      	cmp	r3, r4
 800c258:	db07      	blt.n	800c26a <_dtoa_r+0x7d2>
 800c25a:	f1ba 0f00 	cmp.w	sl, #0
 800c25e:	eba3 0404 	sub.w	r4, r3, r4
 800c262:	db0b      	blt.n	800c27c <_dtoa_r+0x7e4>
 800c264:	9e04      	ldr	r6, [sp, #16]
 800c266:	4652      	mov	r2, sl
 800c268:	e72f      	b.n	800c0ca <_dtoa_r+0x632>
 800c26a:	1ae2      	subs	r2, r4, r3
 800c26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c26e:	9e04      	ldr	r6, [sp, #16]
 800c270:	4413      	add	r3, r2
 800c272:	930a      	str	r3, [sp, #40]	@ 0x28
 800c274:	4652      	mov	r2, sl
 800c276:	4623      	mov	r3, r4
 800c278:	2400      	movs	r4, #0
 800c27a:	e726      	b.n	800c0ca <_dtoa_r+0x632>
 800c27c:	9a04      	ldr	r2, [sp, #16]
 800c27e:	eba2 060a 	sub.w	r6, r2, sl
 800c282:	2200      	movs	r2, #0
 800c284:	e721      	b.n	800c0ca <_dtoa_r+0x632>
 800c286:	9e04      	ldr	r6, [sp, #16]
 800c288:	9d08      	ldr	r5, [sp, #32]
 800c28a:	461c      	mov	r4, r3
 800c28c:	e72a      	b.n	800c0e4 <_dtoa_r+0x64c>
 800c28e:	9a01      	ldr	r2, [sp, #4]
 800c290:	9205      	str	r2, [sp, #20]
 800c292:	e752      	b.n	800c13a <_dtoa_r+0x6a2>
 800c294:	9901      	ldr	r1, [sp, #4]
 800c296:	461a      	mov	r2, r3
 800c298:	e751      	b.n	800c13e <_dtoa_r+0x6a6>
 800c29a:	9b05      	ldr	r3, [sp, #20]
 800c29c:	9301      	str	r3, [sp, #4]
 800c29e:	e752      	b.n	800c146 <_dtoa_r+0x6ae>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e77b      	b.n	800c19c <_dtoa_r+0x704>
 800c2a4:	9b02      	ldr	r3, [sp, #8]
 800c2a6:	e779      	b.n	800c19c <_dtoa_r+0x704>
 800c2a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c2aa:	e778      	b.n	800c19e <_dtoa_r+0x706>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2b0:	e779      	b.n	800c1a6 <_dtoa_r+0x70e>
 800c2b2:	d093      	beq.n	800c1dc <_dtoa_r+0x744>
 800c2b4:	9b04      	ldr	r3, [sp, #16]
 800c2b6:	321c      	adds	r2, #28
 800c2b8:	4413      	add	r3, r2
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	9b06      	ldr	r3, [sp, #24]
 800c2be:	4416      	add	r6, r2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	e78a      	b.n	800c1da <_dtoa_r+0x742>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	e7f5      	b.n	800c2b4 <_dtoa_r+0x81c>
 800c2c8:	f1ba 0f00 	cmp.w	sl, #0
 800c2cc:	f8cd 8014 	str.w	r8, [sp, #20]
 800c2d0:	46d3      	mov	fp, sl
 800c2d2:	dc21      	bgt.n	800c318 <_dtoa_r+0x880>
 800c2d4:	9b07      	ldr	r3, [sp, #28]
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	dd1e      	ble.n	800c318 <_dtoa_r+0x880>
 800c2da:	f1bb 0f00 	cmp.w	fp, #0
 800c2de:	f47f addc 	bne.w	800be9a <_dtoa_r+0x402>
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	465b      	mov	r3, fp
 800c2e6:	2205      	movs	r2, #5
 800c2e8:	4648      	mov	r0, r9
 800c2ea:	f000 fa95 	bl	800c818 <__multadd>
 800c2ee:	4601      	mov	r1, r0
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	9801      	ldr	r0, [sp, #4]
 800c2f4:	f000 fca0 	bl	800cc38 <__mcmp>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	f77f adce 	ble.w	800be9a <_dtoa_r+0x402>
 800c2fe:	463e      	mov	r6, r7
 800c300:	2331      	movs	r3, #49	@ 0x31
 800c302:	f806 3b01 	strb.w	r3, [r6], #1
 800c306:	9b05      	ldr	r3, [sp, #20]
 800c308:	3301      	adds	r3, #1
 800c30a:	9305      	str	r3, [sp, #20]
 800c30c:	e5c9      	b.n	800bea2 <_dtoa_r+0x40a>
 800c30e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c312:	4654      	mov	r4, sl
 800c314:	4625      	mov	r5, r4
 800c316:	e7f2      	b.n	800c2fe <_dtoa_r+0x866>
 800c318:	9b08      	ldr	r3, [sp, #32]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 8102 	beq.w	800c524 <_dtoa_r+0xa8c>
 800c320:	2e00      	cmp	r6, #0
 800c322:	dd05      	ble.n	800c330 <_dtoa_r+0x898>
 800c324:	4629      	mov	r1, r5
 800c326:	4632      	mov	r2, r6
 800c328:	4648      	mov	r0, r9
 800c32a:	f000 fc19 	bl	800cb60 <__lshift>
 800c32e:	4605      	mov	r5, r0
 800c330:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c332:	2b00      	cmp	r3, #0
 800c334:	d058      	beq.n	800c3e8 <_dtoa_r+0x950>
 800c336:	6869      	ldr	r1, [r5, #4]
 800c338:	4648      	mov	r0, r9
 800c33a:	f000 fa0b 	bl	800c754 <_Balloc>
 800c33e:	4606      	mov	r6, r0
 800c340:	b928      	cbnz	r0, 800c34e <_dtoa_r+0x8b6>
 800c342:	4b82      	ldr	r3, [pc, #520]	@ (800c54c <_dtoa_r+0xab4>)
 800c344:	4602      	mov	r2, r0
 800c346:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c34a:	f7ff bbbe 	b.w	800baca <_dtoa_r+0x32>
 800c34e:	692a      	ldr	r2, [r5, #16]
 800c350:	3202      	adds	r2, #2
 800c352:	0092      	lsls	r2, r2, #2
 800c354:	f105 010c 	add.w	r1, r5, #12
 800c358:	300c      	adds	r0, #12
 800c35a:	f000 ffa3 	bl	800d2a4 <memcpy>
 800c35e:	2201      	movs	r2, #1
 800c360:	4631      	mov	r1, r6
 800c362:	4648      	mov	r0, r9
 800c364:	f000 fbfc 	bl	800cb60 <__lshift>
 800c368:	1c7b      	adds	r3, r7, #1
 800c36a:	9304      	str	r3, [sp, #16]
 800c36c:	eb07 030b 	add.w	r3, r7, fp
 800c370:	9309      	str	r3, [sp, #36]	@ 0x24
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	46a8      	mov	r8, r5
 800c37a:	9308      	str	r3, [sp, #32]
 800c37c:	4605      	mov	r5, r0
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	9801      	ldr	r0, [sp, #4]
 800c382:	4621      	mov	r1, r4
 800c384:	f103 3bff 	add.w	fp, r3, #4294967295
 800c388:	f7ff fafb 	bl	800b982 <quorem>
 800c38c:	4641      	mov	r1, r8
 800c38e:	9002      	str	r0, [sp, #8]
 800c390:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c394:	9801      	ldr	r0, [sp, #4]
 800c396:	f000 fc4f 	bl	800cc38 <__mcmp>
 800c39a:	462a      	mov	r2, r5
 800c39c:	9006      	str	r0, [sp, #24]
 800c39e:	4621      	mov	r1, r4
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	f000 fc65 	bl	800cc70 <__mdiff>
 800c3a6:	68c2      	ldr	r2, [r0, #12]
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	b9fa      	cbnz	r2, 800c3ec <_dtoa_r+0x954>
 800c3ac:	4601      	mov	r1, r0
 800c3ae:	9801      	ldr	r0, [sp, #4]
 800c3b0:	f000 fc42 	bl	800cc38 <__mcmp>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	4648      	mov	r0, r9
 800c3ba:	920a      	str	r2, [sp, #40]	@ 0x28
 800c3bc:	f000 fa0a 	bl	800c7d4 <_Bfree>
 800c3c0:	9b07      	ldr	r3, [sp, #28]
 800c3c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3c4:	9e04      	ldr	r6, [sp, #16]
 800c3c6:	ea42 0103 	orr.w	r1, r2, r3
 800c3ca:	9b08      	ldr	r3, [sp, #32]
 800c3cc:	4319      	orrs	r1, r3
 800c3ce:	d10f      	bne.n	800c3f0 <_dtoa_r+0x958>
 800c3d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c3d4:	d028      	beq.n	800c428 <_dtoa_r+0x990>
 800c3d6:	9b06      	ldr	r3, [sp, #24]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	dd02      	ble.n	800c3e2 <_dtoa_r+0x94a>
 800c3dc:	9b02      	ldr	r3, [sp, #8]
 800c3de:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c3e2:	f88b a000 	strb.w	sl, [fp]
 800c3e6:	e55e      	b.n	800bea6 <_dtoa_r+0x40e>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	e7bd      	b.n	800c368 <_dtoa_r+0x8d0>
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	e7e2      	b.n	800c3b6 <_dtoa_r+0x91e>
 800c3f0:	9b06      	ldr	r3, [sp, #24]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	db04      	blt.n	800c400 <_dtoa_r+0x968>
 800c3f6:	9907      	ldr	r1, [sp, #28]
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	9908      	ldr	r1, [sp, #32]
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	d120      	bne.n	800c442 <_dtoa_r+0x9aa>
 800c400:	2a00      	cmp	r2, #0
 800c402:	ddee      	ble.n	800c3e2 <_dtoa_r+0x94a>
 800c404:	9901      	ldr	r1, [sp, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	4648      	mov	r0, r9
 800c40a:	f000 fba9 	bl	800cb60 <__lshift>
 800c40e:	4621      	mov	r1, r4
 800c410:	9001      	str	r0, [sp, #4]
 800c412:	f000 fc11 	bl	800cc38 <__mcmp>
 800c416:	2800      	cmp	r0, #0
 800c418:	dc03      	bgt.n	800c422 <_dtoa_r+0x98a>
 800c41a:	d1e2      	bne.n	800c3e2 <_dtoa_r+0x94a>
 800c41c:	f01a 0f01 	tst.w	sl, #1
 800c420:	d0df      	beq.n	800c3e2 <_dtoa_r+0x94a>
 800c422:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c426:	d1d9      	bne.n	800c3dc <_dtoa_r+0x944>
 800c428:	2339      	movs	r3, #57	@ 0x39
 800c42a:	f88b 3000 	strb.w	r3, [fp]
 800c42e:	4633      	mov	r3, r6
 800c430:	461e      	mov	r6, r3
 800c432:	3b01      	subs	r3, #1
 800c434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c438:	2a39      	cmp	r2, #57	@ 0x39
 800c43a:	d052      	beq.n	800c4e2 <_dtoa_r+0xa4a>
 800c43c:	3201      	adds	r2, #1
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	e531      	b.n	800bea6 <_dtoa_r+0x40e>
 800c442:	2a00      	cmp	r2, #0
 800c444:	dd07      	ble.n	800c456 <_dtoa_r+0x9be>
 800c446:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c44a:	d0ed      	beq.n	800c428 <_dtoa_r+0x990>
 800c44c:	f10a 0301 	add.w	r3, sl, #1
 800c450:	f88b 3000 	strb.w	r3, [fp]
 800c454:	e527      	b.n	800bea6 <_dtoa_r+0x40e>
 800c456:	9b04      	ldr	r3, [sp, #16]
 800c458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c45a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c45e:	4293      	cmp	r3, r2
 800c460:	d029      	beq.n	800c4b6 <_dtoa_r+0xa1e>
 800c462:	9901      	ldr	r1, [sp, #4]
 800c464:	2300      	movs	r3, #0
 800c466:	220a      	movs	r2, #10
 800c468:	4648      	mov	r0, r9
 800c46a:	f000 f9d5 	bl	800c818 <__multadd>
 800c46e:	45a8      	cmp	r8, r5
 800c470:	9001      	str	r0, [sp, #4]
 800c472:	f04f 0300 	mov.w	r3, #0
 800c476:	f04f 020a 	mov.w	r2, #10
 800c47a:	4641      	mov	r1, r8
 800c47c:	4648      	mov	r0, r9
 800c47e:	d107      	bne.n	800c490 <_dtoa_r+0x9f8>
 800c480:	f000 f9ca 	bl	800c818 <__multadd>
 800c484:	4680      	mov	r8, r0
 800c486:	4605      	mov	r5, r0
 800c488:	9b04      	ldr	r3, [sp, #16]
 800c48a:	3301      	adds	r3, #1
 800c48c:	9304      	str	r3, [sp, #16]
 800c48e:	e776      	b.n	800c37e <_dtoa_r+0x8e6>
 800c490:	f000 f9c2 	bl	800c818 <__multadd>
 800c494:	4629      	mov	r1, r5
 800c496:	4680      	mov	r8, r0
 800c498:	2300      	movs	r3, #0
 800c49a:	220a      	movs	r2, #10
 800c49c:	4648      	mov	r0, r9
 800c49e:	f000 f9bb 	bl	800c818 <__multadd>
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	e7f0      	b.n	800c488 <_dtoa_r+0x9f0>
 800c4a6:	f1bb 0f00 	cmp.w	fp, #0
 800c4aa:	bfcc      	ite	gt
 800c4ac:	465e      	movgt	r6, fp
 800c4ae:	2601      	movle	r6, #1
 800c4b0:	443e      	add	r6, r7
 800c4b2:	f04f 0800 	mov.w	r8, #0
 800c4b6:	9901      	ldr	r1, [sp, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	4648      	mov	r0, r9
 800c4bc:	f000 fb50 	bl	800cb60 <__lshift>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	9001      	str	r0, [sp, #4]
 800c4c4:	f000 fbb8 	bl	800cc38 <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dcb0      	bgt.n	800c42e <_dtoa_r+0x996>
 800c4cc:	d102      	bne.n	800c4d4 <_dtoa_r+0xa3c>
 800c4ce:	f01a 0f01 	tst.w	sl, #1
 800c4d2:	d1ac      	bne.n	800c42e <_dtoa_r+0x996>
 800c4d4:	4633      	mov	r3, r6
 800c4d6:	461e      	mov	r6, r3
 800c4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4dc:	2a30      	cmp	r2, #48	@ 0x30
 800c4de:	d0fa      	beq.n	800c4d6 <_dtoa_r+0xa3e>
 800c4e0:	e4e1      	b.n	800bea6 <_dtoa_r+0x40e>
 800c4e2:	429f      	cmp	r7, r3
 800c4e4:	d1a4      	bne.n	800c430 <_dtoa_r+0x998>
 800c4e6:	9b05      	ldr	r3, [sp, #20]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	9305      	str	r3, [sp, #20]
 800c4ec:	2331      	movs	r3, #49	@ 0x31
 800c4ee:	703b      	strb	r3, [r7, #0]
 800c4f0:	e4d9      	b.n	800bea6 <_dtoa_r+0x40e>
 800c4f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c4f4:	4f16      	ldr	r7, [pc, #88]	@ (800c550 <_dtoa_r+0xab8>)
 800c4f6:	b11b      	cbz	r3, 800c500 <_dtoa_r+0xa68>
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	4638      	mov	r0, r7
 800c502:	b011      	add	sp, #68	@ 0x44
 800c504:	ecbd 8b02 	vpop	{d8}
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	9b07      	ldr	r3, [sp, #28]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	f77f ae2c 	ble.w	800c16c <_dtoa_r+0x6d4>
 800c514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c516:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c518:	2001      	movs	r0, #1
 800c51a:	e64c      	b.n	800c1b6 <_dtoa_r+0x71e>
 800c51c:	f1bb 0f00 	cmp.w	fp, #0
 800c520:	f77f aed8 	ble.w	800c2d4 <_dtoa_r+0x83c>
 800c524:	463e      	mov	r6, r7
 800c526:	9801      	ldr	r0, [sp, #4]
 800c528:	4621      	mov	r1, r4
 800c52a:	f7ff fa2a 	bl	800b982 <quorem>
 800c52e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c532:	f806 ab01 	strb.w	sl, [r6], #1
 800c536:	1bf2      	subs	r2, r6, r7
 800c538:	4593      	cmp	fp, r2
 800c53a:	ddb4      	ble.n	800c4a6 <_dtoa_r+0xa0e>
 800c53c:	9901      	ldr	r1, [sp, #4]
 800c53e:	2300      	movs	r3, #0
 800c540:	220a      	movs	r2, #10
 800c542:	4648      	mov	r0, r9
 800c544:	f000 f968 	bl	800c818 <__multadd>
 800c548:	9001      	str	r0, [sp, #4]
 800c54a:	e7ec      	b.n	800c526 <_dtoa_r+0xa8e>
 800c54c:	08021654 	.word	0x08021654
 800c550:	080215d8 	.word	0x080215d8

0800c554 <_free_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4605      	mov	r5, r0
 800c558:	2900      	cmp	r1, #0
 800c55a:	d041      	beq.n	800c5e0 <_free_r+0x8c>
 800c55c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c560:	1f0c      	subs	r4, r1, #4
 800c562:	2b00      	cmp	r3, #0
 800c564:	bfb8      	it	lt
 800c566:	18e4      	addlt	r4, r4, r3
 800c568:	f000 f8e8 	bl	800c73c <__malloc_lock>
 800c56c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e4 <_free_r+0x90>)
 800c56e:	6813      	ldr	r3, [r2, #0]
 800c570:	b933      	cbnz	r3, 800c580 <_free_r+0x2c>
 800c572:	6063      	str	r3, [r4, #4]
 800c574:	6014      	str	r4, [r2, #0]
 800c576:	4628      	mov	r0, r5
 800c578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c57c:	f000 b8e4 	b.w	800c748 <__malloc_unlock>
 800c580:	42a3      	cmp	r3, r4
 800c582:	d908      	bls.n	800c596 <_free_r+0x42>
 800c584:	6820      	ldr	r0, [r4, #0]
 800c586:	1821      	adds	r1, r4, r0
 800c588:	428b      	cmp	r3, r1
 800c58a:	bf01      	itttt	eq
 800c58c:	6819      	ldreq	r1, [r3, #0]
 800c58e:	685b      	ldreq	r3, [r3, #4]
 800c590:	1809      	addeq	r1, r1, r0
 800c592:	6021      	streq	r1, [r4, #0]
 800c594:	e7ed      	b.n	800c572 <_free_r+0x1e>
 800c596:	461a      	mov	r2, r3
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	b10b      	cbz	r3, 800c5a0 <_free_r+0x4c>
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	d9fa      	bls.n	800c596 <_free_r+0x42>
 800c5a0:	6811      	ldr	r1, [r2, #0]
 800c5a2:	1850      	adds	r0, r2, r1
 800c5a4:	42a0      	cmp	r0, r4
 800c5a6:	d10b      	bne.n	800c5c0 <_free_r+0x6c>
 800c5a8:	6820      	ldr	r0, [r4, #0]
 800c5aa:	4401      	add	r1, r0
 800c5ac:	1850      	adds	r0, r2, r1
 800c5ae:	4283      	cmp	r3, r0
 800c5b0:	6011      	str	r1, [r2, #0]
 800c5b2:	d1e0      	bne.n	800c576 <_free_r+0x22>
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	6053      	str	r3, [r2, #4]
 800c5ba:	4408      	add	r0, r1
 800c5bc:	6010      	str	r0, [r2, #0]
 800c5be:	e7da      	b.n	800c576 <_free_r+0x22>
 800c5c0:	d902      	bls.n	800c5c8 <_free_r+0x74>
 800c5c2:	230c      	movs	r3, #12
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	e7d6      	b.n	800c576 <_free_r+0x22>
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	1821      	adds	r1, r4, r0
 800c5cc:	428b      	cmp	r3, r1
 800c5ce:	bf04      	itt	eq
 800c5d0:	6819      	ldreq	r1, [r3, #0]
 800c5d2:	685b      	ldreq	r3, [r3, #4]
 800c5d4:	6063      	str	r3, [r4, #4]
 800c5d6:	bf04      	itt	eq
 800c5d8:	1809      	addeq	r1, r1, r0
 800c5da:	6021      	streq	r1, [r4, #0]
 800c5dc:	6054      	str	r4, [r2, #4]
 800c5de:	e7ca      	b.n	800c576 <_free_r+0x22>
 800c5e0:	bd38      	pop	{r3, r4, r5, pc}
 800c5e2:	bf00      	nop
 800c5e4:	24003e6c 	.word	0x24003e6c

0800c5e8 <malloc>:
 800c5e8:	4b02      	ldr	r3, [pc, #8]	@ (800c5f4 <malloc+0xc>)
 800c5ea:	4601      	mov	r1, r0
 800c5ec:	6818      	ldr	r0, [r3, #0]
 800c5ee:	f000 b825 	b.w	800c63c <_malloc_r>
 800c5f2:	bf00      	nop
 800c5f4:	24000058 	.word	0x24000058

0800c5f8 <sbrk_aligned>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	4e0f      	ldr	r6, [pc, #60]	@ (800c638 <sbrk_aligned+0x40>)
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	6831      	ldr	r1, [r6, #0]
 800c600:	4605      	mov	r5, r0
 800c602:	b911      	cbnz	r1, 800c60a <sbrk_aligned+0x12>
 800c604:	f000 fe3e 	bl	800d284 <_sbrk_r>
 800c608:	6030      	str	r0, [r6, #0]
 800c60a:	4621      	mov	r1, r4
 800c60c:	4628      	mov	r0, r5
 800c60e:	f000 fe39 	bl	800d284 <_sbrk_r>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	d103      	bne.n	800c61e <sbrk_aligned+0x26>
 800c616:	f04f 34ff 	mov.w	r4, #4294967295
 800c61a:	4620      	mov	r0, r4
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
 800c61e:	1cc4      	adds	r4, r0, #3
 800c620:	f024 0403 	bic.w	r4, r4, #3
 800c624:	42a0      	cmp	r0, r4
 800c626:	d0f8      	beq.n	800c61a <sbrk_aligned+0x22>
 800c628:	1a21      	subs	r1, r4, r0
 800c62a:	4628      	mov	r0, r5
 800c62c:	f000 fe2a 	bl	800d284 <_sbrk_r>
 800c630:	3001      	adds	r0, #1
 800c632:	d1f2      	bne.n	800c61a <sbrk_aligned+0x22>
 800c634:	e7ef      	b.n	800c616 <sbrk_aligned+0x1e>
 800c636:	bf00      	nop
 800c638:	24003e68 	.word	0x24003e68

0800c63c <_malloc_r>:
 800c63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c640:	1ccd      	adds	r5, r1, #3
 800c642:	f025 0503 	bic.w	r5, r5, #3
 800c646:	3508      	adds	r5, #8
 800c648:	2d0c      	cmp	r5, #12
 800c64a:	bf38      	it	cc
 800c64c:	250c      	movcc	r5, #12
 800c64e:	2d00      	cmp	r5, #0
 800c650:	4606      	mov	r6, r0
 800c652:	db01      	blt.n	800c658 <_malloc_r+0x1c>
 800c654:	42a9      	cmp	r1, r5
 800c656:	d904      	bls.n	800c662 <_malloc_r+0x26>
 800c658:	230c      	movs	r3, #12
 800c65a:	6033      	str	r3, [r6, #0]
 800c65c:	2000      	movs	r0, #0
 800c65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c738 <_malloc_r+0xfc>
 800c666:	f000 f869 	bl	800c73c <__malloc_lock>
 800c66a:	f8d8 3000 	ldr.w	r3, [r8]
 800c66e:	461c      	mov	r4, r3
 800c670:	bb44      	cbnz	r4, 800c6c4 <_malloc_r+0x88>
 800c672:	4629      	mov	r1, r5
 800c674:	4630      	mov	r0, r6
 800c676:	f7ff ffbf 	bl	800c5f8 <sbrk_aligned>
 800c67a:	1c43      	adds	r3, r0, #1
 800c67c:	4604      	mov	r4, r0
 800c67e:	d158      	bne.n	800c732 <_malloc_r+0xf6>
 800c680:	f8d8 4000 	ldr.w	r4, [r8]
 800c684:	4627      	mov	r7, r4
 800c686:	2f00      	cmp	r7, #0
 800c688:	d143      	bne.n	800c712 <_malloc_r+0xd6>
 800c68a:	2c00      	cmp	r4, #0
 800c68c:	d04b      	beq.n	800c726 <_malloc_r+0xea>
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	4639      	mov	r1, r7
 800c692:	4630      	mov	r0, r6
 800c694:	eb04 0903 	add.w	r9, r4, r3
 800c698:	f000 fdf4 	bl	800d284 <_sbrk_r>
 800c69c:	4581      	cmp	r9, r0
 800c69e:	d142      	bne.n	800c726 <_malloc_r+0xea>
 800c6a0:	6821      	ldr	r1, [r4, #0]
 800c6a2:	1a6d      	subs	r5, r5, r1
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	f7ff ffa6 	bl	800c5f8 <sbrk_aligned>
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	d03a      	beq.n	800c726 <_malloc_r+0xea>
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	442b      	add	r3, r5
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	bb62      	cbnz	r2, 800c718 <_malloc_r+0xdc>
 800c6be:	f8c8 7000 	str.w	r7, [r8]
 800c6c2:	e00f      	b.n	800c6e4 <_malloc_r+0xa8>
 800c6c4:	6822      	ldr	r2, [r4, #0]
 800c6c6:	1b52      	subs	r2, r2, r5
 800c6c8:	d420      	bmi.n	800c70c <_malloc_r+0xd0>
 800c6ca:	2a0b      	cmp	r2, #11
 800c6cc:	d917      	bls.n	800c6fe <_malloc_r+0xc2>
 800c6ce:	1961      	adds	r1, r4, r5
 800c6d0:	42a3      	cmp	r3, r4
 800c6d2:	6025      	str	r5, [r4, #0]
 800c6d4:	bf18      	it	ne
 800c6d6:	6059      	strne	r1, [r3, #4]
 800c6d8:	6863      	ldr	r3, [r4, #4]
 800c6da:	bf08      	it	eq
 800c6dc:	f8c8 1000 	streq.w	r1, [r8]
 800c6e0:	5162      	str	r2, [r4, r5]
 800c6e2:	604b      	str	r3, [r1, #4]
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f000 f82f 	bl	800c748 <__malloc_unlock>
 800c6ea:	f104 000b 	add.w	r0, r4, #11
 800c6ee:	1d23      	adds	r3, r4, #4
 800c6f0:	f020 0007 	bic.w	r0, r0, #7
 800c6f4:	1ac2      	subs	r2, r0, r3
 800c6f6:	bf1c      	itt	ne
 800c6f8:	1a1b      	subne	r3, r3, r0
 800c6fa:	50a3      	strne	r3, [r4, r2]
 800c6fc:	e7af      	b.n	800c65e <_malloc_r+0x22>
 800c6fe:	6862      	ldr	r2, [r4, #4]
 800c700:	42a3      	cmp	r3, r4
 800c702:	bf0c      	ite	eq
 800c704:	f8c8 2000 	streq.w	r2, [r8]
 800c708:	605a      	strne	r2, [r3, #4]
 800c70a:	e7eb      	b.n	800c6e4 <_malloc_r+0xa8>
 800c70c:	4623      	mov	r3, r4
 800c70e:	6864      	ldr	r4, [r4, #4]
 800c710:	e7ae      	b.n	800c670 <_malloc_r+0x34>
 800c712:	463c      	mov	r4, r7
 800c714:	687f      	ldr	r7, [r7, #4]
 800c716:	e7b6      	b.n	800c686 <_malloc_r+0x4a>
 800c718:	461a      	mov	r2, r3
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	d1fb      	bne.n	800c718 <_malloc_r+0xdc>
 800c720:	2300      	movs	r3, #0
 800c722:	6053      	str	r3, [r2, #4]
 800c724:	e7de      	b.n	800c6e4 <_malloc_r+0xa8>
 800c726:	230c      	movs	r3, #12
 800c728:	6033      	str	r3, [r6, #0]
 800c72a:	4630      	mov	r0, r6
 800c72c:	f000 f80c 	bl	800c748 <__malloc_unlock>
 800c730:	e794      	b.n	800c65c <_malloc_r+0x20>
 800c732:	6005      	str	r5, [r0, #0]
 800c734:	e7d6      	b.n	800c6e4 <_malloc_r+0xa8>
 800c736:	bf00      	nop
 800c738:	24003e6c 	.word	0x24003e6c

0800c73c <__malloc_lock>:
 800c73c:	4801      	ldr	r0, [pc, #4]	@ (800c744 <__malloc_lock+0x8>)
 800c73e:	f7ff b91e 	b.w	800b97e <__retarget_lock_acquire_recursive>
 800c742:	bf00      	nop
 800c744:	24003e64 	.word	0x24003e64

0800c748 <__malloc_unlock>:
 800c748:	4801      	ldr	r0, [pc, #4]	@ (800c750 <__malloc_unlock+0x8>)
 800c74a:	f7ff b919 	b.w	800b980 <__retarget_lock_release_recursive>
 800c74e:	bf00      	nop
 800c750:	24003e64 	.word	0x24003e64

0800c754 <_Balloc>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	69c6      	ldr	r6, [r0, #28]
 800c758:	4604      	mov	r4, r0
 800c75a:	460d      	mov	r5, r1
 800c75c:	b976      	cbnz	r6, 800c77c <_Balloc+0x28>
 800c75e:	2010      	movs	r0, #16
 800c760:	f7ff ff42 	bl	800c5e8 <malloc>
 800c764:	4602      	mov	r2, r0
 800c766:	61e0      	str	r0, [r4, #28]
 800c768:	b920      	cbnz	r0, 800c774 <_Balloc+0x20>
 800c76a:	4b18      	ldr	r3, [pc, #96]	@ (800c7cc <_Balloc+0x78>)
 800c76c:	4818      	ldr	r0, [pc, #96]	@ (800c7d0 <_Balloc+0x7c>)
 800c76e:	216b      	movs	r1, #107	@ 0x6b
 800c770:	f000 fda6 	bl	800d2c0 <__assert_func>
 800c774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c778:	6006      	str	r6, [r0, #0]
 800c77a:	60c6      	str	r6, [r0, #12]
 800c77c:	69e6      	ldr	r6, [r4, #28]
 800c77e:	68f3      	ldr	r3, [r6, #12]
 800c780:	b183      	cbz	r3, 800c7a4 <_Balloc+0x50>
 800c782:	69e3      	ldr	r3, [r4, #28]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c78a:	b9b8      	cbnz	r0, 800c7bc <_Balloc+0x68>
 800c78c:	2101      	movs	r1, #1
 800c78e:	fa01 f605 	lsl.w	r6, r1, r5
 800c792:	1d72      	adds	r2, r6, #5
 800c794:	0092      	lsls	r2, r2, #2
 800c796:	4620      	mov	r0, r4
 800c798:	f000 fdb0 	bl	800d2fc <_calloc_r>
 800c79c:	b160      	cbz	r0, 800c7b8 <_Balloc+0x64>
 800c79e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7a2:	e00e      	b.n	800c7c2 <_Balloc+0x6e>
 800c7a4:	2221      	movs	r2, #33	@ 0x21
 800c7a6:	2104      	movs	r1, #4
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fda7 	bl	800d2fc <_calloc_r>
 800c7ae:	69e3      	ldr	r3, [r4, #28]
 800c7b0:	60f0      	str	r0, [r6, #12]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1e4      	bne.n	800c782 <_Balloc+0x2e>
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}
 800c7bc:	6802      	ldr	r2, [r0, #0]
 800c7be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7c8:	e7f7      	b.n	800c7ba <_Balloc+0x66>
 800c7ca:	bf00      	nop
 800c7cc:	080215e5 	.word	0x080215e5
 800c7d0:	08021665 	.word	0x08021665

0800c7d4 <_Bfree>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	69c6      	ldr	r6, [r0, #28]
 800c7d8:	4605      	mov	r5, r0
 800c7da:	460c      	mov	r4, r1
 800c7dc:	b976      	cbnz	r6, 800c7fc <_Bfree+0x28>
 800c7de:	2010      	movs	r0, #16
 800c7e0:	f7ff ff02 	bl	800c5e8 <malloc>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	61e8      	str	r0, [r5, #28]
 800c7e8:	b920      	cbnz	r0, 800c7f4 <_Bfree+0x20>
 800c7ea:	4b09      	ldr	r3, [pc, #36]	@ (800c810 <_Bfree+0x3c>)
 800c7ec:	4809      	ldr	r0, [pc, #36]	@ (800c814 <_Bfree+0x40>)
 800c7ee:	218f      	movs	r1, #143	@ 0x8f
 800c7f0:	f000 fd66 	bl	800d2c0 <__assert_func>
 800c7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7f8:	6006      	str	r6, [r0, #0]
 800c7fa:	60c6      	str	r6, [r0, #12]
 800c7fc:	b13c      	cbz	r4, 800c80e <_Bfree+0x3a>
 800c7fe:	69eb      	ldr	r3, [r5, #28]
 800c800:	6862      	ldr	r2, [r4, #4]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c808:	6021      	str	r1, [r4, #0]
 800c80a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	080215e5 	.word	0x080215e5
 800c814:	08021665 	.word	0x08021665

0800c818 <__multadd>:
 800c818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c81c:	690d      	ldr	r5, [r1, #16]
 800c81e:	4607      	mov	r7, r0
 800c820:	460c      	mov	r4, r1
 800c822:	461e      	mov	r6, r3
 800c824:	f101 0c14 	add.w	ip, r1, #20
 800c828:	2000      	movs	r0, #0
 800c82a:	f8dc 3000 	ldr.w	r3, [ip]
 800c82e:	b299      	uxth	r1, r3
 800c830:	fb02 6101 	mla	r1, r2, r1, r6
 800c834:	0c1e      	lsrs	r6, r3, #16
 800c836:	0c0b      	lsrs	r3, r1, #16
 800c838:	fb02 3306 	mla	r3, r2, r6, r3
 800c83c:	b289      	uxth	r1, r1
 800c83e:	3001      	adds	r0, #1
 800c840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c844:	4285      	cmp	r5, r0
 800c846:	f84c 1b04 	str.w	r1, [ip], #4
 800c84a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c84e:	dcec      	bgt.n	800c82a <__multadd+0x12>
 800c850:	b30e      	cbz	r6, 800c896 <__multadd+0x7e>
 800c852:	68a3      	ldr	r3, [r4, #8]
 800c854:	42ab      	cmp	r3, r5
 800c856:	dc19      	bgt.n	800c88c <__multadd+0x74>
 800c858:	6861      	ldr	r1, [r4, #4]
 800c85a:	4638      	mov	r0, r7
 800c85c:	3101      	adds	r1, #1
 800c85e:	f7ff ff79 	bl	800c754 <_Balloc>
 800c862:	4680      	mov	r8, r0
 800c864:	b928      	cbnz	r0, 800c872 <__multadd+0x5a>
 800c866:	4602      	mov	r2, r0
 800c868:	4b0c      	ldr	r3, [pc, #48]	@ (800c89c <__multadd+0x84>)
 800c86a:	480d      	ldr	r0, [pc, #52]	@ (800c8a0 <__multadd+0x88>)
 800c86c:	21ba      	movs	r1, #186	@ 0xba
 800c86e:	f000 fd27 	bl	800d2c0 <__assert_func>
 800c872:	6922      	ldr	r2, [r4, #16]
 800c874:	3202      	adds	r2, #2
 800c876:	f104 010c 	add.w	r1, r4, #12
 800c87a:	0092      	lsls	r2, r2, #2
 800c87c:	300c      	adds	r0, #12
 800c87e:	f000 fd11 	bl	800d2a4 <memcpy>
 800c882:	4621      	mov	r1, r4
 800c884:	4638      	mov	r0, r7
 800c886:	f7ff ffa5 	bl	800c7d4 <_Bfree>
 800c88a:	4644      	mov	r4, r8
 800c88c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c890:	3501      	adds	r5, #1
 800c892:	615e      	str	r6, [r3, #20]
 800c894:	6125      	str	r5, [r4, #16]
 800c896:	4620      	mov	r0, r4
 800c898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c89c:	08021654 	.word	0x08021654
 800c8a0:	08021665 	.word	0x08021665

0800c8a4 <__hi0bits>:
 800c8a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	bf36      	itet	cc
 800c8ac:	0403      	lslcc	r3, r0, #16
 800c8ae:	2000      	movcs	r0, #0
 800c8b0:	2010      	movcc	r0, #16
 800c8b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8b6:	bf3c      	itt	cc
 800c8b8:	021b      	lslcc	r3, r3, #8
 800c8ba:	3008      	addcc	r0, #8
 800c8bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8c0:	bf3c      	itt	cc
 800c8c2:	011b      	lslcc	r3, r3, #4
 800c8c4:	3004      	addcc	r0, #4
 800c8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ca:	bf3c      	itt	cc
 800c8cc:	009b      	lslcc	r3, r3, #2
 800c8ce:	3002      	addcc	r0, #2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	db05      	blt.n	800c8e0 <__hi0bits+0x3c>
 800c8d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8d8:	f100 0001 	add.w	r0, r0, #1
 800c8dc:	bf08      	it	eq
 800c8de:	2020      	moveq	r0, #32
 800c8e0:	4770      	bx	lr

0800c8e2 <__lo0bits>:
 800c8e2:	6803      	ldr	r3, [r0, #0]
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	f013 0007 	ands.w	r0, r3, #7
 800c8ea:	d00b      	beq.n	800c904 <__lo0bits+0x22>
 800c8ec:	07d9      	lsls	r1, r3, #31
 800c8ee:	d421      	bmi.n	800c934 <__lo0bits+0x52>
 800c8f0:	0798      	lsls	r0, r3, #30
 800c8f2:	bf49      	itett	mi
 800c8f4:	085b      	lsrmi	r3, r3, #1
 800c8f6:	089b      	lsrpl	r3, r3, #2
 800c8f8:	2001      	movmi	r0, #1
 800c8fa:	6013      	strmi	r3, [r2, #0]
 800c8fc:	bf5c      	itt	pl
 800c8fe:	6013      	strpl	r3, [r2, #0]
 800c900:	2002      	movpl	r0, #2
 800c902:	4770      	bx	lr
 800c904:	b299      	uxth	r1, r3
 800c906:	b909      	cbnz	r1, 800c90c <__lo0bits+0x2a>
 800c908:	0c1b      	lsrs	r3, r3, #16
 800c90a:	2010      	movs	r0, #16
 800c90c:	b2d9      	uxtb	r1, r3
 800c90e:	b909      	cbnz	r1, 800c914 <__lo0bits+0x32>
 800c910:	3008      	adds	r0, #8
 800c912:	0a1b      	lsrs	r3, r3, #8
 800c914:	0719      	lsls	r1, r3, #28
 800c916:	bf04      	itt	eq
 800c918:	091b      	lsreq	r3, r3, #4
 800c91a:	3004      	addeq	r0, #4
 800c91c:	0799      	lsls	r1, r3, #30
 800c91e:	bf04      	itt	eq
 800c920:	089b      	lsreq	r3, r3, #2
 800c922:	3002      	addeq	r0, #2
 800c924:	07d9      	lsls	r1, r3, #31
 800c926:	d403      	bmi.n	800c930 <__lo0bits+0x4e>
 800c928:	085b      	lsrs	r3, r3, #1
 800c92a:	f100 0001 	add.w	r0, r0, #1
 800c92e:	d003      	beq.n	800c938 <__lo0bits+0x56>
 800c930:	6013      	str	r3, [r2, #0]
 800c932:	4770      	bx	lr
 800c934:	2000      	movs	r0, #0
 800c936:	4770      	bx	lr
 800c938:	2020      	movs	r0, #32
 800c93a:	4770      	bx	lr

0800c93c <__i2b>:
 800c93c:	b510      	push	{r4, lr}
 800c93e:	460c      	mov	r4, r1
 800c940:	2101      	movs	r1, #1
 800c942:	f7ff ff07 	bl	800c754 <_Balloc>
 800c946:	4602      	mov	r2, r0
 800c948:	b928      	cbnz	r0, 800c956 <__i2b+0x1a>
 800c94a:	4b05      	ldr	r3, [pc, #20]	@ (800c960 <__i2b+0x24>)
 800c94c:	4805      	ldr	r0, [pc, #20]	@ (800c964 <__i2b+0x28>)
 800c94e:	f240 1145 	movw	r1, #325	@ 0x145
 800c952:	f000 fcb5 	bl	800d2c0 <__assert_func>
 800c956:	2301      	movs	r3, #1
 800c958:	6144      	str	r4, [r0, #20]
 800c95a:	6103      	str	r3, [r0, #16]
 800c95c:	bd10      	pop	{r4, pc}
 800c95e:	bf00      	nop
 800c960:	08021654 	.word	0x08021654
 800c964:	08021665 	.word	0x08021665

0800c968 <__multiply>:
 800c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	4617      	mov	r7, r2
 800c96e:	690a      	ldr	r2, [r1, #16]
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	429a      	cmp	r2, r3
 800c974:	bfa8      	it	ge
 800c976:	463b      	movge	r3, r7
 800c978:	4689      	mov	r9, r1
 800c97a:	bfa4      	itt	ge
 800c97c:	460f      	movge	r7, r1
 800c97e:	4699      	movge	r9, r3
 800c980:	693d      	ldr	r5, [r7, #16]
 800c982:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	6879      	ldr	r1, [r7, #4]
 800c98a:	eb05 060a 	add.w	r6, r5, sl
 800c98e:	42b3      	cmp	r3, r6
 800c990:	b085      	sub	sp, #20
 800c992:	bfb8      	it	lt
 800c994:	3101      	addlt	r1, #1
 800c996:	f7ff fedd 	bl	800c754 <_Balloc>
 800c99a:	b930      	cbnz	r0, 800c9aa <__multiply+0x42>
 800c99c:	4602      	mov	r2, r0
 800c99e:	4b41      	ldr	r3, [pc, #260]	@ (800caa4 <__multiply+0x13c>)
 800c9a0:	4841      	ldr	r0, [pc, #260]	@ (800caa8 <__multiply+0x140>)
 800c9a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9a6:	f000 fc8b 	bl	800d2c0 <__assert_func>
 800c9aa:	f100 0414 	add.w	r4, r0, #20
 800c9ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c9b2:	4623      	mov	r3, r4
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	4573      	cmp	r3, lr
 800c9b8:	d320      	bcc.n	800c9fc <__multiply+0x94>
 800c9ba:	f107 0814 	add.w	r8, r7, #20
 800c9be:	f109 0114 	add.w	r1, r9, #20
 800c9c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c9c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c9ca:	9302      	str	r3, [sp, #8]
 800c9cc:	1beb      	subs	r3, r5, r7
 800c9ce:	3b15      	subs	r3, #21
 800c9d0:	f023 0303 	bic.w	r3, r3, #3
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	3715      	adds	r7, #21
 800c9d8:	42bd      	cmp	r5, r7
 800c9da:	bf38      	it	cc
 800c9dc:	2304      	movcc	r3, #4
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	9b02      	ldr	r3, [sp, #8]
 800c9e2:	9103      	str	r1, [sp, #12]
 800c9e4:	428b      	cmp	r3, r1
 800c9e6:	d80c      	bhi.n	800ca02 <__multiply+0x9a>
 800c9e8:	2e00      	cmp	r6, #0
 800c9ea:	dd03      	ble.n	800c9f4 <__multiply+0x8c>
 800c9ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d055      	beq.n	800caa0 <__multiply+0x138>
 800c9f4:	6106      	str	r6, [r0, #16]
 800c9f6:	b005      	add	sp, #20
 800c9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fc:	f843 2b04 	str.w	r2, [r3], #4
 800ca00:	e7d9      	b.n	800c9b6 <__multiply+0x4e>
 800ca02:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca06:	f1ba 0f00 	cmp.w	sl, #0
 800ca0a:	d01f      	beq.n	800ca4c <__multiply+0xe4>
 800ca0c:	46c4      	mov	ip, r8
 800ca0e:	46a1      	mov	r9, r4
 800ca10:	2700      	movs	r7, #0
 800ca12:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca16:	f8d9 3000 	ldr.w	r3, [r9]
 800ca1a:	fa1f fb82 	uxth.w	fp, r2
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca24:	443b      	add	r3, r7
 800ca26:	f8d9 7000 	ldr.w	r7, [r9]
 800ca2a:	0c12      	lsrs	r2, r2, #16
 800ca2c:	0c3f      	lsrs	r7, r7, #16
 800ca2e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ca32:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca3c:	4565      	cmp	r5, ip
 800ca3e:	f849 3b04 	str.w	r3, [r9], #4
 800ca42:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ca46:	d8e4      	bhi.n	800ca12 <__multiply+0xaa>
 800ca48:	9b01      	ldr	r3, [sp, #4]
 800ca4a:	50e7      	str	r7, [r4, r3]
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca52:	3104      	adds	r1, #4
 800ca54:	f1b9 0f00 	cmp.w	r9, #0
 800ca58:	d020      	beq.n	800ca9c <__multiply+0x134>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	4647      	mov	r7, r8
 800ca5e:	46a4      	mov	ip, r4
 800ca60:	f04f 0a00 	mov.w	sl, #0
 800ca64:	f8b7 b000 	ldrh.w	fp, [r7]
 800ca68:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ca6c:	fb09 220b 	mla	r2, r9, fp, r2
 800ca70:	4452      	add	r2, sl
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca78:	f84c 3b04 	str.w	r3, [ip], #4
 800ca7c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ca80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca84:	f8bc 3000 	ldrh.w	r3, [ip]
 800ca88:	fb09 330a 	mla	r3, r9, sl, r3
 800ca8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ca90:	42bd      	cmp	r5, r7
 800ca92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca96:	d8e5      	bhi.n	800ca64 <__multiply+0xfc>
 800ca98:	9a01      	ldr	r2, [sp, #4]
 800ca9a:	50a3      	str	r3, [r4, r2]
 800ca9c:	3404      	adds	r4, #4
 800ca9e:	e79f      	b.n	800c9e0 <__multiply+0x78>
 800caa0:	3e01      	subs	r6, #1
 800caa2:	e7a1      	b.n	800c9e8 <__multiply+0x80>
 800caa4:	08021654 	.word	0x08021654
 800caa8:	08021665 	.word	0x08021665

0800caac <__pow5mult>:
 800caac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cab0:	4615      	mov	r5, r2
 800cab2:	f012 0203 	ands.w	r2, r2, #3
 800cab6:	4607      	mov	r7, r0
 800cab8:	460e      	mov	r6, r1
 800caba:	d007      	beq.n	800cacc <__pow5mult+0x20>
 800cabc:	4c25      	ldr	r4, [pc, #148]	@ (800cb54 <__pow5mult+0xa8>)
 800cabe:	3a01      	subs	r2, #1
 800cac0:	2300      	movs	r3, #0
 800cac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cac6:	f7ff fea7 	bl	800c818 <__multadd>
 800caca:	4606      	mov	r6, r0
 800cacc:	10ad      	asrs	r5, r5, #2
 800cace:	d03d      	beq.n	800cb4c <__pow5mult+0xa0>
 800cad0:	69fc      	ldr	r4, [r7, #28]
 800cad2:	b97c      	cbnz	r4, 800caf4 <__pow5mult+0x48>
 800cad4:	2010      	movs	r0, #16
 800cad6:	f7ff fd87 	bl	800c5e8 <malloc>
 800cada:	4602      	mov	r2, r0
 800cadc:	61f8      	str	r0, [r7, #28]
 800cade:	b928      	cbnz	r0, 800caec <__pow5mult+0x40>
 800cae0:	4b1d      	ldr	r3, [pc, #116]	@ (800cb58 <__pow5mult+0xac>)
 800cae2:	481e      	ldr	r0, [pc, #120]	@ (800cb5c <__pow5mult+0xb0>)
 800cae4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cae8:	f000 fbea 	bl	800d2c0 <__assert_func>
 800caec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800caf0:	6004      	str	r4, [r0, #0]
 800caf2:	60c4      	str	r4, [r0, #12]
 800caf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800caf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cafc:	b94c      	cbnz	r4, 800cb12 <__pow5mult+0x66>
 800cafe:	f240 2171 	movw	r1, #625	@ 0x271
 800cb02:	4638      	mov	r0, r7
 800cb04:	f7ff ff1a 	bl	800c93c <__i2b>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb0e:	4604      	mov	r4, r0
 800cb10:	6003      	str	r3, [r0, #0]
 800cb12:	f04f 0900 	mov.w	r9, #0
 800cb16:	07eb      	lsls	r3, r5, #31
 800cb18:	d50a      	bpl.n	800cb30 <__pow5mult+0x84>
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4622      	mov	r2, r4
 800cb1e:	4638      	mov	r0, r7
 800cb20:	f7ff ff22 	bl	800c968 <__multiply>
 800cb24:	4631      	mov	r1, r6
 800cb26:	4680      	mov	r8, r0
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f7ff fe53 	bl	800c7d4 <_Bfree>
 800cb2e:	4646      	mov	r6, r8
 800cb30:	106d      	asrs	r5, r5, #1
 800cb32:	d00b      	beq.n	800cb4c <__pow5mult+0xa0>
 800cb34:	6820      	ldr	r0, [r4, #0]
 800cb36:	b938      	cbnz	r0, 800cb48 <__pow5mult+0x9c>
 800cb38:	4622      	mov	r2, r4
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	f7ff ff13 	bl	800c968 <__multiply>
 800cb42:	6020      	str	r0, [r4, #0]
 800cb44:	f8c0 9000 	str.w	r9, [r0]
 800cb48:	4604      	mov	r4, r0
 800cb4a:	e7e4      	b.n	800cb16 <__pow5mult+0x6a>
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb52:	bf00      	nop
 800cb54:	08021718 	.word	0x08021718
 800cb58:	080215e5 	.word	0x080215e5
 800cb5c:	08021665 	.word	0x08021665

0800cb60 <__lshift>:
 800cb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb64:	460c      	mov	r4, r1
 800cb66:	6849      	ldr	r1, [r1, #4]
 800cb68:	6923      	ldr	r3, [r4, #16]
 800cb6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	4607      	mov	r7, r0
 800cb72:	4691      	mov	r9, r2
 800cb74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb78:	f108 0601 	add.w	r6, r8, #1
 800cb7c:	42b3      	cmp	r3, r6
 800cb7e:	db0b      	blt.n	800cb98 <__lshift+0x38>
 800cb80:	4638      	mov	r0, r7
 800cb82:	f7ff fde7 	bl	800c754 <_Balloc>
 800cb86:	4605      	mov	r5, r0
 800cb88:	b948      	cbnz	r0, 800cb9e <__lshift+0x3e>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	4b28      	ldr	r3, [pc, #160]	@ (800cc30 <__lshift+0xd0>)
 800cb8e:	4829      	ldr	r0, [pc, #164]	@ (800cc34 <__lshift+0xd4>)
 800cb90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cb94:	f000 fb94 	bl	800d2c0 <__assert_func>
 800cb98:	3101      	adds	r1, #1
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	e7ee      	b.n	800cb7c <__lshift+0x1c>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f100 0114 	add.w	r1, r0, #20
 800cba4:	f100 0210 	add.w	r2, r0, #16
 800cba8:	4618      	mov	r0, r3
 800cbaa:	4553      	cmp	r3, sl
 800cbac:	db33      	blt.n	800cc16 <__lshift+0xb6>
 800cbae:	6920      	ldr	r0, [r4, #16]
 800cbb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbb4:	f104 0314 	add.w	r3, r4, #20
 800cbb8:	f019 091f 	ands.w	r9, r9, #31
 800cbbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbc4:	d02b      	beq.n	800cc1e <__lshift+0xbe>
 800cbc6:	f1c9 0e20 	rsb	lr, r9, #32
 800cbca:	468a      	mov	sl, r1
 800cbcc:	2200      	movs	r2, #0
 800cbce:	6818      	ldr	r0, [r3, #0]
 800cbd0:	fa00 f009 	lsl.w	r0, r0, r9
 800cbd4:	4310      	orrs	r0, r2
 800cbd6:	f84a 0b04 	str.w	r0, [sl], #4
 800cbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbde:	459c      	cmp	ip, r3
 800cbe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbe4:	d8f3      	bhi.n	800cbce <__lshift+0x6e>
 800cbe6:	ebac 0304 	sub.w	r3, ip, r4
 800cbea:	3b15      	subs	r3, #21
 800cbec:	f023 0303 	bic.w	r3, r3, #3
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	f104 0015 	add.w	r0, r4, #21
 800cbf6:	4560      	cmp	r0, ip
 800cbf8:	bf88      	it	hi
 800cbfa:	2304      	movhi	r3, #4
 800cbfc:	50ca      	str	r2, [r1, r3]
 800cbfe:	b10a      	cbz	r2, 800cc04 <__lshift+0xa4>
 800cc00:	f108 0602 	add.w	r6, r8, #2
 800cc04:	3e01      	subs	r6, #1
 800cc06:	4638      	mov	r0, r7
 800cc08:	612e      	str	r6, [r5, #16]
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	f7ff fde2 	bl	800c7d4 <_Bfree>
 800cc10:	4628      	mov	r0, r5
 800cc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc16:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	e7c5      	b.n	800cbaa <__lshift+0x4a>
 800cc1e:	3904      	subs	r1, #4
 800cc20:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc24:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc28:	459c      	cmp	ip, r3
 800cc2a:	d8f9      	bhi.n	800cc20 <__lshift+0xc0>
 800cc2c:	e7ea      	b.n	800cc04 <__lshift+0xa4>
 800cc2e:	bf00      	nop
 800cc30:	08021654 	.word	0x08021654
 800cc34:	08021665 	.word	0x08021665

0800cc38 <__mcmp>:
 800cc38:	690a      	ldr	r2, [r1, #16]
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	6900      	ldr	r0, [r0, #16]
 800cc3e:	1a80      	subs	r0, r0, r2
 800cc40:	b530      	push	{r4, r5, lr}
 800cc42:	d10e      	bne.n	800cc62 <__mcmp+0x2a>
 800cc44:	3314      	adds	r3, #20
 800cc46:	3114      	adds	r1, #20
 800cc48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc58:	4295      	cmp	r5, r2
 800cc5a:	d003      	beq.n	800cc64 <__mcmp+0x2c>
 800cc5c:	d205      	bcs.n	800cc6a <__mcmp+0x32>
 800cc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc62:	bd30      	pop	{r4, r5, pc}
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	d3f3      	bcc.n	800cc50 <__mcmp+0x18>
 800cc68:	e7fb      	b.n	800cc62 <__mcmp+0x2a>
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	e7f9      	b.n	800cc62 <__mcmp+0x2a>
	...

0800cc70 <__mdiff>:
 800cc70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	4689      	mov	r9, r1
 800cc76:	4606      	mov	r6, r0
 800cc78:	4611      	mov	r1, r2
 800cc7a:	4648      	mov	r0, r9
 800cc7c:	4614      	mov	r4, r2
 800cc7e:	f7ff ffdb 	bl	800cc38 <__mcmp>
 800cc82:	1e05      	subs	r5, r0, #0
 800cc84:	d112      	bne.n	800ccac <__mdiff+0x3c>
 800cc86:	4629      	mov	r1, r5
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7ff fd63 	bl	800c754 <_Balloc>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	b928      	cbnz	r0, 800cc9e <__mdiff+0x2e>
 800cc92:	4b3f      	ldr	r3, [pc, #252]	@ (800cd90 <__mdiff+0x120>)
 800cc94:	f240 2137 	movw	r1, #567	@ 0x237
 800cc98:	483e      	ldr	r0, [pc, #248]	@ (800cd94 <__mdiff+0x124>)
 800cc9a:	f000 fb11 	bl	800d2c0 <__assert_func>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cca4:	4610      	mov	r0, r2
 800cca6:	b003      	add	sp, #12
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	bfbc      	itt	lt
 800ccae:	464b      	movlt	r3, r9
 800ccb0:	46a1      	movlt	r9, r4
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ccb8:	bfba      	itte	lt
 800ccba:	461c      	movlt	r4, r3
 800ccbc:	2501      	movlt	r5, #1
 800ccbe:	2500      	movge	r5, #0
 800ccc0:	f7ff fd48 	bl	800c754 <_Balloc>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	b918      	cbnz	r0, 800ccd0 <__mdiff+0x60>
 800ccc8:	4b31      	ldr	r3, [pc, #196]	@ (800cd90 <__mdiff+0x120>)
 800ccca:	f240 2145 	movw	r1, #581	@ 0x245
 800ccce:	e7e3      	b.n	800cc98 <__mdiff+0x28>
 800ccd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ccd4:	6926      	ldr	r6, [r4, #16]
 800ccd6:	60c5      	str	r5, [r0, #12]
 800ccd8:	f109 0310 	add.w	r3, r9, #16
 800ccdc:	f109 0514 	add.w	r5, r9, #20
 800cce0:	f104 0e14 	add.w	lr, r4, #20
 800cce4:	f100 0b14 	add.w	fp, r0, #20
 800cce8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ccec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ccf0:	9301      	str	r3, [sp, #4]
 800ccf2:	46d9      	mov	r9, fp
 800ccf4:	f04f 0c00 	mov.w	ip, #0
 800ccf8:	9b01      	ldr	r3, [sp, #4]
 800ccfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ccfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	fa1f f38a 	uxth.w	r3, sl
 800cd08:	4619      	mov	r1, r3
 800cd0a:	b283      	uxth	r3, r0
 800cd0c:	1acb      	subs	r3, r1, r3
 800cd0e:	0c00      	lsrs	r0, r0, #16
 800cd10:	4463      	add	r3, ip
 800cd12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd20:	4576      	cmp	r6, lr
 800cd22:	f849 3b04 	str.w	r3, [r9], #4
 800cd26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd2a:	d8e5      	bhi.n	800ccf8 <__mdiff+0x88>
 800cd2c:	1b33      	subs	r3, r6, r4
 800cd2e:	3b15      	subs	r3, #21
 800cd30:	f023 0303 	bic.w	r3, r3, #3
 800cd34:	3415      	adds	r4, #21
 800cd36:	3304      	adds	r3, #4
 800cd38:	42a6      	cmp	r6, r4
 800cd3a:	bf38      	it	cc
 800cd3c:	2304      	movcc	r3, #4
 800cd3e:	441d      	add	r5, r3
 800cd40:	445b      	add	r3, fp
 800cd42:	461e      	mov	r6, r3
 800cd44:	462c      	mov	r4, r5
 800cd46:	4544      	cmp	r4, r8
 800cd48:	d30e      	bcc.n	800cd68 <__mdiff+0xf8>
 800cd4a:	f108 0103 	add.w	r1, r8, #3
 800cd4e:	1b49      	subs	r1, r1, r5
 800cd50:	f021 0103 	bic.w	r1, r1, #3
 800cd54:	3d03      	subs	r5, #3
 800cd56:	45a8      	cmp	r8, r5
 800cd58:	bf38      	it	cc
 800cd5a:	2100      	movcc	r1, #0
 800cd5c:	440b      	add	r3, r1
 800cd5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd62:	b191      	cbz	r1, 800cd8a <__mdiff+0x11a>
 800cd64:	6117      	str	r7, [r2, #16]
 800cd66:	e79d      	b.n	800cca4 <__mdiff+0x34>
 800cd68:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd6c:	46e6      	mov	lr, ip
 800cd6e:	0c08      	lsrs	r0, r1, #16
 800cd70:	fa1c fc81 	uxtah	ip, ip, r1
 800cd74:	4471      	add	r1, lr
 800cd76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd7a:	b289      	uxth	r1, r1
 800cd7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd80:	f846 1b04 	str.w	r1, [r6], #4
 800cd84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd88:	e7dd      	b.n	800cd46 <__mdiff+0xd6>
 800cd8a:	3f01      	subs	r7, #1
 800cd8c:	e7e7      	b.n	800cd5e <__mdiff+0xee>
 800cd8e:	bf00      	nop
 800cd90:	08021654 	.word	0x08021654
 800cd94:	08021665 	.word	0x08021665

0800cd98 <__d2b>:
 800cd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	460f      	mov	r7, r1
 800cd9e:	2101      	movs	r1, #1
 800cda0:	ec59 8b10 	vmov	r8, r9, d0
 800cda4:	4616      	mov	r6, r2
 800cda6:	f7ff fcd5 	bl	800c754 <_Balloc>
 800cdaa:	4604      	mov	r4, r0
 800cdac:	b930      	cbnz	r0, 800cdbc <__d2b+0x24>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	4b23      	ldr	r3, [pc, #140]	@ (800ce40 <__d2b+0xa8>)
 800cdb2:	4824      	ldr	r0, [pc, #144]	@ (800ce44 <__d2b+0xac>)
 800cdb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800cdb8:	f000 fa82 	bl	800d2c0 <__assert_func>
 800cdbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdc4:	b10d      	cbz	r5, 800cdca <__d2b+0x32>
 800cdc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdca:	9301      	str	r3, [sp, #4]
 800cdcc:	f1b8 0300 	subs.w	r3, r8, #0
 800cdd0:	d023      	beq.n	800ce1a <__d2b+0x82>
 800cdd2:	4668      	mov	r0, sp
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	f7ff fd84 	bl	800c8e2 <__lo0bits>
 800cdda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdde:	b1d0      	cbz	r0, 800ce16 <__d2b+0x7e>
 800cde0:	f1c0 0320 	rsb	r3, r0, #32
 800cde4:	fa02 f303 	lsl.w	r3, r2, r3
 800cde8:	430b      	orrs	r3, r1
 800cdea:	40c2      	lsrs	r2, r0
 800cdec:	6163      	str	r3, [r4, #20]
 800cdee:	9201      	str	r2, [sp, #4]
 800cdf0:	9b01      	ldr	r3, [sp, #4]
 800cdf2:	61a3      	str	r3, [r4, #24]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bf0c      	ite	eq
 800cdf8:	2201      	moveq	r2, #1
 800cdfa:	2202      	movne	r2, #2
 800cdfc:	6122      	str	r2, [r4, #16]
 800cdfe:	b1a5      	cbz	r5, 800ce2a <__d2b+0x92>
 800ce00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce04:	4405      	add	r5, r0
 800ce06:	603d      	str	r5, [r7, #0]
 800ce08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce0c:	6030      	str	r0, [r6, #0]
 800ce0e:	4620      	mov	r0, r4
 800ce10:	b003      	add	sp, #12
 800ce12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce16:	6161      	str	r1, [r4, #20]
 800ce18:	e7ea      	b.n	800cdf0 <__d2b+0x58>
 800ce1a:	a801      	add	r0, sp, #4
 800ce1c:	f7ff fd61 	bl	800c8e2 <__lo0bits>
 800ce20:	9b01      	ldr	r3, [sp, #4]
 800ce22:	6163      	str	r3, [r4, #20]
 800ce24:	3020      	adds	r0, #32
 800ce26:	2201      	movs	r2, #1
 800ce28:	e7e8      	b.n	800cdfc <__d2b+0x64>
 800ce2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce32:	6038      	str	r0, [r7, #0]
 800ce34:	6918      	ldr	r0, [r3, #16]
 800ce36:	f7ff fd35 	bl	800c8a4 <__hi0bits>
 800ce3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce3e:	e7e5      	b.n	800ce0c <__d2b+0x74>
 800ce40:	08021654 	.word	0x08021654
 800ce44:	08021665 	.word	0x08021665

0800ce48 <__ssputs_r>:
 800ce48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce4c:	688e      	ldr	r6, [r1, #8]
 800ce4e:	461f      	mov	r7, r3
 800ce50:	42be      	cmp	r6, r7
 800ce52:	680b      	ldr	r3, [r1, #0]
 800ce54:	4682      	mov	sl, r0
 800ce56:	460c      	mov	r4, r1
 800ce58:	4690      	mov	r8, r2
 800ce5a:	d82d      	bhi.n	800ceb8 <__ssputs_r+0x70>
 800ce5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce64:	d026      	beq.n	800ceb4 <__ssputs_r+0x6c>
 800ce66:	6965      	ldr	r5, [r4, #20]
 800ce68:	6909      	ldr	r1, [r1, #16]
 800ce6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce6e:	eba3 0901 	sub.w	r9, r3, r1
 800ce72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce76:	1c7b      	adds	r3, r7, #1
 800ce78:	444b      	add	r3, r9
 800ce7a:	106d      	asrs	r5, r5, #1
 800ce7c:	429d      	cmp	r5, r3
 800ce7e:	bf38      	it	cc
 800ce80:	461d      	movcc	r5, r3
 800ce82:	0553      	lsls	r3, r2, #21
 800ce84:	d527      	bpl.n	800ced6 <__ssputs_r+0x8e>
 800ce86:	4629      	mov	r1, r5
 800ce88:	f7ff fbd8 	bl	800c63c <_malloc_r>
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	b360      	cbz	r0, 800ceea <__ssputs_r+0xa2>
 800ce90:	6921      	ldr	r1, [r4, #16]
 800ce92:	464a      	mov	r2, r9
 800ce94:	f000 fa06 	bl	800d2a4 <memcpy>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cea2:	81a3      	strh	r3, [r4, #12]
 800cea4:	6126      	str	r6, [r4, #16]
 800cea6:	6165      	str	r5, [r4, #20]
 800cea8:	444e      	add	r6, r9
 800ceaa:	eba5 0509 	sub.w	r5, r5, r9
 800ceae:	6026      	str	r6, [r4, #0]
 800ceb0:	60a5      	str	r5, [r4, #8]
 800ceb2:	463e      	mov	r6, r7
 800ceb4:	42be      	cmp	r6, r7
 800ceb6:	d900      	bls.n	800ceba <__ssputs_r+0x72>
 800ceb8:	463e      	mov	r6, r7
 800ceba:	6820      	ldr	r0, [r4, #0]
 800cebc:	4632      	mov	r2, r6
 800cebe:	4641      	mov	r1, r8
 800cec0:	f000 f9c6 	bl	800d250 <memmove>
 800cec4:	68a3      	ldr	r3, [r4, #8]
 800cec6:	1b9b      	subs	r3, r3, r6
 800cec8:	60a3      	str	r3, [r4, #8]
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	4433      	add	r3, r6
 800cece:	6023      	str	r3, [r4, #0]
 800ced0:	2000      	movs	r0, #0
 800ced2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced6:	462a      	mov	r2, r5
 800ced8:	f000 fa36 	bl	800d348 <_realloc_r>
 800cedc:	4606      	mov	r6, r0
 800cede:	2800      	cmp	r0, #0
 800cee0:	d1e0      	bne.n	800cea4 <__ssputs_r+0x5c>
 800cee2:	6921      	ldr	r1, [r4, #16]
 800cee4:	4650      	mov	r0, sl
 800cee6:	f7ff fb35 	bl	800c554 <_free_r>
 800ceea:	230c      	movs	r3, #12
 800ceec:	f8ca 3000 	str.w	r3, [sl]
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	f04f 30ff 	mov.w	r0, #4294967295
 800cefc:	e7e9      	b.n	800ced2 <__ssputs_r+0x8a>
	...

0800cf00 <_svfiprintf_r>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	4698      	mov	r8, r3
 800cf06:	898b      	ldrh	r3, [r1, #12]
 800cf08:	061b      	lsls	r3, r3, #24
 800cf0a:	b09d      	sub	sp, #116	@ 0x74
 800cf0c:	4607      	mov	r7, r0
 800cf0e:	460d      	mov	r5, r1
 800cf10:	4614      	mov	r4, r2
 800cf12:	d510      	bpl.n	800cf36 <_svfiprintf_r+0x36>
 800cf14:	690b      	ldr	r3, [r1, #16]
 800cf16:	b973      	cbnz	r3, 800cf36 <_svfiprintf_r+0x36>
 800cf18:	2140      	movs	r1, #64	@ 0x40
 800cf1a:	f7ff fb8f 	bl	800c63c <_malloc_r>
 800cf1e:	6028      	str	r0, [r5, #0]
 800cf20:	6128      	str	r0, [r5, #16]
 800cf22:	b930      	cbnz	r0, 800cf32 <_svfiprintf_r+0x32>
 800cf24:	230c      	movs	r3, #12
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2c:	b01d      	add	sp, #116	@ 0x74
 800cf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf32:	2340      	movs	r3, #64	@ 0x40
 800cf34:	616b      	str	r3, [r5, #20]
 800cf36:	2300      	movs	r3, #0
 800cf38:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf3a:	2320      	movs	r3, #32
 800cf3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf40:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf44:	2330      	movs	r3, #48	@ 0x30
 800cf46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0e4 <_svfiprintf_r+0x1e4>
 800cf4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf4e:	f04f 0901 	mov.w	r9, #1
 800cf52:	4623      	mov	r3, r4
 800cf54:	469a      	mov	sl, r3
 800cf56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf5a:	b10a      	cbz	r2, 800cf60 <_svfiprintf_r+0x60>
 800cf5c:	2a25      	cmp	r2, #37	@ 0x25
 800cf5e:	d1f9      	bne.n	800cf54 <_svfiprintf_r+0x54>
 800cf60:	ebba 0b04 	subs.w	fp, sl, r4
 800cf64:	d00b      	beq.n	800cf7e <_svfiprintf_r+0x7e>
 800cf66:	465b      	mov	r3, fp
 800cf68:	4622      	mov	r2, r4
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f7ff ff6b 	bl	800ce48 <__ssputs_r>
 800cf72:	3001      	adds	r0, #1
 800cf74:	f000 80a7 	beq.w	800d0c6 <_svfiprintf_r+0x1c6>
 800cf78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf7a:	445a      	add	r2, fp
 800cf7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 809f 	beq.w	800d0c6 <_svfiprintf_r+0x1c6>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf92:	f10a 0a01 	add.w	sl, sl, #1
 800cf96:	9304      	str	r3, [sp, #16]
 800cf98:	9307      	str	r3, [sp, #28]
 800cf9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfa0:	4654      	mov	r4, sl
 800cfa2:	2205      	movs	r2, #5
 800cfa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa8:	484e      	ldr	r0, [pc, #312]	@ (800d0e4 <_svfiprintf_r+0x1e4>)
 800cfaa:	f7f3 f9f9 	bl	80003a0 <memchr>
 800cfae:	9a04      	ldr	r2, [sp, #16]
 800cfb0:	b9d8      	cbnz	r0, 800cfea <_svfiprintf_r+0xea>
 800cfb2:	06d0      	lsls	r0, r2, #27
 800cfb4:	bf44      	itt	mi
 800cfb6:	2320      	movmi	r3, #32
 800cfb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfbc:	0711      	lsls	r1, r2, #28
 800cfbe:	bf44      	itt	mi
 800cfc0:	232b      	movmi	r3, #43	@ 0x2b
 800cfc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfca:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfcc:	d015      	beq.n	800cffa <_svfiprintf_r+0xfa>
 800cfce:	9a07      	ldr	r2, [sp, #28]
 800cfd0:	4654      	mov	r4, sl
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	f04f 0c0a 	mov.w	ip, #10
 800cfd8:	4621      	mov	r1, r4
 800cfda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfde:	3b30      	subs	r3, #48	@ 0x30
 800cfe0:	2b09      	cmp	r3, #9
 800cfe2:	d94b      	bls.n	800d07c <_svfiprintf_r+0x17c>
 800cfe4:	b1b0      	cbz	r0, 800d014 <_svfiprintf_r+0x114>
 800cfe6:	9207      	str	r2, [sp, #28]
 800cfe8:	e014      	b.n	800d014 <_svfiprintf_r+0x114>
 800cfea:	eba0 0308 	sub.w	r3, r0, r8
 800cfee:	fa09 f303 	lsl.w	r3, r9, r3
 800cff2:	4313      	orrs	r3, r2
 800cff4:	9304      	str	r3, [sp, #16]
 800cff6:	46a2      	mov	sl, r4
 800cff8:	e7d2      	b.n	800cfa0 <_svfiprintf_r+0xa0>
 800cffa:	9b03      	ldr	r3, [sp, #12]
 800cffc:	1d19      	adds	r1, r3, #4
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	9103      	str	r1, [sp, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	bfbb      	ittet	lt
 800d006:	425b      	neglt	r3, r3
 800d008:	f042 0202 	orrlt.w	r2, r2, #2
 800d00c:	9307      	strge	r3, [sp, #28]
 800d00e:	9307      	strlt	r3, [sp, #28]
 800d010:	bfb8      	it	lt
 800d012:	9204      	strlt	r2, [sp, #16]
 800d014:	7823      	ldrb	r3, [r4, #0]
 800d016:	2b2e      	cmp	r3, #46	@ 0x2e
 800d018:	d10a      	bne.n	800d030 <_svfiprintf_r+0x130>
 800d01a:	7863      	ldrb	r3, [r4, #1]
 800d01c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d01e:	d132      	bne.n	800d086 <_svfiprintf_r+0x186>
 800d020:	9b03      	ldr	r3, [sp, #12]
 800d022:	1d1a      	adds	r2, r3, #4
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	9203      	str	r2, [sp, #12]
 800d028:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d02c:	3402      	adds	r4, #2
 800d02e:	9305      	str	r3, [sp, #20]
 800d030:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0f4 <_svfiprintf_r+0x1f4>
 800d034:	7821      	ldrb	r1, [r4, #0]
 800d036:	2203      	movs	r2, #3
 800d038:	4650      	mov	r0, sl
 800d03a:	f7f3 f9b1 	bl	80003a0 <memchr>
 800d03e:	b138      	cbz	r0, 800d050 <_svfiprintf_r+0x150>
 800d040:	9b04      	ldr	r3, [sp, #16]
 800d042:	eba0 000a 	sub.w	r0, r0, sl
 800d046:	2240      	movs	r2, #64	@ 0x40
 800d048:	4082      	lsls	r2, r0
 800d04a:	4313      	orrs	r3, r2
 800d04c:	3401      	adds	r4, #1
 800d04e:	9304      	str	r3, [sp, #16]
 800d050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d054:	4824      	ldr	r0, [pc, #144]	@ (800d0e8 <_svfiprintf_r+0x1e8>)
 800d056:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d05a:	2206      	movs	r2, #6
 800d05c:	f7f3 f9a0 	bl	80003a0 <memchr>
 800d060:	2800      	cmp	r0, #0
 800d062:	d036      	beq.n	800d0d2 <_svfiprintf_r+0x1d2>
 800d064:	4b21      	ldr	r3, [pc, #132]	@ (800d0ec <_svfiprintf_r+0x1ec>)
 800d066:	bb1b      	cbnz	r3, 800d0b0 <_svfiprintf_r+0x1b0>
 800d068:	9b03      	ldr	r3, [sp, #12]
 800d06a:	3307      	adds	r3, #7
 800d06c:	f023 0307 	bic.w	r3, r3, #7
 800d070:	3308      	adds	r3, #8
 800d072:	9303      	str	r3, [sp, #12]
 800d074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d076:	4433      	add	r3, r6
 800d078:	9309      	str	r3, [sp, #36]	@ 0x24
 800d07a:	e76a      	b.n	800cf52 <_svfiprintf_r+0x52>
 800d07c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d080:	460c      	mov	r4, r1
 800d082:	2001      	movs	r0, #1
 800d084:	e7a8      	b.n	800cfd8 <_svfiprintf_r+0xd8>
 800d086:	2300      	movs	r3, #0
 800d088:	3401      	adds	r4, #1
 800d08a:	9305      	str	r3, [sp, #20]
 800d08c:	4619      	mov	r1, r3
 800d08e:	f04f 0c0a 	mov.w	ip, #10
 800d092:	4620      	mov	r0, r4
 800d094:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d098:	3a30      	subs	r2, #48	@ 0x30
 800d09a:	2a09      	cmp	r2, #9
 800d09c:	d903      	bls.n	800d0a6 <_svfiprintf_r+0x1a6>
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d0c6      	beq.n	800d030 <_svfiprintf_r+0x130>
 800d0a2:	9105      	str	r1, [sp, #20]
 800d0a4:	e7c4      	b.n	800d030 <_svfiprintf_r+0x130>
 800d0a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e7f0      	b.n	800d092 <_svfiprintf_r+0x192>
 800d0b0:	ab03      	add	r3, sp, #12
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	462a      	mov	r2, r5
 800d0b6:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f0 <_svfiprintf_r+0x1f0>)
 800d0b8:	a904      	add	r1, sp, #16
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	f7fd ff00 	bl	800aec0 <_printf_float>
 800d0c0:	1c42      	adds	r2, r0, #1
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	d1d6      	bne.n	800d074 <_svfiprintf_r+0x174>
 800d0c6:	89ab      	ldrh	r3, [r5, #12]
 800d0c8:	065b      	lsls	r3, r3, #25
 800d0ca:	f53f af2d 	bmi.w	800cf28 <_svfiprintf_r+0x28>
 800d0ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0d0:	e72c      	b.n	800cf2c <_svfiprintf_r+0x2c>
 800d0d2:	ab03      	add	r3, sp, #12
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	462a      	mov	r2, r5
 800d0d8:	4b05      	ldr	r3, [pc, #20]	@ (800d0f0 <_svfiprintf_r+0x1f0>)
 800d0da:	a904      	add	r1, sp, #16
 800d0dc:	4638      	mov	r0, r7
 800d0de:	f7fe f977 	bl	800b3d0 <_printf_i>
 800d0e2:	e7ed      	b.n	800d0c0 <_svfiprintf_r+0x1c0>
 800d0e4:	080216be 	.word	0x080216be
 800d0e8:	080216c8 	.word	0x080216c8
 800d0ec:	0800aec1 	.word	0x0800aec1
 800d0f0:	0800ce49 	.word	0x0800ce49
 800d0f4:	080216c4 	.word	0x080216c4

0800d0f8 <__sflush_r>:
 800d0f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d100:	0716      	lsls	r6, r2, #28
 800d102:	4605      	mov	r5, r0
 800d104:	460c      	mov	r4, r1
 800d106:	d454      	bmi.n	800d1b2 <__sflush_r+0xba>
 800d108:	684b      	ldr	r3, [r1, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	dc02      	bgt.n	800d114 <__sflush_r+0x1c>
 800d10e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d110:	2b00      	cmp	r3, #0
 800d112:	dd48      	ble.n	800d1a6 <__sflush_r+0xae>
 800d114:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d116:	2e00      	cmp	r6, #0
 800d118:	d045      	beq.n	800d1a6 <__sflush_r+0xae>
 800d11a:	2300      	movs	r3, #0
 800d11c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d120:	682f      	ldr	r7, [r5, #0]
 800d122:	6a21      	ldr	r1, [r4, #32]
 800d124:	602b      	str	r3, [r5, #0]
 800d126:	d030      	beq.n	800d18a <__sflush_r+0x92>
 800d128:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	0759      	lsls	r1, r3, #29
 800d12e:	d505      	bpl.n	800d13c <__sflush_r+0x44>
 800d130:	6863      	ldr	r3, [r4, #4]
 800d132:	1ad2      	subs	r2, r2, r3
 800d134:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d136:	b10b      	cbz	r3, 800d13c <__sflush_r+0x44>
 800d138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d13a:	1ad2      	subs	r2, r2, r3
 800d13c:	2300      	movs	r3, #0
 800d13e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d140:	6a21      	ldr	r1, [r4, #32]
 800d142:	4628      	mov	r0, r5
 800d144:	47b0      	blx	r6
 800d146:	1c43      	adds	r3, r0, #1
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	d106      	bne.n	800d15a <__sflush_r+0x62>
 800d14c:	6829      	ldr	r1, [r5, #0]
 800d14e:	291d      	cmp	r1, #29
 800d150:	d82b      	bhi.n	800d1aa <__sflush_r+0xb2>
 800d152:	4a2a      	ldr	r2, [pc, #168]	@ (800d1fc <__sflush_r+0x104>)
 800d154:	40ca      	lsrs	r2, r1
 800d156:	07d6      	lsls	r6, r2, #31
 800d158:	d527      	bpl.n	800d1aa <__sflush_r+0xb2>
 800d15a:	2200      	movs	r2, #0
 800d15c:	6062      	str	r2, [r4, #4]
 800d15e:	04d9      	lsls	r1, r3, #19
 800d160:	6922      	ldr	r2, [r4, #16]
 800d162:	6022      	str	r2, [r4, #0]
 800d164:	d504      	bpl.n	800d170 <__sflush_r+0x78>
 800d166:	1c42      	adds	r2, r0, #1
 800d168:	d101      	bne.n	800d16e <__sflush_r+0x76>
 800d16a:	682b      	ldr	r3, [r5, #0]
 800d16c:	b903      	cbnz	r3, 800d170 <__sflush_r+0x78>
 800d16e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d172:	602f      	str	r7, [r5, #0]
 800d174:	b1b9      	cbz	r1, 800d1a6 <__sflush_r+0xae>
 800d176:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d17a:	4299      	cmp	r1, r3
 800d17c:	d002      	beq.n	800d184 <__sflush_r+0x8c>
 800d17e:	4628      	mov	r0, r5
 800d180:	f7ff f9e8 	bl	800c554 <_free_r>
 800d184:	2300      	movs	r3, #0
 800d186:	6363      	str	r3, [r4, #52]	@ 0x34
 800d188:	e00d      	b.n	800d1a6 <__sflush_r+0xae>
 800d18a:	2301      	movs	r3, #1
 800d18c:	4628      	mov	r0, r5
 800d18e:	47b0      	blx	r6
 800d190:	4602      	mov	r2, r0
 800d192:	1c50      	adds	r0, r2, #1
 800d194:	d1c9      	bne.n	800d12a <__sflush_r+0x32>
 800d196:	682b      	ldr	r3, [r5, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d0c6      	beq.n	800d12a <__sflush_r+0x32>
 800d19c:	2b1d      	cmp	r3, #29
 800d19e:	d001      	beq.n	800d1a4 <__sflush_r+0xac>
 800d1a0:	2b16      	cmp	r3, #22
 800d1a2:	d11e      	bne.n	800d1e2 <__sflush_r+0xea>
 800d1a4:	602f      	str	r7, [r5, #0]
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e022      	b.n	800d1f0 <__sflush_r+0xf8>
 800d1aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1ae:	b21b      	sxth	r3, r3
 800d1b0:	e01b      	b.n	800d1ea <__sflush_r+0xf2>
 800d1b2:	690f      	ldr	r7, [r1, #16]
 800d1b4:	2f00      	cmp	r7, #0
 800d1b6:	d0f6      	beq.n	800d1a6 <__sflush_r+0xae>
 800d1b8:	0793      	lsls	r3, r2, #30
 800d1ba:	680e      	ldr	r6, [r1, #0]
 800d1bc:	bf08      	it	eq
 800d1be:	694b      	ldreq	r3, [r1, #20]
 800d1c0:	600f      	str	r7, [r1, #0]
 800d1c2:	bf18      	it	ne
 800d1c4:	2300      	movne	r3, #0
 800d1c6:	eba6 0807 	sub.w	r8, r6, r7
 800d1ca:	608b      	str	r3, [r1, #8]
 800d1cc:	f1b8 0f00 	cmp.w	r8, #0
 800d1d0:	dde9      	ble.n	800d1a6 <__sflush_r+0xae>
 800d1d2:	6a21      	ldr	r1, [r4, #32]
 800d1d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d1d6:	4643      	mov	r3, r8
 800d1d8:	463a      	mov	r2, r7
 800d1da:	4628      	mov	r0, r5
 800d1dc:	47b0      	blx	r6
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	dc08      	bgt.n	800d1f4 <__sflush_r+0xfc>
 800d1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f4:	4407      	add	r7, r0
 800d1f6:	eba8 0800 	sub.w	r8, r8, r0
 800d1fa:	e7e7      	b.n	800d1cc <__sflush_r+0xd4>
 800d1fc:	20400001 	.word	0x20400001

0800d200 <_fflush_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	690b      	ldr	r3, [r1, #16]
 800d204:	4605      	mov	r5, r0
 800d206:	460c      	mov	r4, r1
 800d208:	b913      	cbnz	r3, 800d210 <_fflush_r+0x10>
 800d20a:	2500      	movs	r5, #0
 800d20c:	4628      	mov	r0, r5
 800d20e:	bd38      	pop	{r3, r4, r5, pc}
 800d210:	b118      	cbz	r0, 800d21a <_fflush_r+0x1a>
 800d212:	6a03      	ldr	r3, [r0, #32]
 800d214:	b90b      	cbnz	r3, 800d21a <_fflush_r+0x1a>
 800d216:	f7fe fa85 	bl	800b724 <__sinit>
 800d21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0f3      	beq.n	800d20a <_fflush_r+0xa>
 800d222:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d224:	07d0      	lsls	r0, r2, #31
 800d226:	d404      	bmi.n	800d232 <_fflush_r+0x32>
 800d228:	0599      	lsls	r1, r3, #22
 800d22a:	d402      	bmi.n	800d232 <_fflush_r+0x32>
 800d22c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d22e:	f7fe fba6 	bl	800b97e <__retarget_lock_acquire_recursive>
 800d232:	4628      	mov	r0, r5
 800d234:	4621      	mov	r1, r4
 800d236:	f7ff ff5f 	bl	800d0f8 <__sflush_r>
 800d23a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d23c:	07da      	lsls	r2, r3, #31
 800d23e:	4605      	mov	r5, r0
 800d240:	d4e4      	bmi.n	800d20c <_fflush_r+0xc>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	059b      	lsls	r3, r3, #22
 800d246:	d4e1      	bmi.n	800d20c <_fflush_r+0xc>
 800d248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d24a:	f7fe fb99 	bl	800b980 <__retarget_lock_release_recursive>
 800d24e:	e7dd      	b.n	800d20c <_fflush_r+0xc>

0800d250 <memmove>:
 800d250:	4288      	cmp	r0, r1
 800d252:	b510      	push	{r4, lr}
 800d254:	eb01 0402 	add.w	r4, r1, r2
 800d258:	d902      	bls.n	800d260 <memmove+0x10>
 800d25a:	4284      	cmp	r4, r0
 800d25c:	4623      	mov	r3, r4
 800d25e:	d807      	bhi.n	800d270 <memmove+0x20>
 800d260:	1e43      	subs	r3, r0, #1
 800d262:	42a1      	cmp	r1, r4
 800d264:	d008      	beq.n	800d278 <memmove+0x28>
 800d266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d26a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d26e:	e7f8      	b.n	800d262 <memmove+0x12>
 800d270:	4402      	add	r2, r0
 800d272:	4601      	mov	r1, r0
 800d274:	428a      	cmp	r2, r1
 800d276:	d100      	bne.n	800d27a <memmove+0x2a>
 800d278:	bd10      	pop	{r4, pc}
 800d27a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d27e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d282:	e7f7      	b.n	800d274 <memmove+0x24>

0800d284 <_sbrk_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	4d06      	ldr	r5, [pc, #24]	@ (800d2a0 <_sbrk_r+0x1c>)
 800d288:	2300      	movs	r3, #0
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	602b      	str	r3, [r5, #0]
 800d290:	f7f5 f8fc 	bl	800248c <_sbrk>
 800d294:	1c43      	adds	r3, r0, #1
 800d296:	d102      	bne.n	800d29e <_sbrk_r+0x1a>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	b103      	cbz	r3, 800d29e <_sbrk_r+0x1a>
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	24003e60 	.word	0x24003e60

0800d2a4 <memcpy>:
 800d2a4:	440a      	add	r2, r1
 800d2a6:	4291      	cmp	r1, r2
 800d2a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2ac:	d100      	bne.n	800d2b0 <memcpy+0xc>
 800d2ae:	4770      	bx	lr
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	d1f9      	bne.n	800d2b2 <memcpy+0xe>
 800d2be:	bd10      	pop	{r4, pc}

0800d2c0 <__assert_func>:
 800d2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2c2:	4614      	mov	r4, r2
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	4b09      	ldr	r3, [pc, #36]	@ (800d2ec <__assert_func+0x2c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4605      	mov	r5, r0
 800d2cc:	68d8      	ldr	r0, [r3, #12]
 800d2ce:	b14c      	cbz	r4, 800d2e4 <__assert_func+0x24>
 800d2d0:	4b07      	ldr	r3, [pc, #28]	@ (800d2f0 <__assert_func+0x30>)
 800d2d2:	9100      	str	r1, [sp, #0]
 800d2d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2d8:	4906      	ldr	r1, [pc, #24]	@ (800d2f4 <__assert_func+0x34>)
 800d2da:	462b      	mov	r3, r5
 800d2dc:	f000 f870 	bl	800d3c0 <fiprintf>
 800d2e0:	f000 f880 	bl	800d3e4 <abort>
 800d2e4:	4b04      	ldr	r3, [pc, #16]	@ (800d2f8 <__assert_func+0x38>)
 800d2e6:	461c      	mov	r4, r3
 800d2e8:	e7f3      	b.n	800d2d2 <__assert_func+0x12>
 800d2ea:	bf00      	nop
 800d2ec:	24000058 	.word	0x24000058
 800d2f0:	080216d9 	.word	0x080216d9
 800d2f4:	080216e6 	.word	0x080216e6
 800d2f8:	08021714 	.word	0x08021714

0800d2fc <_calloc_r>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	fba1 5402 	umull	r5, r4, r1, r2
 800d302:	b934      	cbnz	r4, 800d312 <_calloc_r+0x16>
 800d304:	4629      	mov	r1, r5
 800d306:	f7ff f999 	bl	800c63c <_malloc_r>
 800d30a:	4606      	mov	r6, r0
 800d30c:	b928      	cbnz	r0, 800d31a <_calloc_r+0x1e>
 800d30e:	4630      	mov	r0, r6
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	220c      	movs	r2, #12
 800d314:	6002      	str	r2, [r0, #0]
 800d316:	2600      	movs	r6, #0
 800d318:	e7f9      	b.n	800d30e <_calloc_r+0x12>
 800d31a:	462a      	mov	r2, r5
 800d31c:	4621      	mov	r1, r4
 800d31e:	f7fe fab0 	bl	800b882 <memset>
 800d322:	e7f4      	b.n	800d30e <_calloc_r+0x12>

0800d324 <__ascii_mbtowc>:
 800d324:	b082      	sub	sp, #8
 800d326:	b901      	cbnz	r1, 800d32a <__ascii_mbtowc+0x6>
 800d328:	a901      	add	r1, sp, #4
 800d32a:	b142      	cbz	r2, 800d33e <__ascii_mbtowc+0x1a>
 800d32c:	b14b      	cbz	r3, 800d342 <__ascii_mbtowc+0x1e>
 800d32e:	7813      	ldrb	r3, [r2, #0]
 800d330:	600b      	str	r3, [r1, #0]
 800d332:	7812      	ldrb	r2, [r2, #0]
 800d334:	1e10      	subs	r0, r2, #0
 800d336:	bf18      	it	ne
 800d338:	2001      	movne	r0, #1
 800d33a:	b002      	add	sp, #8
 800d33c:	4770      	bx	lr
 800d33e:	4610      	mov	r0, r2
 800d340:	e7fb      	b.n	800d33a <__ascii_mbtowc+0x16>
 800d342:	f06f 0001 	mvn.w	r0, #1
 800d346:	e7f8      	b.n	800d33a <__ascii_mbtowc+0x16>

0800d348 <_realloc_r>:
 800d348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d34c:	4607      	mov	r7, r0
 800d34e:	4614      	mov	r4, r2
 800d350:	460d      	mov	r5, r1
 800d352:	b921      	cbnz	r1, 800d35e <_realloc_r+0x16>
 800d354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d358:	4611      	mov	r1, r2
 800d35a:	f7ff b96f 	b.w	800c63c <_malloc_r>
 800d35e:	b92a      	cbnz	r2, 800d36c <_realloc_r+0x24>
 800d360:	f7ff f8f8 	bl	800c554 <_free_r>
 800d364:	4625      	mov	r5, r4
 800d366:	4628      	mov	r0, r5
 800d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d36c:	f000 f841 	bl	800d3f2 <_malloc_usable_size_r>
 800d370:	4284      	cmp	r4, r0
 800d372:	4606      	mov	r6, r0
 800d374:	d802      	bhi.n	800d37c <_realloc_r+0x34>
 800d376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d37a:	d8f4      	bhi.n	800d366 <_realloc_r+0x1e>
 800d37c:	4621      	mov	r1, r4
 800d37e:	4638      	mov	r0, r7
 800d380:	f7ff f95c 	bl	800c63c <_malloc_r>
 800d384:	4680      	mov	r8, r0
 800d386:	b908      	cbnz	r0, 800d38c <_realloc_r+0x44>
 800d388:	4645      	mov	r5, r8
 800d38a:	e7ec      	b.n	800d366 <_realloc_r+0x1e>
 800d38c:	42b4      	cmp	r4, r6
 800d38e:	4622      	mov	r2, r4
 800d390:	4629      	mov	r1, r5
 800d392:	bf28      	it	cs
 800d394:	4632      	movcs	r2, r6
 800d396:	f7ff ff85 	bl	800d2a4 <memcpy>
 800d39a:	4629      	mov	r1, r5
 800d39c:	4638      	mov	r0, r7
 800d39e:	f7ff f8d9 	bl	800c554 <_free_r>
 800d3a2:	e7f1      	b.n	800d388 <_realloc_r+0x40>

0800d3a4 <__ascii_wctomb>:
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	b141      	cbz	r1, 800d3bc <__ascii_wctomb+0x18>
 800d3aa:	2aff      	cmp	r2, #255	@ 0xff
 800d3ac:	d904      	bls.n	800d3b8 <__ascii_wctomb+0x14>
 800d3ae:	228a      	movs	r2, #138	@ 0x8a
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b6:	4770      	bx	lr
 800d3b8:	700a      	strb	r2, [r1, #0]
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	4770      	bx	lr
	...

0800d3c0 <fiprintf>:
 800d3c0:	b40e      	push	{r1, r2, r3}
 800d3c2:	b503      	push	{r0, r1, lr}
 800d3c4:	4601      	mov	r1, r0
 800d3c6:	ab03      	add	r3, sp, #12
 800d3c8:	4805      	ldr	r0, [pc, #20]	@ (800d3e0 <fiprintf+0x20>)
 800d3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ce:	6800      	ldr	r0, [r0, #0]
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	f000 f83f 	bl	800d454 <_vfiprintf_r>
 800d3d6:	b002      	add	sp, #8
 800d3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3dc:	b003      	add	sp, #12
 800d3de:	4770      	bx	lr
 800d3e0:	24000058 	.word	0x24000058

0800d3e4 <abort>:
 800d3e4:	b508      	push	{r3, lr}
 800d3e6:	2006      	movs	r0, #6
 800d3e8:	f000 fa08 	bl	800d7fc <raise>
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	f7f4 ffd5 	bl	800239c <_exit>

0800d3f2 <_malloc_usable_size_r>:
 800d3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3f6:	1f18      	subs	r0, r3, #4
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	bfbc      	itt	lt
 800d3fc:	580b      	ldrlt	r3, [r1, r0]
 800d3fe:	18c0      	addlt	r0, r0, r3
 800d400:	4770      	bx	lr

0800d402 <__sfputc_r>:
 800d402:	6893      	ldr	r3, [r2, #8]
 800d404:	3b01      	subs	r3, #1
 800d406:	2b00      	cmp	r3, #0
 800d408:	b410      	push	{r4}
 800d40a:	6093      	str	r3, [r2, #8]
 800d40c:	da08      	bge.n	800d420 <__sfputc_r+0x1e>
 800d40e:	6994      	ldr	r4, [r2, #24]
 800d410:	42a3      	cmp	r3, r4
 800d412:	db01      	blt.n	800d418 <__sfputc_r+0x16>
 800d414:	290a      	cmp	r1, #10
 800d416:	d103      	bne.n	800d420 <__sfputc_r+0x1e>
 800d418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d41c:	f000 b932 	b.w	800d684 <__swbuf_r>
 800d420:	6813      	ldr	r3, [r2, #0]
 800d422:	1c58      	adds	r0, r3, #1
 800d424:	6010      	str	r0, [r2, #0]
 800d426:	7019      	strb	r1, [r3, #0]
 800d428:	4608      	mov	r0, r1
 800d42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <__sfputs_r>:
 800d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d432:	4606      	mov	r6, r0
 800d434:	460f      	mov	r7, r1
 800d436:	4614      	mov	r4, r2
 800d438:	18d5      	adds	r5, r2, r3
 800d43a:	42ac      	cmp	r4, r5
 800d43c:	d101      	bne.n	800d442 <__sfputs_r+0x12>
 800d43e:	2000      	movs	r0, #0
 800d440:	e007      	b.n	800d452 <__sfputs_r+0x22>
 800d442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d446:	463a      	mov	r2, r7
 800d448:	4630      	mov	r0, r6
 800d44a:	f7ff ffda 	bl	800d402 <__sfputc_r>
 800d44e:	1c43      	adds	r3, r0, #1
 800d450:	d1f3      	bne.n	800d43a <__sfputs_r+0xa>
 800d452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d454 <_vfiprintf_r>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	460d      	mov	r5, r1
 800d45a:	b09d      	sub	sp, #116	@ 0x74
 800d45c:	4614      	mov	r4, r2
 800d45e:	4698      	mov	r8, r3
 800d460:	4606      	mov	r6, r0
 800d462:	b118      	cbz	r0, 800d46c <_vfiprintf_r+0x18>
 800d464:	6a03      	ldr	r3, [r0, #32]
 800d466:	b90b      	cbnz	r3, 800d46c <_vfiprintf_r+0x18>
 800d468:	f7fe f95c 	bl	800b724 <__sinit>
 800d46c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d46e:	07d9      	lsls	r1, r3, #31
 800d470:	d405      	bmi.n	800d47e <_vfiprintf_r+0x2a>
 800d472:	89ab      	ldrh	r3, [r5, #12]
 800d474:	059a      	lsls	r2, r3, #22
 800d476:	d402      	bmi.n	800d47e <_vfiprintf_r+0x2a>
 800d478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d47a:	f7fe fa80 	bl	800b97e <__retarget_lock_acquire_recursive>
 800d47e:	89ab      	ldrh	r3, [r5, #12]
 800d480:	071b      	lsls	r3, r3, #28
 800d482:	d501      	bpl.n	800d488 <_vfiprintf_r+0x34>
 800d484:	692b      	ldr	r3, [r5, #16]
 800d486:	b99b      	cbnz	r3, 800d4b0 <_vfiprintf_r+0x5c>
 800d488:	4629      	mov	r1, r5
 800d48a:	4630      	mov	r0, r6
 800d48c:	f000 f938 	bl	800d700 <__swsetup_r>
 800d490:	b170      	cbz	r0, 800d4b0 <_vfiprintf_r+0x5c>
 800d492:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d494:	07dc      	lsls	r4, r3, #31
 800d496:	d504      	bpl.n	800d4a2 <_vfiprintf_r+0x4e>
 800d498:	f04f 30ff 	mov.w	r0, #4294967295
 800d49c:	b01d      	add	sp, #116	@ 0x74
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a2:	89ab      	ldrh	r3, [r5, #12]
 800d4a4:	0598      	lsls	r0, r3, #22
 800d4a6:	d4f7      	bmi.n	800d498 <_vfiprintf_r+0x44>
 800d4a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4aa:	f7fe fa69 	bl	800b980 <__retarget_lock_release_recursive>
 800d4ae:	e7f3      	b.n	800d498 <_vfiprintf_r+0x44>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4b4:	2320      	movs	r3, #32
 800d4b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4be:	2330      	movs	r3, #48	@ 0x30
 800d4c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d670 <_vfiprintf_r+0x21c>
 800d4c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4c8:	f04f 0901 	mov.w	r9, #1
 800d4cc:	4623      	mov	r3, r4
 800d4ce:	469a      	mov	sl, r3
 800d4d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4d4:	b10a      	cbz	r2, 800d4da <_vfiprintf_r+0x86>
 800d4d6:	2a25      	cmp	r2, #37	@ 0x25
 800d4d8:	d1f9      	bne.n	800d4ce <_vfiprintf_r+0x7a>
 800d4da:	ebba 0b04 	subs.w	fp, sl, r4
 800d4de:	d00b      	beq.n	800d4f8 <_vfiprintf_r+0xa4>
 800d4e0:	465b      	mov	r3, fp
 800d4e2:	4622      	mov	r2, r4
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f7ff ffa2 	bl	800d430 <__sfputs_r>
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	f000 80a7 	beq.w	800d640 <_vfiprintf_r+0x1ec>
 800d4f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4f4:	445a      	add	r2, fp
 800d4f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 809f 	beq.w	800d640 <_vfiprintf_r+0x1ec>
 800d502:	2300      	movs	r3, #0
 800d504:	f04f 32ff 	mov.w	r2, #4294967295
 800d508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d50c:	f10a 0a01 	add.w	sl, sl, #1
 800d510:	9304      	str	r3, [sp, #16]
 800d512:	9307      	str	r3, [sp, #28]
 800d514:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d518:	931a      	str	r3, [sp, #104]	@ 0x68
 800d51a:	4654      	mov	r4, sl
 800d51c:	2205      	movs	r2, #5
 800d51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d522:	4853      	ldr	r0, [pc, #332]	@ (800d670 <_vfiprintf_r+0x21c>)
 800d524:	f7f2 ff3c 	bl	80003a0 <memchr>
 800d528:	9a04      	ldr	r2, [sp, #16]
 800d52a:	b9d8      	cbnz	r0, 800d564 <_vfiprintf_r+0x110>
 800d52c:	06d1      	lsls	r1, r2, #27
 800d52e:	bf44      	itt	mi
 800d530:	2320      	movmi	r3, #32
 800d532:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d536:	0713      	lsls	r3, r2, #28
 800d538:	bf44      	itt	mi
 800d53a:	232b      	movmi	r3, #43	@ 0x2b
 800d53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d540:	f89a 3000 	ldrb.w	r3, [sl]
 800d544:	2b2a      	cmp	r3, #42	@ 0x2a
 800d546:	d015      	beq.n	800d574 <_vfiprintf_r+0x120>
 800d548:	9a07      	ldr	r2, [sp, #28]
 800d54a:	4654      	mov	r4, sl
 800d54c:	2000      	movs	r0, #0
 800d54e:	f04f 0c0a 	mov.w	ip, #10
 800d552:	4621      	mov	r1, r4
 800d554:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d558:	3b30      	subs	r3, #48	@ 0x30
 800d55a:	2b09      	cmp	r3, #9
 800d55c:	d94b      	bls.n	800d5f6 <_vfiprintf_r+0x1a2>
 800d55e:	b1b0      	cbz	r0, 800d58e <_vfiprintf_r+0x13a>
 800d560:	9207      	str	r2, [sp, #28]
 800d562:	e014      	b.n	800d58e <_vfiprintf_r+0x13a>
 800d564:	eba0 0308 	sub.w	r3, r0, r8
 800d568:	fa09 f303 	lsl.w	r3, r9, r3
 800d56c:	4313      	orrs	r3, r2
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	46a2      	mov	sl, r4
 800d572:	e7d2      	b.n	800d51a <_vfiprintf_r+0xc6>
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	1d19      	adds	r1, r3, #4
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	9103      	str	r1, [sp, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	bfbb      	ittet	lt
 800d580:	425b      	neglt	r3, r3
 800d582:	f042 0202 	orrlt.w	r2, r2, #2
 800d586:	9307      	strge	r3, [sp, #28]
 800d588:	9307      	strlt	r3, [sp, #28]
 800d58a:	bfb8      	it	lt
 800d58c:	9204      	strlt	r2, [sp, #16]
 800d58e:	7823      	ldrb	r3, [r4, #0]
 800d590:	2b2e      	cmp	r3, #46	@ 0x2e
 800d592:	d10a      	bne.n	800d5aa <_vfiprintf_r+0x156>
 800d594:	7863      	ldrb	r3, [r4, #1]
 800d596:	2b2a      	cmp	r3, #42	@ 0x2a
 800d598:	d132      	bne.n	800d600 <_vfiprintf_r+0x1ac>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	1d1a      	adds	r2, r3, #4
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	9203      	str	r2, [sp, #12]
 800d5a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5a6:	3402      	adds	r4, #2
 800d5a8:	9305      	str	r3, [sp, #20]
 800d5aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d680 <_vfiprintf_r+0x22c>
 800d5ae:	7821      	ldrb	r1, [r4, #0]
 800d5b0:	2203      	movs	r2, #3
 800d5b2:	4650      	mov	r0, sl
 800d5b4:	f7f2 fef4 	bl	80003a0 <memchr>
 800d5b8:	b138      	cbz	r0, 800d5ca <_vfiprintf_r+0x176>
 800d5ba:	9b04      	ldr	r3, [sp, #16]
 800d5bc:	eba0 000a 	sub.w	r0, r0, sl
 800d5c0:	2240      	movs	r2, #64	@ 0x40
 800d5c2:	4082      	lsls	r2, r0
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	3401      	adds	r4, #1
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ce:	4829      	ldr	r0, [pc, #164]	@ (800d674 <_vfiprintf_r+0x220>)
 800d5d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5d4:	2206      	movs	r2, #6
 800d5d6:	f7f2 fee3 	bl	80003a0 <memchr>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d03f      	beq.n	800d65e <_vfiprintf_r+0x20a>
 800d5de:	4b26      	ldr	r3, [pc, #152]	@ (800d678 <_vfiprintf_r+0x224>)
 800d5e0:	bb1b      	cbnz	r3, 800d62a <_vfiprintf_r+0x1d6>
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	3307      	adds	r3, #7
 800d5e6:	f023 0307 	bic.w	r3, r3, #7
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f0:	443b      	add	r3, r7
 800d5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f4:	e76a      	b.n	800d4cc <_vfiprintf_r+0x78>
 800d5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	2001      	movs	r0, #1
 800d5fe:	e7a8      	b.n	800d552 <_vfiprintf_r+0xfe>
 800d600:	2300      	movs	r3, #0
 800d602:	3401      	adds	r4, #1
 800d604:	9305      	str	r3, [sp, #20]
 800d606:	4619      	mov	r1, r3
 800d608:	f04f 0c0a 	mov.w	ip, #10
 800d60c:	4620      	mov	r0, r4
 800d60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d612:	3a30      	subs	r2, #48	@ 0x30
 800d614:	2a09      	cmp	r2, #9
 800d616:	d903      	bls.n	800d620 <_vfiprintf_r+0x1cc>
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0c6      	beq.n	800d5aa <_vfiprintf_r+0x156>
 800d61c:	9105      	str	r1, [sp, #20]
 800d61e:	e7c4      	b.n	800d5aa <_vfiprintf_r+0x156>
 800d620:	fb0c 2101 	mla	r1, ip, r1, r2
 800d624:	4604      	mov	r4, r0
 800d626:	2301      	movs	r3, #1
 800d628:	e7f0      	b.n	800d60c <_vfiprintf_r+0x1b8>
 800d62a:	ab03      	add	r3, sp, #12
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	462a      	mov	r2, r5
 800d630:	4b12      	ldr	r3, [pc, #72]	@ (800d67c <_vfiprintf_r+0x228>)
 800d632:	a904      	add	r1, sp, #16
 800d634:	4630      	mov	r0, r6
 800d636:	f7fd fc43 	bl	800aec0 <_printf_float>
 800d63a:	4607      	mov	r7, r0
 800d63c:	1c78      	adds	r0, r7, #1
 800d63e:	d1d6      	bne.n	800d5ee <_vfiprintf_r+0x19a>
 800d640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d642:	07d9      	lsls	r1, r3, #31
 800d644:	d405      	bmi.n	800d652 <_vfiprintf_r+0x1fe>
 800d646:	89ab      	ldrh	r3, [r5, #12]
 800d648:	059a      	lsls	r2, r3, #22
 800d64a:	d402      	bmi.n	800d652 <_vfiprintf_r+0x1fe>
 800d64c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d64e:	f7fe f997 	bl	800b980 <__retarget_lock_release_recursive>
 800d652:	89ab      	ldrh	r3, [r5, #12]
 800d654:	065b      	lsls	r3, r3, #25
 800d656:	f53f af1f 	bmi.w	800d498 <_vfiprintf_r+0x44>
 800d65a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d65c:	e71e      	b.n	800d49c <_vfiprintf_r+0x48>
 800d65e:	ab03      	add	r3, sp, #12
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	462a      	mov	r2, r5
 800d664:	4b05      	ldr	r3, [pc, #20]	@ (800d67c <_vfiprintf_r+0x228>)
 800d666:	a904      	add	r1, sp, #16
 800d668:	4630      	mov	r0, r6
 800d66a:	f7fd feb1 	bl	800b3d0 <_printf_i>
 800d66e:	e7e4      	b.n	800d63a <_vfiprintf_r+0x1e6>
 800d670:	080216be 	.word	0x080216be
 800d674:	080216c8 	.word	0x080216c8
 800d678:	0800aec1 	.word	0x0800aec1
 800d67c:	0800d431 	.word	0x0800d431
 800d680:	080216c4 	.word	0x080216c4

0800d684 <__swbuf_r>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	460e      	mov	r6, r1
 800d688:	4614      	mov	r4, r2
 800d68a:	4605      	mov	r5, r0
 800d68c:	b118      	cbz	r0, 800d696 <__swbuf_r+0x12>
 800d68e:	6a03      	ldr	r3, [r0, #32]
 800d690:	b90b      	cbnz	r3, 800d696 <__swbuf_r+0x12>
 800d692:	f7fe f847 	bl	800b724 <__sinit>
 800d696:	69a3      	ldr	r3, [r4, #24]
 800d698:	60a3      	str	r3, [r4, #8]
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	071a      	lsls	r2, r3, #28
 800d69e:	d501      	bpl.n	800d6a4 <__swbuf_r+0x20>
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	b943      	cbnz	r3, 800d6b6 <__swbuf_r+0x32>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f000 f82a 	bl	800d700 <__swsetup_r>
 800d6ac:	b118      	cbz	r0, 800d6b6 <__swbuf_r+0x32>
 800d6ae:	f04f 37ff 	mov.w	r7, #4294967295
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b6:	6823      	ldr	r3, [r4, #0]
 800d6b8:	6922      	ldr	r2, [r4, #16]
 800d6ba:	1a98      	subs	r0, r3, r2
 800d6bc:	6963      	ldr	r3, [r4, #20]
 800d6be:	b2f6      	uxtb	r6, r6
 800d6c0:	4283      	cmp	r3, r0
 800d6c2:	4637      	mov	r7, r6
 800d6c4:	dc05      	bgt.n	800d6d2 <__swbuf_r+0x4e>
 800d6c6:	4621      	mov	r1, r4
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	f7ff fd99 	bl	800d200 <_fflush_r>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d1ed      	bne.n	800d6ae <__swbuf_r+0x2a>
 800d6d2:	68a3      	ldr	r3, [r4, #8]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	60a3      	str	r3, [r4, #8]
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	6022      	str	r2, [r4, #0]
 800d6de:	701e      	strb	r6, [r3, #0]
 800d6e0:	6962      	ldr	r2, [r4, #20]
 800d6e2:	1c43      	adds	r3, r0, #1
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d004      	beq.n	800d6f2 <__swbuf_r+0x6e>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	07db      	lsls	r3, r3, #31
 800d6ec:	d5e1      	bpl.n	800d6b2 <__swbuf_r+0x2e>
 800d6ee:	2e0a      	cmp	r6, #10
 800d6f0:	d1df      	bne.n	800d6b2 <__swbuf_r+0x2e>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f7ff fd83 	bl	800d200 <_fflush_r>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d0d9      	beq.n	800d6b2 <__swbuf_r+0x2e>
 800d6fe:	e7d6      	b.n	800d6ae <__swbuf_r+0x2a>

0800d700 <__swsetup_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4b29      	ldr	r3, [pc, #164]	@ (800d7a8 <__swsetup_r+0xa8>)
 800d704:	4605      	mov	r5, r0
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	460c      	mov	r4, r1
 800d70a:	b118      	cbz	r0, 800d714 <__swsetup_r+0x14>
 800d70c:	6a03      	ldr	r3, [r0, #32]
 800d70e:	b90b      	cbnz	r3, 800d714 <__swsetup_r+0x14>
 800d710:	f7fe f808 	bl	800b724 <__sinit>
 800d714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d718:	0719      	lsls	r1, r3, #28
 800d71a:	d422      	bmi.n	800d762 <__swsetup_r+0x62>
 800d71c:	06da      	lsls	r2, r3, #27
 800d71e:	d407      	bmi.n	800d730 <__swsetup_r+0x30>
 800d720:	2209      	movs	r2, #9
 800d722:	602a      	str	r2, [r5, #0]
 800d724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d728:	81a3      	strh	r3, [r4, #12]
 800d72a:	f04f 30ff 	mov.w	r0, #4294967295
 800d72e:	e033      	b.n	800d798 <__swsetup_r+0x98>
 800d730:	0758      	lsls	r0, r3, #29
 800d732:	d512      	bpl.n	800d75a <__swsetup_r+0x5a>
 800d734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d736:	b141      	cbz	r1, 800d74a <__swsetup_r+0x4a>
 800d738:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d73c:	4299      	cmp	r1, r3
 800d73e:	d002      	beq.n	800d746 <__swsetup_r+0x46>
 800d740:	4628      	mov	r0, r5
 800d742:	f7fe ff07 	bl	800c554 <_free_r>
 800d746:	2300      	movs	r3, #0
 800d748:	6363      	str	r3, [r4, #52]	@ 0x34
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d750:	81a3      	strh	r3, [r4, #12]
 800d752:	2300      	movs	r3, #0
 800d754:	6063      	str	r3, [r4, #4]
 800d756:	6923      	ldr	r3, [r4, #16]
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	f043 0308 	orr.w	r3, r3, #8
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	6923      	ldr	r3, [r4, #16]
 800d764:	b94b      	cbnz	r3, 800d77a <__swsetup_r+0x7a>
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d76c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d770:	d003      	beq.n	800d77a <__swsetup_r+0x7a>
 800d772:	4621      	mov	r1, r4
 800d774:	4628      	mov	r0, r5
 800d776:	f000 f883 	bl	800d880 <__smakebuf_r>
 800d77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77e:	f013 0201 	ands.w	r2, r3, #1
 800d782:	d00a      	beq.n	800d79a <__swsetup_r+0x9a>
 800d784:	2200      	movs	r2, #0
 800d786:	60a2      	str	r2, [r4, #8]
 800d788:	6962      	ldr	r2, [r4, #20]
 800d78a:	4252      	negs	r2, r2
 800d78c:	61a2      	str	r2, [r4, #24]
 800d78e:	6922      	ldr	r2, [r4, #16]
 800d790:	b942      	cbnz	r2, 800d7a4 <__swsetup_r+0xa4>
 800d792:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d796:	d1c5      	bne.n	800d724 <__swsetup_r+0x24>
 800d798:	bd38      	pop	{r3, r4, r5, pc}
 800d79a:	0799      	lsls	r1, r3, #30
 800d79c:	bf58      	it	pl
 800d79e:	6962      	ldrpl	r2, [r4, #20]
 800d7a0:	60a2      	str	r2, [r4, #8]
 800d7a2:	e7f4      	b.n	800d78e <__swsetup_r+0x8e>
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e7f7      	b.n	800d798 <__swsetup_r+0x98>
 800d7a8:	24000058 	.word	0x24000058

0800d7ac <_raise_r>:
 800d7ac:	291f      	cmp	r1, #31
 800d7ae:	b538      	push	{r3, r4, r5, lr}
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	d904      	bls.n	800d7c0 <_raise_r+0x14>
 800d7b6:	2316      	movs	r3, #22
 800d7b8:	6003      	str	r3, [r0, #0]
 800d7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7c2:	b112      	cbz	r2, 800d7ca <_raise_r+0x1e>
 800d7c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7c8:	b94b      	cbnz	r3, 800d7de <_raise_r+0x32>
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f000 f830 	bl	800d830 <_getpid_r>
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4601      	mov	r1, r0
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7da:	f000 b817 	b.w	800d80c <_kill_r>
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d00a      	beq.n	800d7f8 <_raise_r+0x4c>
 800d7e2:	1c59      	adds	r1, r3, #1
 800d7e4:	d103      	bne.n	800d7ee <_raise_r+0x42>
 800d7e6:	2316      	movs	r3, #22
 800d7e8:	6003      	str	r3, [r0, #0]
 800d7ea:	2001      	movs	r0, #1
 800d7ec:	e7e7      	b.n	800d7be <_raise_r+0x12>
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	4798      	blx	r3
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e7e0      	b.n	800d7be <_raise_r+0x12>

0800d7fc <raise>:
 800d7fc:	4b02      	ldr	r3, [pc, #8]	@ (800d808 <raise+0xc>)
 800d7fe:	4601      	mov	r1, r0
 800d800:	6818      	ldr	r0, [r3, #0]
 800d802:	f7ff bfd3 	b.w	800d7ac <_raise_r>
 800d806:	bf00      	nop
 800d808:	24000058 	.word	0x24000058

0800d80c <_kill_r>:
 800d80c:	b538      	push	{r3, r4, r5, lr}
 800d80e:	4d07      	ldr	r5, [pc, #28]	@ (800d82c <_kill_r+0x20>)
 800d810:	2300      	movs	r3, #0
 800d812:	4604      	mov	r4, r0
 800d814:	4608      	mov	r0, r1
 800d816:	4611      	mov	r1, r2
 800d818:	602b      	str	r3, [r5, #0]
 800d81a:	f7f4 fdaf 	bl	800237c <_kill>
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	d102      	bne.n	800d828 <_kill_r+0x1c>
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	b103      	cbz	r3, 800d828 <_kill_r+0x1c>
 800d826:	6023      	str	r3, [r4, #0]
 800d828:	bd38      	pop	{r3, r4, r5, pc}
 800d82a:	bf00      	nop
 800d82c:	24003e60 	.word	0x24003e60

0800d830 <_getpid_r>:
 800d830:	f7f4 bd9c 	b.w	800236c <_getpid>

0800d834 <__swhatbuf_r>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	460c      	mov	r4, r1
 800d838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83c:	2900      	cmp	r1, #0
 800d83e:	b096      	sub	sp, #88	@ 0x58
 800d840:	4615      	mov	r5, r2
 800d842:	461e      	mov	r6, r3
 800d844:	da0d      	bge.n	800d862 <__swhatbuf_r+0x2e>
 800d846:	89a3      	ldrh	r3, [r4, #12]
 800d848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d84c:	f04f 0100 	mov.w	r1, #0
 800d850:	bf14      	ite	ne
 800d852:	2340      	movne	r3, #64	@ 0x40
 800d854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d858:	2000      	movs	r0, #0
 800d85a:	6031      	str	r1, [r6, #0]
 800d85c:	602b      	str	r3, [r5, #0]
 800d85e:	b016      	add	sp, #88	@ 0x58
 800d860:	bd70      	pop	{r4, r5, r6, pc}
 800d862:	466a      	mov	r2, sp
 800d864:	f000 f848 	bl	800d8f8 <_fstat_r>
 800d868:	2800      	cmp	r0, #0
 800d86a:	dbec      	blt.n	800d846 <__swhatbuf_r+0x12>
 800d86c:	9901      	ldr	r1, [sp, #4]
 800d86e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d876:	4259      	negs	r1, r3
 800d878:	4159      	adcs	r1, r3
 800d87a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d87e:	e7eb      	b.n	800d858 <__swhatbuf_r+0x24>

0800d880 <__smakebuf_r>:
 800d880:	898b      	ldrh	r3, [r1, #12]
 800d882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d884:	079d      	lsls	r5, r3, #30
 800d886:	4606      	mov	r6, r0
 800d888:	460c      	mov	r4, r1
 800d88a:	d507      	bpl.n	800d89c <__smakebuf_r+0x1c>
 800d88c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	6123      	str	r3, [r4, #16]
 800d894:	2301      	movs	r3, #1
 800d896:	6163      	str	r3, [r4, #20]
 800d898:	b003      	add	sp, #12
 800d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d89c:	ab01      	add	r3, sp, #4
 800d89e:	466a      	mov	r2, sp
 800d8a0:	f7ff ffc8 	bl	800d834 <__swhatbuf_r>
 800d8a4:	9f00      	ldr	r7, [sp, #0]
 800d8a6:	4605      	mov	r5, r0
 800d8a8:	4639      	mov	r1, r7
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7fe fec6 	bl	800c63c <_malloc_r>
 800d8b0:	b948      	cbnz	r0, 800d8c6 <__smakebuf_r+0x46>
 800d8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b6:	059a      	lsls	r2, r3, #22
 800d8b8:	d4ee      	bmi.n	800d898 <__smakebuf_r+0x18>
 800d8ba:	f023 0303 	bic.w	r3, r3, #3
 800d8be:	f043 0302 	orr.w	r3, r3, #2
 800d8c2:	81a3      	strh	r3, [r4, #12]
 800d8c4:	e7e2      	b.n	800d88c <__smakebuf_r+0xc>
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	6020      	str	r0, [r4, #0]
 800d8ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ce:	81a3      	strh	r3, [r4, #12]
 800d8d0:	9b01      	ldr	r3, [sp, #4]
 800d8d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8d6:	b15b      	cbz	r3, 800d8f0 <__smakebuf_r+0x70>
 800d8d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f000 f81d 	bl	800d91c <_isatty_r>
 800d8e2:	b128      	cbz	r0, 800d8f0 <__smakebuf_r+0x70>
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	f043 0301 	orr.w	r3, r3, #1
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	431d      	orrs	r5, r3
 800d8f4:	81a5      	strh	r5, [r4, #12]
 800d8f6:	e7cf      	b.n	800d898 <__smakebuf_r+0x18>

0800d8f8 <_fstat_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4d07      	ldr	r5, [pc, #28]	@ (800d918 <_fstat_r+0x20>)
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	4604      	mov	r4, r0
 800d900:	4608      	mov	r0, r1
 800d902:	4611      	mov	r1, r2
 800d904:	602b      	str	r3, [r5, #0]
 800d906:	f7f4 fd99 	bl	800243c <_fstat>
 800d90a:	1c43      	adds	r3, r0, #1
 800d90c:	d102      	bne.n	800d914 <_fstat_r+0x1c>
 800d90e:	682b      	ldr	r3, [r5, #0]
 800d910:	b103      	cbz	r3, 800d914 <_fstat_r+0x1c>
 800d912:	6023      	str	r3, [r4, #0]
 800d914:	bd38      	pop	{r3, r4, r5, pc}
 800d916:	bf00      	nop
 800d918:	24003e60 	.word	0x24003e60

0800d91c <_isatty_r>:
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4d06      	ldr	r5, [pc, #24]	@ (800d938 <_isatty_r+0x1c>)
 800d920:	2300      	movs	r3, #0
 800d922:	4604      	mov	r4, r0
 800d924:	4608      	mov	r0, r1
 800d926:	602b      	str	r3, [r5, #0]
 800d928:	f7f4 fd98 	bl	800245c <_isatty>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_isatty_r+0x1a>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	b103      	cbz	r3, 800d936 <_isatty_r+0x1a>
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	24003e60 	.word	0x24003e60
 800d93c:	00000000 	.word	0x00000000

0800d940 <log10>:
 800d940:	b508      	push	{r3, lr}
 800d942:	ed2d 8b02 	vpush	{d8}
 800d946:	eeb0 8b40 	vmov.f64	d8, d0
 800d94a:	f000 f855 	bl	800d9f8 <__ieee754_log10>
 800d94e:	eeb4 8b48 	vcmp.f64	d8, d8
 800d952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d956:	d60f      	bvs.n	800d978 <log10+0x38>
 800d958:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d960:	d80a      	bhi.n	800d978 <log10+0x38>
 800d962:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96a:	d108      	bne.n	800d97e <log10+0x3e>
 800d96c:	f7fd ffdc 	bl	800b928 <__errno>
 800d970:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 800d998 <log10+0x58>
 800d974:	2322      	movs	r3, #34	@ 0x22
 800d976:	6003      	str	r3, [r0, #0]
 800d978:	ecbd 8b02 	vpop	{d8}
 800d97c:	bd08      	pop	{r3, pc}
 800d97e:	f7fd ffd3 	bl	800b928 <__errno>
 800d982:	ecbd 8b02 	vpop	{d8}
 800d986:	2321      	movs	r3, #33	@ 0x21
 800d988:	6003      	str	r3, [r0, #0]
 800d98a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d98e:	4804      	ldr	r0, [pc, #16]	@ (800d9a0 <log10+0x60>)
 800d990:	f000 b826 	b.w	800d9e0 <nan>
 800d994:	f3af 8000 	nop.w
 800d998:	00000000 	.word	0x00000000
 800d99c:	fff00000 	.word	0xfff00000
 800d9a0:	08021714 	.word	0x08021714

0800d9a4 <sqrtf>:
 800d9a4:	b508      	push	{r3, lr}
 800d9a6:	ed2d 8b02 	vpush	{d8}
 800d9aa:	eeb0 8a40 	vmov.f32	s16, s0
 800d9ae:	f000 f81f 	bl	800d9f0 <__ieee754_sqrtf>
 800d9b2:	eeb4 8a48 	vcmp.f32	s16, s16
 800d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ba:	d60c      	bvs.n	800d9d6 <sqrtf+0x32>
 800d9bc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d9dc <sqrtf+0x38>
 800d9c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c8:	d505      	bpl.n	800d9d6 <sqrtf+0x32>
 800d9ca:	f7fd ffad 	bl	800b928 <__errno>
 800d9ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d9d2:	2321      	movs	r3, #33	@ 0x21
 800d9d4:	6003      	str	r3, [r0, #0]
 800d9d6:	ecbd 8b02 	vpop	{d8}
 800d9da:	bd08      	pop	{r3, pc}
 800d9dc:	00000000 	.word	0x00000000

0800d9e0 <nan>:
 800d9e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d9e8 <nan+0x8>
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	00000000 	.word	0x00000000
 800d9ec:	7ff80000 	.word	0x7ff80000

0800d9f0 <__ieee754_sqrtf>:
 800d9f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d9f4:	4770      	bx	lr
	...

0800d9f8 <__ieee754_log10>:
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	ee10 3a90 	vmov	r3, s1
 800d9fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da02:	ed2d 8b02 	vpush	{d8}
 800da06:	da21      	bge.n	800da4c <__ieee754_log10+0x54>
 800da08:	ee10 1a10 	vmov	r1, s0
 800da0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800da10:	430a      	orrs	r2, r1
 800da12:	d108      	bne.n	800da26 <__ieee754_log10+0x2e>
 800da14:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 800daa0 <__ieee754_log10+0xa8>
 800da18:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 800daa8 <__ieee754_log10+0xb0>
 800da1c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800da20:	ecbd 8b02 	vpop	{d8}
 800da24:	bd10      	pop	{r4, pc}
 800da26:	2b00      	cmp	r3, #0
 800da28:	da02      	bge.n	800da30 <__ieee754_log10+0x38>
 800da2a:	ee30 6b40 	vsub.f64	d6, d0, d0
 800da2e:	e7f3      	b.n	800da18 <__ieee754_log10+0x20>
 800da30:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800dab0 <__ieee754_log10+0xb8>
 800da34:	ee20 0b07 	vmul.f64	d0, d0, d7
 800da38:	ee10 3a90 	vmov	r3, s1
 800da3c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800da40:	4923      	ldr	r1, [pc, #140]	@ (800dad0 <__ieee754_log10+0xd8>)
 800da42:	428b      	cmp	r3, r1
 800da44:	dd04      	ble.n	800da50 <__ieee754_log10+0x58>
 800da46:	ee30 0b00 	vadd.f64	d0, d0, d0
 800da4a:	e7e9      	b.n	800da20 <__ieee754_log10+0x28>
 800da4c:	2200      	movs	r2, #0
 800da4e:	e7f7      	b.n	800da40 <__ieee754_log10+0x48>
 800da50:	1518      	asrs	r0, r3, #20
 800da52:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800da56:	4410      	add	r0, r2
 800da58:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800da5c:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 800da60:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800da64:	ee08 3a10 	vmov	s16, r3
 800da68:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 800da6c:	ec53 2b10 	vmov	r2, r3, d0
 800da70:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800da74:	ec43 2b10 	vmov	d0, r2, r3
 800da78:	f000 f82e 	bl	800dad8 <log>
 800da7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800dab8 <__ieee754_log10+0xc0>
 800da80:	ee20 0b07 	vmul.f64	d0, d0, d7
 800da84:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800dac0 <__ieee754_log10+0xc8>
 800da88:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 800da8c:	eea8 0b07 	vfma.f64	d0, d8, d7
 800da90:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800dac8 <__ieee754_log10+0xd0>
 800da94:	eea8 0b07 	vfma.f64	d0, d8, d7
 800da98:	e7c2      	b.n	800da20 <__ieee754_log10+0x28>
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w
 800daa0:	00000000 	.word	0x00000000
 800daa4:	c3500000 	.word	0xc3500000
	...
 800dab4:	43500000 	.word	0x43500000
 800dab8:	1526e50e 	.word	0x1526e50e
 800dabc:	3fdbcb7b 	.word	0x3fdbcb7b
 800dac0:	11f12b36 	.word	0x11f12b36
 800dac4:	3d59fef3 	.word	0x3d59fef3
 800dac8:	509f6000 	.word	0x509f6000
 800dacc:	3fd34413 	.word	0x3fd34413
 800dad0:	7fefffff 	.word	0x7fefffff
 800dad4:	00000000 	.word	0x00000000

0800dad8 <log>:
 800dad8:	b4f0      	push	{r4, r5, r6, r7}
 800dada:	ee10 0a90 	vmov	r0, s1
 800dade:	ee10 3a10 	vmov	r3, s0
 800dae2:	f04f 34ff 	mov.w	r4, #4294967295
 800dae6:	429c      	cmp	r4, r3
 800dae8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 800daec:	4c72      	ldr	r4, [pc, #456]	@ (800dcb8 <log+0x1e0>)
 800daee:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 800daf2:	418c      	sbcs	r4, r1
 800daf4:	ed2d 8b02 	vpush	{d8}
 800daf8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800dafc:	d35a      	bcc.n	800dbb4 <log+0xdc>
 800dafe:	4a6f      	ldr	r2, [pc, #444]	@ (800dcbc <log+0x1e4>)
 800db00:	4290      	cmp	r0, r2
 800db02:	bf08      	it	eq
 800db04:	2b00      	cmpeq	r3, #0
 800db06:	f000 80c7 	beq.w	800dc98 <log+0x1c0>
 800db0a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800db0e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800db12:	4b6b      	ldr	r3, [pc, #428]	@ (800dcc0 <log+0x1e8>)
 800db14:	ee20 2b00 	vmul.f64	d2, d0, d0
 800db18:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800db1c:	ee20 4b02 	vmul.f64	d4, d0, d2
 800db20:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800db24:	eea6 7b00 	vfma.f64	d7, d6, d0
 800db28:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800db2c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800db30:	eea6 7b02 	vfma.f64	d7, d6, d2
 800db34:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 800db38:	eea5 6b00 	vfma.f64	d6, d5, d0
 800db3c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 800db40:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 800db44:	eea5 6b02 	vfma.f64	d6, d5, d2
 800db48:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800db4c:	eea3 5b00 	vfma.f64	d5, d3, d0
 800db50:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 800db54:	eea3 5b02 	vfma.f64	d5, d3, d2
 800db58:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 800db5c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800db60:	eea5 6b04 	vfma.f64	d6, d5, d4
 800db64:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800db68:	eea6 7b04 	vfma.f64	d7, d6, d4
 800db6c:	eeb0 2b47 	vmov.f64	d2, d7
 800db70:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 800dca0 <log+0x1c8>
 800db74:	eeb0 6b40 	vmov.f64	d6, d0
 800db78:	eeb0 3b40 	vmov.f64	d3, d0
 800db7c:	eea0 6b07 	vfma.f64	d6, d0, d7
 800db80:	eea0 6b47 	vfms.f64	d6, d0, d7
 800db84:	ee30 8b46 	vsub.f64	d8, d0, d6
 800db88:	ee26 1b06 	vmul.f64	d1, d6, d6
 800db8c:	eea1 3b05 	vfma.f64	d3, d1, d5
 800db90:	ee30 7b43 	vsub.f64	d7, d0, d3
 800db94:	ee30 0b06 	vadd.f64	d0, d0, d6
 800db98:	eea1 7b05 	vfma.f64	d7, d1, d5
 800db9c:	ee25 5b08 	vmul.f64	d5, d5, d8
 800dba0:	eea5 7b00 	vfma.f64	d7, d5, d0
 800dba4:	eea2 7b04 	vfma.f64	d7, d2, d4
 800dba8:	ee33 0b07 	vadd.f64	d0, d3, d7
 800dbac:	ecbd 8b02 	vpop	{d8}
 800dbb0:	bcf0      	pop	{r4, r5, r6, r7}
 800dbb2:	4770      	bx	lr
 800dbb4:	f1a2 0410 	sub.w	r4, r2, #16
 800dbb8:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 800dbbc:	428c      	cmp	r4, r1
 800dbbe:	d923      	bls.n	800dc08 <log+0x130>
 800dbc0:	18d9      	adds	r1, r3, r3
 800dbc2:	eb40 0400 	adc.w	r4, r0, r0
 800dbc6:	4321      	orrs	r1, r4
 800dbc8:	d105      	bne.n	800dbd6 <log+0xfe>
 800dbca:	ecbd 8b02 	vpop	{d8}
 800dbce:	2001      	movs	r0, #1
 800dbd0:	bcf0      	pop	{r4, r5, r6, r7}
 800dbd2:	f000 b889 	b.w	800dce8 <__math_divzero>
 800dbd6:	493b      	ldr	r1, [pc, #236]	@ (800dcc4 <log+0x1ec>)
 800dbd8:	4288      	cmp	r0, r1
 800dbda:	bf08      	it	eq
 800dbdc:	2b00      	cmpeq	r3, #0
 800dbde:	d0e5      	beq.n	800dbac <log+0xd4>
 800dbe0:	0413      	lsls	r3, r2, #16
 800dbe2:	d403      	bmi.n	800dbec <log+0x114>
 800dbe4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800dbe8:	4393      	bics	r3, r2
 800dbea:	d104      	bne.n	800dbf6 <log+0x11e>
 800dbec:	ecbd 8b02 	vpop	{d8}
 800dbf0:	bcf0      	pop	{r4, r5, r6, r7}
 800dbf2:	f000 b891 	b.w	800dd18 <__math_invalid>
 800dbf6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800dca8 <log+0x1d0>
 800dbfa:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dbfe:	ec53 2b17 	vmov	r2, r3, d7
 800dc02:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800dc06:	4613      	mov	r3, r2
 800dc08:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 800dc0c:	492c      	ldr	r1, [pc, #176]	@ (800dcc0 <log+0x1e8>)
 800dc0e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800dc12:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800dc16:	f3c2 3446 	ubfx	r4, r2, #13, #7
 800dc1a:	ea4f 5c12 	mov.w	ip, r2, lsr #20
 800dc1e:	eb01 1504 	add.w	r5, r1, r4, lsl #4
 800dc22:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 800dc26:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
 800dc2a:	1e1e      	subs	r6, r3, #0
 800dc2c:	eba0 070c 	sub.w	r7, r0, ip
 800dc30:	ec47 6b16 	vmov	d6, r6, r7
 800dc34:	1512      	asrs	r2, r2, #20
 800dc36:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dc3a:	ee07 2a90 	vmov	s15, r2
 800dc3e:	ee25 2b05 	vmul.f64	d2, d5, d5
 800dc42:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800dc46:	ed91 4b00 	vldr	d4, [r1]
 800dc4a:	ee25 1b02 	vmul.f64	d1, d5, d2
 800dc4e:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
 800dc52:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dc56:	ee35 4b07 	vadd.f64	d4, d5, d7
 800dc5a:	ee37 0b44 	vsub.f64	d0, d7, d4
 800dc5e:	ed91 7b02 	vldr	d7, [r1, #8]
 800dc62:	ee30 0b05 	vadd.f64	d0, d0, d5
 800dc66:	eea7 0b06 	vfma.f64	d0, d7, d6
 800dc6a:	ed91 7b04 	vldr	d7, [r1, #16]
 800dc6e:	ed91 6b08 	vldr	d6, [r1, #32]
 800dc72:	eea7 0b02 	vfma.f64	d0, d7, d2
 800dc76:	ed91 7b06 	vldr	d7, [r1, #24]
 800dc7a:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 800dc7e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800dc82:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 800dc86:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dc8a:	eea6 7b02 	vfma.f64	d7, d6, d2
 800dc8e:	eea1 0b07 	vfma.f64	d0, d1, d7
 800dc92:	ee30 0b04 	vadd.f64	d0, d0, d4
 800dc96:	e789      	b.n	800dbac <log+0xd4>
 800dc98:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800dcb0 <log+0x1d8>
 800dc9c:	e786      	b.n	800dbac <log+0xd4>
 800dc9e:	bf00      	nop
 800dca0:	00000000 	.word	0x00000000
 800dca4:	41a00000 	.word	0x41a00000
 800dca8:	00000000 	.word	0x00000000
 800dcac:	43300000 	.word	0x43300000
	...
 800dcb8:	000308ff 	.word	0x000308ff
 800dcbc:	3ff00000 	.word	0x3ff00000
 800dcc0:	08021920 	.word	0x08021920
 800dcc4:	7ff00000 	.word	0x7ff00000

0800dcc8 <with_errno>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	ed2d 8b02 	vpush	{d8}
 800dcce:	eeb0 8b40 	vmov.f64	d8, d0
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	f7fd fe28 	bl	800b928 <__errno>
 800dcd8:	eeb0 0b48 	vmov.f64	d0, d8
 800dcdc:	ecbd 8b02 	vpop	{d8}
 800dce0:	6004      	str	r4, [r0, #0]
 800dce2:	bd10      	pop	{r4, pc}
 800dce4:	0000      	movs	r0, r0
	...

0800dce8 <__math_divzero>:
 800dce8:	b082      	sub	sp, #8
 800dcea:	2800      	cmp	r0, #0
 800dcec:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800dcf0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800dcf4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800dcf8:	ed8d 7b00 	vstr	d7, [sp]
 800dcfc:	ed9d 0b00 	vldr	d0, [sp]
 800dd00:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800dd10 <__math_divzero+0x28>
 800dd04:	2022      	movs	r0, #34	@ 0x22
 800dd06:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800dd0a:	b002      	add	sp, #8
 800dd0c:	f7ff bfdc 	b.w	800dcc8 <with_errno>
	...

0800dd18 <__math_invalid>:
 800dd18:	eeb0 7b40 	vmov.f64	d7, d0
 800dd1c:	eeb4 7b47 	vcmp.f64	d7, d7
 800dd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd24:	ee30 6b40 	vsub.f64	d6, d0, d0
 800dd28:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800dd2c:	d602      	bvs.n	800dd34 <__math_invalid+0x1c>
 800dd2e:	2021      	movs	r0, #33	@ 0x21
 800dd30:	f7ff bfca 	b.w	800dcc8 <with_errno>
 800dd34:	4770      	bx	lr
	...

0800dd38 <_init>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	bf00      	nop
 800dd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3e:	bc08      	pop	{r3}
 800dd40:	469e      	mov	lr, r3
 800dd42:	4770      	bx	lr

0800dd44 <_fini>:
 800dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd46:	bf00      	nop
 800dd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd4a:	bc08      	pop	{r3}
 800dd4c:	469e      	mov	lr, r3
 800dd4e:	4770      	bx	lr
