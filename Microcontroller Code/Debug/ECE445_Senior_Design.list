
ECE445_Senior_Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08008150  08008150  00009150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080084dc  080084dc  000094dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080084e4  080084e4  000094e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080084e8  080084e8  000094e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080084ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000044c  240001d8  080086c4  0000a1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000624  080086c4  0000a624  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c0b0  00000000  00000000  0000a206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d13  00000000  00000000  000162b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000af8  00000000  00000000  00017fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000833  00000000  00000000  00018ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032371  00000000  00000000  000192fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ef9d  00000000  00000000  0004b66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c6b2  00000000  00000000  0005a609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a6cbb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a48  00000000  00000000  001a6d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a0  00000000  00000000  001aa748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008134 	.word	0x08008134

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	08008134 	.word	0x08008134

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003a4:	f000 f96c 	bl	8000680 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 fb80 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f906 	bl	80005bc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80003b0:	f000 f81c 	bl	80003ec <MX_GPIO_Init>
  MX_DMA_Init();
 80003b4:	f000 f85e 	bl	8000474 <MX_DMA_Init>
  MX_ADC1_Init();
 80003b8:	f000 f8b4 	bl	8000524 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Start ADC conversion using DMA. This call follows the HAL API naming conventions. */
  Start_ADC_DMA();
 80003bc:	f000 f802 	bl	80003c4 <Start_ADC_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <main+0x20>

080003c4 <Start_ADC_DMA>:
  * @note   This function initiates the ADC1 conversion in DMA mode.
  *         The ADC results will be continuously transferred to the adcBuffer.
  * @retval None
  */
void Start_ADC_DMA(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUFFER_SIZE) != HAL_OK)
 80003c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003cc:	4905      	ldr	r1, [pc, #20]	@ (80003e4 <Start_ADC_DMA+0x20>)
 80003ce:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <Start_ADC_DMA+0x24>)
 80003d0:	f000 ff7c 	bl	80012cc <HAL_ADC_Start_DMA>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <Start_ADC_DMA+0x1a>
  {
    /* Start Error: Call error handler */
    Error_Handler();
 80003da:	f000 f97d 	bl	80006d8 <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	240001f4 	.word	0x240001f4
 80003e8:	240003f4 	.word	0x240003f4

080003ec <MX_GPIO_Init>:
  * @note   Configures the ADC input pin (e.g., PA0) in analog mode and the LED output pin.
  *         Adjust pin names and port definitions to match your hardware.
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /* Enable GPIO Clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b1a      	ldr	r3, [pc, #104]	@ (800046c <MX_GPIO_Init+0x80>)
 8000404:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000408:	4a18      	ldr	r2, [pc, #96]	@ (800046c <MX_GPIO_Init+0x80>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000412:	4b16      	ldr	r3, [pc, #88]	@ (800046c <MX_GPIO_Init+0x80>)
 8000414:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b12      	ldr	r3, [pc, #72]	@ (800046c <MX_GPIO_Init+0x80>)
 8000422:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000426:	4a11      	ldr	r2, [pc, #68]	@ (800046c <MX_GPIO_Init+0x80>)
 8000428:	f043 0302 	orr.w	r3, r3, #2
 800042c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000430:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <MX_GPIO_Init+0x80>)
 8000432:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin for ADC input.
     Assuming the ADC channel is connected to PA0. */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800043e:	2301      	movs	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000442:	2303      	movs	r3, #3
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	4619      	mov	r1, r3
 8000450:	4807      	ldr	r0, [pc, #28]	@ (8000470 <MX_GPIO_Init+0x84>)
 8000452:	f003 f809 	bl	8003468 <HAL_GPIO_Init>

  /* Configure GPIO pin for LED output.
     LED_GPIO_Port and LED_Pin should be defined in your project (e.g., in main.h or a board file). */
  //GPIO_InitStruct.Pin = LED_Pin; TODO
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-Pull output
 8000456:	2301      	movs	r3, #1
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  //HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct); TODO
}
 8000462:	bf00      	nop
 8000464:	3720      	adds	r7, #32
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	58024400 	.word	0x58024400
 8000470:	58020000 	.word	0x58020000

08000474 <MX_DMA_Init>:
  *         and associates the DMA handle with the ADC handle.
  *         It also configures the NVIC for DMA interrupts.
  * @retval None
  */
void MX_DMA_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  /* Enable DMA1 clock */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047a:	4b26      	ldr	r3, [pc, #152]	@ (8000514 <MX_DMA_Init+0xa0>)
 800047c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000480:	4a24      	ldr	r2, [pc, #144]	@ (8000514 <MX_DMA_Init+0xa0>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800048a:	4b22      	ldr	r3, [pc, #136]	@ (8000514 <MX_DMA_Init+0xa0>)
 800048c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
     - Memory increment: Enabled (move through the buffer)
     - Data alignment: Half-word for both peripheral and memory (12-bit ADC data fits in a half-word)
     - Mode: Circular (for continuous data transfer)
     - Priority: High
     - FIFO mode: Disabled (typically FIFO is not needed for ADC DMA) */
  hdma_adc1.Instance = DMA1_Stream0;
 8000498:	4b1f      	ldr	r3, [pc, #124]	@ (8000518 <MX_DMA_Init+0xa4>)
 800049a:	4a20      	ldr	r2, [pc, #128]	@ (800051c <MX_DMA_Init+0xa8>)
 800049c:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800049e:	4b1e      	ldr	r3, [pc, #120]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004a0:	2209      	movs	r2, #9
 80004a2:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004b0:	4b19      	ldr	r3, [pc, #100]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004b6:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004b8:	4b17      	ldr	r3, [pc, #92]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004be:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004c0:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004c6:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004ce:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80004d6:	621a      	str	r2, [r3, #32]
  hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004de:	480e      	ldr	r0, [pc, #56]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004e0:	f001 fdaa 	bl	8002038 <HAL_DMA_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_DMA_Init+0x7a>
  {
    /* Initialization Error */
    Error_Handler();
 80004ea:	f000 f8f5 	bl	80006d8 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <MX_DMA_Init+0xac>)
 80004f0:	4a09      	ldr	r2, [pc, #36]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <MX_DMA_Init+0xa4>)
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <MX_DMA_Init+0xac>)
 80004f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure NVIC for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200b      	movs	r0, #11
 8000500:	f001 fced 	bl	8001ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000504:	200b      	movs	r0, #11
 8000506:	f001 fd04 	bl	8001f12 <HAL_NVIC_EnableIRQ>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	58024400 	.word	0x58024400
 8000518:	24000458 	.word	0x24000458
 800051c:	40020010 	.word	0x40020010
 8000520:	240003f4 	.word	0x240003f4

08000524 <MX_ADC1_Init>:
  * @brief  Initialize ADC1 peripheral.
  * @note   Configures ADC1 for continuous conversion in DMA mode.
  *         Follows HAL_ADC_Init() and HAL_ADC_ConfigChannel() as per UM2217 guidelines.
  */
void MX_ADC1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
 8000538:	615a      	str	r2, [r3, #20]
 800053a:	619a      	str	r2, [r3, #24]

  hadc1.Instance = ADC1;
 800053c:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <MX_ADC1_Init+0x90>)
 800053e:	4a1e      	ldr	r2, [pc, #120]	@ (80005b8 <MX_ADC1_Init+0x94>)
 8000540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;  // Adjust prescaler as needed
 8000542:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <MX_ADC1_Init+0x90>)
 8000544:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <MX_ADC1_Init+0x90>)
 800054c:	2208      	movs	r2, #8
 800054e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <MX_ADC1_Init+0x90>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000556:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <MX_ADC1_Init+0x90>)
 8000558:	2201      	movs	r2, #1
 800055a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800055c:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <MX_ADC1_Init+0x90>)
 800055e:	2200      	movs	r2, #0
 8000560:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <MX_ADC1_Init+0x90>)
 8000564:	2200      	movs	r2, #0
 8000566:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <MX_ADC1_Init+0x90>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	@ 0x24
  //hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800056e:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <MX_ADC1_Init+0x90>)
 8000570:	2201      	movs	r2, #1
 8000572:	619a      	str	r2, [r3, #24]
  //hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000574:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <MX_ADC1_Init+0x90>)
 8000576:	2204      	movs	r2, #4
 8000578:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057a:	480e      	ldr	r0, [pc, #56]	@ (80005b4 <MX_ADC1_Init+0x90>)
 800057c:	f000 fd42 	bl	8001004 <HAL_ADC_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0x66>
  {
    Error_Handler();
 8000586:	f000 f8a7 	bl	80006d8 <Error_Handler>
  }

  /* Configure the ADC channel connected to the piezo sensor.
     Change ADC_CHANNEL_0 if your sensor is connected to a different channel. */
  sConfig.Channel = ADC_CHANNEL_0;
 800058a:	2301      	movs	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2306      	movs	r3, #6
 8000590:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;  // Longer sample time for stable readings
 8000592:	2306      	movs	r3, #6
 8000594:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <MX_ADC1_Init+0x90>)
 800059c:	f000 ff68 	bl	8001470 <HAL_ADC_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005a6:	f000 f897 	bl	80006d8 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	240003f4 	.word	0x240003f4
 80005b8:	40022000 	.word	0x40022000

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09c      	sub	sp, #112	@ 0x70
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c6:	224c      	movs	r2, #76	@ 0x4c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 feff 	bl	80063ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2220      	movs	r2, #32
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f005 fef9 	bl	80063ce <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80005dc:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <SystemClock_Config+0xbc>)
 80005de:	f04f 32ff 	mov.w	r2, #4294967295
 80005e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005e6:	2002      	movs	r0, #2
 80005e8:	f003 f8ee 	bl	80037c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <SystemClock_Config+0xc0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <SystemClock_Config+0xc0>)
 80005f6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <SystemClock_Config+0xc0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000608:	bf00      	nop
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <SystemClock_Config+0xc0>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000616:	d1f8      	bne.n	800060a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800061c:	2301      	movs	r3, #1
 800061e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000620:	2340      	movs	r3, #64	@ 0x40
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f905 	bl	800383c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f84e 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	233f      	movs	r3, #63	@ 0x3f
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fd1d 	bl	80040a0 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800066c:	f000 f834 	bl	80006d8 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3770      	adds	r7, #112	@ 0x70
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	58024400 	.word	0x58024400
 800067c:	58024800 	.word	0x58024800

08000680 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000692:	f001 fc59 	bl	8001f48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000696:	2301      	movs	r3, #1
 8000698:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800069a:	2300      	movs	r3, #0
 800069c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006a2:	231f      	movs	r3, #31
 80006a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006a6:	2387      	movs	r3, #135	@ 0x87
 80006a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006ae:	2300      	movs	r3, #0
 80006b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006b2:	2301      	movs	r3, #1
 80006b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fc77 	bl	8001fb8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006ca:	2004      	movs	r0, #4
 80006cc:	f001 fc54 	bl	8001f78 <HAL_MPU_Enable>

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <Error_Handler+0x8>

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <HAL_MspInit+0x30>)
 80006ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80006f0:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <HAL_MspInit+0x30>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_MspInit+0x30>)
 80006fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000700:	f003 0302 	and.w	r3, r3, #2
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	58024400 	.word	0x58024400

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <NMI_Handler+0x4>

08000720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <MemManage_Handler+0x4>

08000730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <UsageFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 fa0f 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}

08000776 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  return 1;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <_kill>:

int _kill(int pid, int sig)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000790:	f005 fe70 	bl	8006474 <__errno>
 8000794:	4603      	mov	r3, r0
 8000796:	2216      	movs	r2, #22
 8000798:	601a      	str	r2, [r3, #0]
  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_exit>:

void _exit (int status)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007ae:	f04f 31ff 	mov.w	r1, #4294967295
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ffe7 	bl	8000786 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <_exit+0x12>

080007bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00a      	b.n	80007e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ce:	f3af 8000 	nop.w
 80007d2:	4601      	mov	r1, r0
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	b2ca      	uxtb	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbf0      	blt.n	80007ce <_read+0x12>
  }

  return len;
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e009      	b.n	800081c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbf1      	blt.n	8000808 <_write+0x12>
  }
  return len;
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_close>:

int _close(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000856:	605a      	str	r2, [r3, #4]
  return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <_isatty>:

int _isatty(int file)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f005 fdd4 	bl	8006474 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	24100000 	.word	0x24100000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	240004d0 	.word	0x240004d0
 8000900:	24000628 	.word	0x24000628

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000908:	4b3e      	ldr	r3, [pc, #248]	@ (8000a04 <SystemInit+0x100>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a04 <SystemInit+0x100>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000918:	4b3b      	ldr	r3, [pc, #236]	@ (8000a08 <SystemInit+0x104>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 030f 	and.w	r3, r3, #15
 8000920:	2b02      	cmp	r3, #2
 8000922:	d807      	bhi.n	8000934 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000924:	4b38      	ldr	r3, [pc, #224]	@ (8000a08 <SystemInit+0x104>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 030f 	bic.w	r3, r3, #15
 800092c:	4a36      	ldr	r2, [pc, #216]	@ (8000a08 <SystemInit+0x104>)
 800092e:	f043 0303 	orr.w	r3, r3, #3
 8000932:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000934:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <SystemInit+0x108>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a34      	ldr	r2, [pc, #208]	@ (8000a0c <SystemInit+0x108>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000940:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <SystemInit+0x108>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000946:	4b31      	ldr	r3, [pc, #196]	@ (8000a0c <SystemInit+0x108>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4930      	ldr	r1, [pc, #192]	@ (8000a0c <SystemInit+0x108>)
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <SystemInit+0x10c>)
 800094e:	4013      	ands	r3, r2
 8000950:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <SystemInit+0x104>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 030c 	and.w	r3, r3, #12
 800095a:	2b00      	cmp	r3, #0
 800095c:	d007      	beq.n	800096e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800095e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <SystemInit+0x104>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 030f 	bic.w	r3, r3, #15
 8000966:	4a28      	ldr	r2, [pc, #160]	@ (8000a08 <SystemInit+0x104>)
 8000968:	f043 0303 	orr.w	r3, r3, #3
 800096c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800096e:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <SystemInit+0x108>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <SystemInit+0x108>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <SystemInit+0x108>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <SystemInit+0x108>)
 8000982:	4a24      	ldr	r2, [pc, #144]	@ (8000a14 <SystemInit+0x110>)
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <SystemInit+0x108>)
 8000988:	4a23      	ldr	r2, [pc, #140]	@ (8000a18 <SystemInit+0x114>)
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <SystemInit+0x108>)
 800098e:	4a23      	ldr	r2, [pc, #140]	@ (8000a1c <SystemInit+0x118>)
 8000990:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000992:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <SystemInit+0x108>)
 8000994:	2200      	movs	r2, #0
 8000996:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <SystemInit+0x108>)
 800099a:	4a20      	ldr	r2, [pc, #128]	@ (8000a1c <SystemInit+0x118>)
 800099c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <SystemInit+0x108>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <SystemInit+0x108>)
 80009a6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a1c <SystemInit+0x118>)
 80009a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <SystemInit+0x108>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <SystemInit+0x108>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <SystemInit+0x108>)
 80009b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <SystemInit+0x108>)
 80009be:	2200      	movs	r2, #0
 80009c0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <SystemInit+0x108>)
 80009c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d113      	bne.n	80009f8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <SystemInit+0x108>)
 80009d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009d6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <SystemInit+0x108>)
 80009d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009dc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <SystemInit+0x11c>)
 80009e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <SystemInit+0x108>)
 80009ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <SystemInit+0x108>)
 80009f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009f4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00
 8000a08:	52002000 	.word	0x52002000
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a14:	02020200 	.word	0x02020200
 8000a18:	01ff0000 	.word	0x01ff0000
 8000a1c:	01010280 	.word	0x01010280
 8000a20:	52004000 	.word	0x52004000

08000a24 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <ExitRun0Mode+0x2c>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <ExitRun0Mode+0x2c>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000a34:	bf00      	nop
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <ExitRun0Mode+0x2c>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f9      	beq.n	8000a36 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	58024800 	.word	0x58024800

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000a90 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000a58:	f7ff ffe4 	bl	8000a24 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a5c:	f7ff ff52 	bl	8000904 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	@ (8000a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f005 fcfb 	bl	8006480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fc89 	bl	80003a0 <main>
  bx  lr
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000a94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a98:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8000a9c:	080084ec 	.word	0x080084ec
  ldr r2, =_sbss
 8000aa0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8000aa4:	24000624 	.word	0x24000624

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f001 fa08 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ab8:	f003 fca8 	bl	800440c <HAL_RCC_GetSysClockFreq>
 8000abc:	4602      	mov	r2, r0
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_Init+0x68>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	4913      	ldr	r1, [pc, #76]	@ (8000b18 <HAL_Init+0x6c>)
 8000aca:	5ccb      	ldrb	r3, [r1, r3]
 8000acc:	f003 031f 	and.w	r3, r3, #31
 8000ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_Init+0x68>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_Init+0x6c>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	f003 031f 	and.w	r3, r3, #31
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aec:	4a0b      	ldr	r2, [pc, #44]	@ (8000b1c <HAL_Init+0x70>)
 8000aee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000af0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b20 <HAL_Init+0x74>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f814 	bl	8000b24 <HAL_InitTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e002      	b.n	8000b0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b06:	f7ff fded 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58024400 	.word	0x58024400
 8000b18:	08008150 	.word	0x08008150
 8000b1c:	24000004 	.word	0x24000004
 8000b20:	24000000 	.word	0x24000000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <HAL_InitTick+0x60>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e021      	b.n	8000b7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <HAL_InitTick+0x64>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_InitTick+0x60>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f9ed 	bl	8001f2e <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f001 f9b7 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <HAL_InitTick+0x68>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2400000c 	.word	0x2400000c
 8000b88:	24000000 	.word	0x24000000
 8000b8c:	24000008 	.word	0x24000008

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2400000c 	.word	0x2400000c
 8000bb4:	240004d4 	.word	0x240004d4

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	240004d4 	.word	0x240004d4

08000bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	609a      	str	r2, [r3, #8]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d107      	bne.n	8000c5c <LL_ADC_SetChannelPreselection+0x24>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	0e9b      	lsrs	r3, r3, #26
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	2201      	movs	r2, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	e015      	b.n	8000c88 <LL_ADC_SetChannelPreselection+0x50>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8000c72:	2320      	movs	r3, #32
 8000c74:	e003      	b.n	8000c7e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fab3 f383 	clz	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	2201      	movs	r2, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	69d2      	ldr	r2, [r2, #28]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8000c92:	bf00      	nop
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b087      	sub	sp, #28
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3360      	adds	r3, #96	@ 0x60
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f003 031f 	and.w	r3, r3, #31
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	611a      	str	r2, [r3, #16]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3360      	adds	r3, #96	@ 0x60
 8000d20:	461a      	mov	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	601a      	str	r2, [r3, #0]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3330      	adds	r3, #48	@ 0x30
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	4413      	add	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	211f      	movs	r1, #31
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	0e9b      	lsrs	r3, r3, #26
 8000da4:	f003 011f 	and.w	r1, r3, #31
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	431a      	orrs	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	f023 0203 	bic.w	r2, r3, #3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60da      	str	r2, [r3, #12]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b087      	sub	sp, #28
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3314      	adds	r3, #20
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	0e5b      	lsrs	r3, r3, #25
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	0d1b      	lsrs	r3, r3, #20
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	2107      	movs	r1, #7
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	0d1b      	lsrs	r3, r3, #20
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e34:	bf00      	nop
 8000e36:	371c      	adds	r7, #28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0318 	and.w	r3, r3, #24
 8000e62:	4908      	ldr	r1, [pc, #32]	@ (8000e84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e64:	40d9      	lsrs	r1, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	400b      	ands	r3, r1
 8000e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	000fffff 	.word	0x000fffff

08000e88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 031f 	and.w	r3, r3, #31
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6093      	str	r3, [r2, #8]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	5fffffc0 	.word	0x5fffffc0

08000ec8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000edc:	d101      	bne.n	8000ee2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <LL_ADC_EnableInternalRegulator+0x24>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	6fffffc0 	.word	0x6fffffc0

08000f18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f2c:	d101      	bne.n	8000f32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <LL_ADC_Enable+0x24>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	f043 0201 	orr.w	r2, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	7fffffc0 	.word	0x7fffffc0

08000f68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <LL_ADC_IsEnabled+0x18>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <LL_ADC_IsEnabled+0x1a>
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <LL_ADC_REG_StartConversion+0x24>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	f043 0204 	orr.w	r2, r3, #4
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	7fffffc0 	.word	0x7fffffc0

08000fb8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d101      	bne.n	8000fd0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d101      	bne.n	8000ff6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e138      	b.n	8001290 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001028:	2b00      	cmp	r3, #0
 800102a:	d109      	bne.n	8001040 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f943 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff3f 	bl	8000ec8 <LL_ADC_IsDeepPowerDownEnabled>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff25 	bl	8000ea4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff5a 	bl	8000f18 <LL_ADC_IsInternalRegulatorEnabled>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d114      	bne.n	8001094 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff3e 	bl	8000ef0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001074:	4b88      	ldr	r3, [pc, #544]	@ (8001298 <HAL_ADC_Init+0x294>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	099b      	lsrs	r3, r3, #6
 800107a:	4a88      	ldr	r2, [pc, #544]	@ (800129c <HAL_ADC_Init+0x298>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	3301      	adds	r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001086:	e002      	b.n	800108e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3b01      	subs	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f9      	bne.n	8001088 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff3d 	bl	8000f18 <LL_ADC_IsInternalRegulatorEnabled>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10d      	bne.n	80010c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a8:	f043 0210 	orr.w	r2, r3, #16
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff77 	bl	8000fb8 <LL_ADC_REG_IsConversionOngoing>
 80010ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f040 80d2 	bne.w	800127e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f040 80ce 	bne.w	800127e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80010ea:	f043 0202 	orr.w	r2, r3, #2
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff36 	bl	8000f68 <LL_ADC_IsEnabled>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d110      	bne.n	8001124 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001102:	4867      	ldr	r0, [pc, #412]	@ (80012a0 <HAL_ADC_Init+0x29c>)
 8001104:	f7ff ff30 	bl	8000f68 <LL_ADC_IsEnabled>
 8001108:	4604      	mov	r4, r0
 800110a:	4866      	ldr	r0, [pc, #408]	@ (80012a4 <HAL_ADC_Init+0x2a0>)
 800110c:	f7ff ff2c 	bl	8000f68 <LL_ADC_IsEnabled>
 8001110:	4603      	mov	r3, r0
 8001112:	4323      	orrs	r3, r4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4619      	mov	r1, r3
 800111e:	4862      	ldr	r0, [pc, #392]	@ (80012a8 <HAL_ADC_Init+0x2a4>)
 8001120:	f7ff fd56 	bl	8000bd0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7d5b      	ldrb	r3, [r3, #21]
 8001128:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800112e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001134:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7f1b      	ldrb	r3, [r3, #28]
 800113a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7f1b      	ldrb	r3, [r3, #28]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	3b01      	subs	r3, #1
 800114e:	045b      	lsls	r3, r3, #17
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001162:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	4b4c      	ldr	r3, [pc, #304]	@ (80012ac <HAL_ADC_Init+0x2a8>)
 800117a:	4013      	ands	r3, r2
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	69b9      	ldr	r1, [r7, #24]
 8001182:	430b      	orrs	r3, r1
 8001184:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff14 	bl	8000fb8 <LL_ADC_REG_IsConversionOngoing>
 8001190:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff21 	bl	8000fde <LL_ADC_INJ_IsConversionOngoing>
 800119c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d14a      	bne.n	800123a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d147      	bne.n	800123a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7d1b      	ldrb	r3, [r3, #20]
 80011ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	4b3c      	ldr	r3, [pc, #240]	@ (80012b0 <HAL_ADC_Init+0x2ac>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d11b      	bne.n	800120e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <HAL_ADC_Init+0x2b0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80011ea:	3a01      	subs	r2, #1
 80011ec:	0411      	lsls	r1, r2, #16
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80011f2:	4311      	orrs	r1, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80011f8:	4311      	orrs	r1, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80011fe:	430a      	orrs	r2, r1
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	e007      	b.n	800121e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 fca9 	bl	8001b8c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10c      	bne.n	800125c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	f023 010f 	bic.w	r1, r3, #15
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	631a      	str	r2, [r3, #48]	@ 0x30
 800125a:	e007      	b.n	800126c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 020f 	bic.w	r2, r2, #15
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001270:	f023 0303 	bic.w	r3, r3, #3
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	655a      	str	r2, [r3, #84]	@ 0x54
 800127c:	e007      	b.n	800128e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001282:	f043 0210 	orr.w	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800128e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3724      	adds	r7, #36	@ 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	24000000 	.word	0x24000000
 800129c:	053e2d63 	.word	0x053e2d63
 80012a0:	40022000 	.word	0x40022000
 80012a4:	40022100 	.word	0x40022100
 80012a8:	40022300 	.word	0x40022300
 80012ac:	fff0c003 	.word	0xfff0c003
 80012b0:	ffffbffc 	.word	0xffffbffc
 80012b4:	fc00f81e 	.word	0xfc00f81e

080012b8 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012d8:	484f      	ldr	r0, [pc, #316]	@ (8001418 <HAL_ADC_Start_DMA+0x14c>)
 80012da:	f7ff fdd5 	bl	8000e88 <LL_ADC_GetMultimode>
 80012de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe67 	bl	8000fb8 <LL_ADC_REG_IsConversionOngoing>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 808c 	bne.w	800140a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_ADC_Start_DMA+0x34>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e087      	b.n	8001410 <HAL_ADC_Start_DMA+0x144>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b05      	cmp	r3, #5
 8001312:	d002      	beq.n	800131a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b09      	cmp	r3, #9
 8001318:	d170      	bne.n	80013fc <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 fb26 	bl	800196c <ADC_Enable>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d163      	bne.n	80013f2 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <HAL_ADC_Start_DMA+0x150>)
 8001330:	4013      	ands	r3, r2
 8001332:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a38      	ldr	r2, [pc, #224]	@ (8001420 <HAL_ADC_Start_DMA+0x154>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d002      	beq.n	800134a <HAL_ADC_Start_DMA+0x7e>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	e000      	b.n	800134c <HAL_ADC_Start_DMA+0x80>
 800134a:	4b36      	ldr	r3, [pc, #216]	@ (8001424 <HAL_ADC_Start_DMA+0x158>)
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4293      	cmp	r3, r2
 8001352:	d002      	beq.n	800135a <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f023 0206 	bic.w	r2, r3, #6
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	659a      	str	r2, [r3, #88]	@ 0x58
 800137e:	e002      	b.n	8001386 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a27      	ldr	r2, [pc, #156]	@ (8001428 <HAL_ADC_Start_DMA+0x15c>)
 800138c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a26      	ldr	r2, [pc, #152]	@ (800142c <HAL_ADC_Start_DMA+0x160>)
 8001394:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a25      	ldr	r2, [pc, #148]	@ (8001430 <HAL_ADC_Start_DMA+0x164>)
 800139c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	221c      	movs	r2, #28
 80013a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0210 	orr.w	r2, r2, #16
 80013bc:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f7ff fcfb 	bl	8000dc4 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3340      	adds	r3, #64	@ 0x40
 80013d8:	4619      	mov	r1, r3
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f001 f9b9 	bl	8002754 <HAL_DMA_Start_IT>
 80013e2:	4603      	mov	r3, r0
 80013e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fdd0 	bl	8000f90 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80013f0:	e00d      	b.n	800140e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80013fa:	e008      	b.n	800140e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001408:	e001      	b.n	800140e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800140a:	2302      	movs	r3, #2
 800140c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40022300 	.word	0x40022300
 800141c:	fffff0fe 	.word	0xfffff0fe
 8001420:	40022100 	.word	0x40022100
 8001424:	40022000 	.word	0x40022000
 8001428:	08001a65 	.word	0x08001a65
 800142c:	08001b3d 	.word	0x08001b3d
 8001430:	08001b59 	.word	0x08001b59

08001434 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b08d      	sub	sp, #52	@ 0x34
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a5b      	ldr	r2, [pc, #364]	@ (80015f8 <HAL_ADC_ConfigChannel+0x188>)
 800148a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_ADC_ConfigChannel+0x2a>
 8001496:	2302      	movs	r3, #2
 8001498:	e263      	b.n	8001962 <HAL_ADC_ConfigChannel+0x4f2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fd86 	bl	8000fb8 <LL_ADC_REG_IsConversionOngoing>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f040 8248 	bne.w	8001944 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db2c      	blt.n	8001516 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d108      	bne.n	80014da <HAL_ADC_ConfigChannel+0x6a>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0e9b      	lsrs	r3, r3, #26
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2201      	movs	r2, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	e016      	b.n	8001508 <HAL_ADC_ConfigChannel+0x98>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	613b      	str	r3, [r7, #16]
  return result;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80014f2:	2320      	movs	r3, #32
 80014f4:	e003      	b.n	80014fe <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2201      	movs	r2, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	69d1      	ldr	r1, [r2, #28]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	430b      	orrs	r3, r1
 8001514:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6859      	ldr	r1, [r3, #4]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	f7ff fc22 	bl	8000d6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd43 	bl	8000fb8 <LL_ADC_REG_IsConversionOngoing>
 8001532:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fd50 	bl	8000fde <LL_ADC_INJ_IsConversionOngoing>
 800153e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80a2 	bne.w	800168c <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 809e 	bne.w	800168c <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	461a      	mov	r2, r3
 800155e:	f7ff fc44 	bl	8000dea <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10b      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x118>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	e00a      	b.n	800159e <HAL_ADC_ConfigChannel+0x12e>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d029      	beq.n	80015fc <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6919      	ldr	r1, [r3, #16]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	f7ff fb72 	bl	8000c9e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6919      	ldr	r1, [r3, #16]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	7e5b      	ldrb	r3, [r3, #25]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d102      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x160>
 80015ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015ce:	e000      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x162>
 80015d0:	2300      	movs	r3, #0
 80015d2:	461a      	mov	r2, r3
 80015d4:	f7ff fb9c 	bl	8000d10 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6919      	ldr	r1, [r3, #16]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d102      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x17e>
 80015e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015ec:	e000      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x180>
 80015ee:	2300      	movs	r3, #0
 80015f0:	461a      	mov	r2, r3
 80015f2:	f7ff fb74 	bl	8000cde <LL_ADC_SetDataRightShift>
 80015f6:	e049      	b.n	800168c <HAL_ADC_ConfigChannel+0x21c>
 80015f8:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	069b      	lsls	r3, r3, #26
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800161e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001626:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	069b      	lsls	r3, r3, #26
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001642:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800164a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	069b      	lsls	r3, r3, #26
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001666:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800166e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	069b      	lsls	r3, r3, #26
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800168a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc69 	bl	8000f68 <LL_ADC_IsEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 815c 	bne.w	8001956 <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f7ff fbc8 	bl	8000e40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a89      	ldr	r2, [pc, #548]	@ (80018dc <HAL_ADC_ConfigChannel+0x46c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 809a 	bne.w	80017f0 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4986      	ldr	r1, [pc, #536]	@ (80018e0 <HAL_ADC_ConfigChannel+0x470>)
 80016c6:	428b      	cmp	r3, r1
 80016c8:	d147      	bne.n	800175a <HAL_ADC_ConfigChannel+0x2ea>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4985      	ldr	r1, [pc, #532]	@ (80018e4 <HAL_ADC_ConfigChannel+0x474>)
 80016d0:	428b      	cmp	r3, r1
 80016d2:	d040      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x2e6>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4983      	ldr	r1, [pc, #524]	@ (80018e8 <HAL_ADC_ConfigChannel+0x478>)
 80016da:	428b      	cmp	r3, r1
 80016dc:	d039      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x2e2>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4982      	ldr	r1, [pc, #520]	@ (80018ec <HAL_ADC_ConfigChannel+0x47c>)
 80016e4:	428b      	cmp	r3, r1
 80016e6:	d032      	beq.n	800174e <HAL_ADC_ConfigChannel+0x2de>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4980      	ldr	r1, [pc, #512]	@ (80018f0 <HAL_ADC_ConfigChannel+0x480>)
 80016ee:	428b      	cmp	r3, r1
 80016f0:	d02b      	beq.n	800174a <HAL_ADC_ConfigChannel+0x2da>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	497f      	ldr	r1, [pc, #508]	@ (80018f4 <HAL_ADC_ConfigChannel+0x484>)
 80016f8:	428b      	cmp	r3, r1
 80016fa:	d024      	beq.n	8001746 <HAL_ADC_ConfigChannel+0x2d6>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	497d      	ldr	r1, [pc, #500]	@ (80018f8 <HAL_ADC_ConfigChannel+0x488>)
 8001702:	428b      	cmp	r3, r1
 8001704:	d01d      	beq.n	8001742 <HAL_ADC_ConfigChannel+0x2d2>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	497c      	ldr	r1, [pc, #496]	@ (80018fc <HAL_ADC_ConfigChannel+0x48c>)
 800170c:	428b      	cmp	r3, r1
 800170e:	d016      	beq.n	800173e <HAL_ADC_ConfigChannel+0x2ce>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	497a      	ldr	r1, [pc, #488]	@ (8001900 <HAL_ADC_ConfigChannel+0x490>)
 8001716:	428b      	cmp	r3, r1
 8001718:	d00f      	beq.n	800173a <HAL_ADC_ConfigChannel+0x2ca>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4979      	ldr	r1, [pc, #484]	@ (8001904 <HAL_ADC_ConfigChannel+0x494>)
 8001720:	428b      	cmp	r3, r1
 8001722:	d008      	beq.n	8001736 <HAL_ADC_ConfigChannel+0x2c6>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4977      	ldr	r1, [pc, #476]	@ (8001908 <HAL_ADC_ConfigChannel+0x498>)
 800172a:	428b      	cmp	r3, r1
 800172c:	d101      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x2c2>
 800172e:	4b77      	ldr	r3, [pc, #476]	@ (800190c <HAL_ADC_ConfigChannel+0x49c>)
 8001730:	e05a      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 8001732:	2300      	movs	r3, #0
 8001734:	e058      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 8001736:	4b76      	ldr	r3, [pc, #472]	@ (8001910 <HAL_ADC_ConfigChannel+0x4a0>)
 8001738:	e056      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 800173a:	4b76      	ldr	r3, [pc, #472]	@ (8001914 <HAL_ADC_ConfigChannel+0x4a4>)
 800173c:	e054      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 800173e:	4b70      	ldr	r3, [pc, #448]	@ (8001900 <HAL_ADC_ConfigChannel+0x490>)
 8001740:	e052      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 8001742:	4b6e      	ldr	r3, [pc, #440]	@ (80018fc <HAL_ADC_ConfigChannel+0x48c>)
 8001744:	e050      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 8001746:	4b74      	ldr	r3, [pc, #464]	@ (8001918 <HAL_ADC_ConfigChannel+0x4a8>)
 8001748:	e04e      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 800174a:	4b74      	ldr	r3, [pc, #464]	@ (800191c <HAL_ADC_ConfigChannel+0x4ac>)
 800174c:	e04c      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 800174e:	4b74      	ldr	r3, [pc, #464]	@ (8001920 <HAL_ADC_ConfigChannel+0x4b0>)
 8001750:	e04a      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 8001752:	4b74      	ldr	r3, [pc, #464]	@ (8001924 <HAL_ADC_ConfigChannel+0x4b4>)
 8001754:	e048      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 8001756:	2301      	movs	r3, #1
 8001758:	e046      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4972      	ldr	r1, [pc, #456]	@ (8001928 <HAL_ADC_ConfigChannel+0x4b8>)
 8001760:	428b      	cmp	r3, r1
 8001762:	d140      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x376>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	495e      	ldr	r1, [pc, #376]	@ (80018e4 <HAL_ADC_ConfigChannel+0x474>)
 800176a:	428b      	cmp	r3, r1
 800176c:	d039      	beq.n	80017e2 <HAL_ADC_ConfigChannel+0x372>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	495d      	ldr	r1, [pc, #372]	@ (80018e8 <HAL_ADC_ConfigChannel+0x478>)
 8001774:	428b      	cmp	r3, r1
 8001776:	d032      	beq.n	80017de <HAL_ADC_ConfigChannel+0x36e>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	495b      	ldr	r1, [pc, #364]	@ (80018ec <HAL_ADC_ConfigChannel+0x47c>)
 800177e:	428b      	cmp	r3, r1
 8001780:	d02b      	beq.n	80017da <HAL_ADC_ConfigChannel+0x36a>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	495a      	ldr	r1, [pc, #360]	@ (80018f0 <HAL_ADC_ConfigChannel+0x480>)
 8001788:	428b      	cmp	r3, r1
 800178a:	d024      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x366>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4958      	ldr	r1, [pc, #352]	@ (80018f4 <HAL_ADC_ConfigChannel+0x484>)
 8001792:	428b      	cmp	r3, r1
 8001794:	d01d      	beq.n	80017d2 <HAL_ADC_ConfigChannel+0x362>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4957      	ldr	r1, [pc, #348]	@ (80018f8 <HAL_ADC_ConfigChannel+0x488>)
 800179c:	428b      	cmp	r3, r1
 800179e:	d016      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x35e>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4955      	ldr	r1, [pc, #340]	@ (80018fc <HAL_ADC_ConfigChannel+0x48c>)
 80017a6:	428b      	cmp	r3, r1
 80017a8:	d00f      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x35a>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4954      	ldr	r1, [pc, #336]	@ (8001900 <HAL_ADC_ConfigChannel+0x490>)
 80017b0:	428b      	cmp	r3, r1
 80017b2:	d008      	beq.n	80017c6 <HAL_ADC_ConfigChannel+0x356>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4953      	ldr	r1, [pc, #332]	@ (8001908 <HAL_ADC_ConfigChannel+0x498>)
 80017ba:	428b      	cmp	r3, r1
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x352>
 80017be:	4b53      	ldr	r3, [pc, #332]	@ (800190c <HAL_ADC_ConfigChannel+0x49c>)
 80017c0:	e012      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017c2:	2300      	movs	r3, #0
 80017c4:	e010      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017c6:	4b53      	ldr	r3, [pc, #332]	@ (8001914 <HAL_ADC_ConfigChannel+0x4a4>)
 80017c8:	e00e      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001900 <HAL_ADC_ConfigChannel+0x490>)
 80017cc:	e00c      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017ce:	4b4b      	ldr	r3, [pc, #300]	@ (80018fc <HAL_ADC_ConfigChannel+0x48c>)
 80017d0:	e00a      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017d2:	4b51      	ldr	r3, [pc, #324]	@ (8001918 <HAL_ADC_ConfigChannel+0x4a8>)
 80017d4:	e008      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017d6:	4b51      	ldr	r3, [pc, #324]	@ (800191c <HAL_ADC_ConfigChannel+0x4ac>)
 80017d8:	e006      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017da:	4b51      	ldr	r3, [pc, #324]	@ (8001920 <HAL_ADC_ConfigChannel+0x4b0>)
 80017dc:	e004      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017de:	4b51      	ldr	r3, [pc, #324]	@ (8001924 <HAL_ADC_ConfigChannel+0x4b4>)
 80017e0:	e002      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x378>
 80017e6:	2300      	movs	r3, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f7ff fa24 	bl	8000c38 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f280 80ae 	bge.w	8001956 <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017fa:	484c      	ldr	r0, [pc, #304]	@ (800192c <HAL_ADC_ConfigChannel+0x4bc>)
 80017fc:	f7ff fa0e 	bl	8000c1c <LL_ADC_GetCommonPathInternalCh>
 8001800:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001802:	4837      	ldr	r0, [pc, #220]	@ (80018e0 <HAL_ADC_ConfigChannel+0x470>)
 8001804:	f7ff fbb0 	bl	8000f68 <LL_ADC_IsEnabled>
 8001808:	4604      	mov	r4, r0
 800180a:	4847      	ldr	r0, [pc, #284]	@ (8001928 <HAL_ADC_ConfigChannel+0x4b8>)
 800180c:	f7ff fbac 	bl	8000f68 <LL_ADC_IsEnabled>
 8001810:	4603      	mov	r3, r0
 8001812:	4323      	orrs	r3, r4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d156      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a44      	ldr	r2, [pc, #272]	@ (8001930 <HAL_ADC_ConfigChannel+0x4c0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d123      	bne.n	800186a <HAL_ADC_ConfigChannel+0x3fa>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11e      	bne.n	800186a <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3d      	ldr	r2, [pc, #244]	@ (8001928 <HAL_ADC_ConfigChannel+0x4b8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	f040 808f 	bne.w	8001956 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800183e:	4619      	mov	r1, r3
 8001840:	483a      	ldr	r0, [pc, #232]	@ (800192c <HAL_ADC_ConfigChannel+0x4bc>)
 8001842:	f7ff f9d8 	bl	8000bf6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001846:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <HAL_ADC_ConfigChannel+0x4c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	4a3a      	ldr	r2, [pc, #232]	@ (8001938 <HAL_ADC_ConfigChannel+0x4c8>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	3301      	adds	r3, #1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800185a:	e002      	b.n	8001862 <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3b01      	subs	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f9      	bne.n	800185c <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001868:	e075      	b.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a33      	ldr	r2, [pc, #204]	@ (800193c <HAL_ADC_ConfigChannel+0x4cc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d111      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x428>
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a29      	ldr	r2, [pc, #164]	@ (8001928 <HAL_ADC_ConfigChannel+0x4b8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d166      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188e:	4619      	mov	r1, r3
 8001890:	4826      	ldr	r0, [pc, #152]	@ (800192c <HAL_ADC_ConfigChannel+0x4bc>)
 8001892:	f7ff f9b0 	bl	8000bf6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001896:	e05e      	b.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a28      	ldr	r2, [pc, #160]	@ (8001940 <HAL_ADC_ConfigChannel+0x4d0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d159      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d154      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_ADC_ConfigChannel+0x4b8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d14f      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018bc:	4619      	mov	r1, r3
 80018be:	481b      	ldr	r0, [pc, #108]	@ (800192c <HAL_ADC_ConfigChannel+0x4bc>)
 80018c0:	f7ff f999 	bl	8000bf6 <LL_ADC_SetCommonPathInternalCh>
 80018c4:	e047      	b.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	f043 0220 	orr.w	r2, r3, #32
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80018d8:	e03d      	b.n	8001956 <HAL_ADC_ConfigChannel+0x4e6>
 80018da:	bf00      	nop
 80018dc:	47ff0000 	.word	0x47ff0000
 80018e0:	40022000 	.word	0x40022000
 80018e4:	04300002 	.word	0x04300002
 80018e8:	08600004 	.word	0x08600004
 80018ec:	0c900008 	.word	0x0c900008
 80018f0:	10c00010 	.word	0x10c00010
 80018f4:	14f00020 	.word	0x14f00020
 80018f8:	2a000400 	.word	0x2a000400
 80018fc:	2e300800 	.word	0x2e300800
 8001900:	32601000 	.word	0x32601000
 8001904:	43210000 	.word	0x43210000
 8001908:	4b840000 	.word	0x4b840000
 800190c:	4fb80000 	.word	0x4fb80000
 8001910:	47520000 	.word	0x47520000
 8001914:	36902000 	.word	0x36902000
 8001918:	25b00200 	.word	0x25b00200
 800191c:	21800100 	.word	0x21800100
 8001920:	1d500080 	.word	0x1d500080
 8001924:	19200040 	.word	0x19200040
 8001928:	40022100 	.word	0x40022100
 800192c:	40022300 	.word	0x40022300
 8001930:	cb840000 	.word	0xcb840000
 8001934:	24000000 	.word	0x24000000
 8001938:	053e2d63 	.word	0x053e2d63
 800193c:	bac04000 	.word	0xbac04000
 8001940:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001948:	f043 0220 	orr.w	r2, r3, #32
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800195e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001962:	4618      	mov	r0, r3
 8001964:	3734      	adds	r7, #52	@ 0x34
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop

0800196c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff faf5 	bl	8000f68 <LL_ADC_IsEnabled>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d161      	bne.n	8001a48 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <ADC_Enable+0xe8>)
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00d      	beq.n	80019ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e04d      	b.n	8001a4a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fac4 	bl	8000f40 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80019b8:	f7ff f8fe 	bl	8000bb8 <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019be:	4826      	ldr	r0, [pc, #152]	@ (8001a58 <ADC_Enable+0xec>)
 80019c0:	f7ff fa62 	bl	8000e88 <LL_ADC_GetMultimode>
 80019c4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a24      	ldr	r2, [pc, #144]	@ (8001a5c <ADC_Enable+0xf0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d002      	beq.n	80019d6 <ADC_Enable+0x6a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e000      	b.n	80019d8 <ADC_Enable+0x6c>
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <ADC_Enable+0xf4>)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4293      	cmp	r3, r2
 80019de:	d02c      	beq.n	8001a3a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d130      	bne.n	8001a48 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019e6:	e028      	b.n	8001a3a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fabb 	bl	8000f68 <LL_ADC_IsEnabled>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d104      	bne.n	8001a02 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fa9f 	bl	8000f40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a02:	f7ff f8d9 	bl	8000bb8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d914      	bls.n	8001a3a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d00d      	beq.n	8001a3a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a22:	f043 0210 	orr.w	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e007      	b.n	8001a4a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d1cf      	bne.n	80019e8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	8000003f 	.word	0x8000003f
 8001a58:	40022300 	.word	0x40022300
 8001a5c:	40022100 	.word	0x40022100
 8001a60:	40022000 	.word	0x40022000

08001a64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d14b      	bne.n	8001b16 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d021      	beq.n	8001adc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f952 	bl	8000d46 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d032      	beq.n	8001b0e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d12b      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11f      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ada:	e018      	b.n	8001b0e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d111      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fc90 	bl	8001434 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b14:	e00e      	b.n	8001b34 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff fc9a 	bl	800145c <HAL_ADC_ErrorCallback>
}
 8001b28:	e004      	b.n	8001b34 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fc7c 	bl	8001448 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	f043 0204 	orr.w	r2, r3, #4
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff fc6c 	bl	800145c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001b94:	4b60      	ldr	r3, [pc, #384]	@ (8001d18 <ADC_ConfigureBoostMode+0x18c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01c      	beq.n	8001bda <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001ba0:	f002 fdae 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8001ba4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001bae:	d010      	beq.n	8001bd2 <ADC_ConfigureBoostMode+0x46>
 8001bb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001bb4:	d873      	bhi.n	8001c9e <ADC_ConfigureBoostMode+0x112>
 8001bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bba:	d002      	beq.n	8001bc2 <ADC_ConfigureBoostMode+0x36>
 8001bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bc0:	d16d      	bne.n	8001c9e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	60fb      	str	r3, [r7, #12]
        break;
 8001bd0:	e068      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	60fb      	str	r3, [r7, #12]
        break;
 8001bd8:	e064      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001bda:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	f002 fdd3 	bl	800478c <HAL_RCCEx_GetPeriphCLKFreq>
 8001be6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001bf0:	d051      	beq.n	8001c96 <ADC_ConfigureBoostMode+0x10a>
 8001bf2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001bf6:	d854      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001bf8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001bfc:	d047      	beq.n	8001c8e <ADC_ConfigureBoostMode+0x102>
 8001bfe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001c02:	d84e      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c04:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001c08:	d03d      	beq.n	8001c86 <ADC_ConfigureBoostMode+0xfa>
 8001c0a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001c0e:	d848      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c14:	d033      	beq.n	8001c7e <ADC_ConfigureBoostMode+0xf2>
 8001c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c1a:	d842      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c1c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001c20:	d029      	beq.n	8001c76 <ADC_ConfigureBoostMode+0xea>
 8001c22:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001c26:	d83c      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c28:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001c2c:	d01a      	beq.n	8001c64 <ADC_ConfigureBoostMode+0xd8>
 8001c2e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001c32:	d836      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c34:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001c38:	d014      	beq.n	8001c64 <ADC_ConfigureBoostMode+0xd8>
 8001c3a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001c3e:	d830      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c44:	d00e      	beq.n	8001c64 <ADC_ConfigureBoostMode+0xd8>
 8001c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c4a:	d82a      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001c50:	d008      	beq.n	8001c64 <ADC_ConfigureBoostMode+0xd8>
 8001c52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001c56:	d824      	bhi.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
 8001c58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c5c:	d002      	beq.n	8001c64 <ADC_ConfigureBoostMode+0xd8>
 8001c5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c62:	d11e      	bne.n	8001ca2 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c9b      	lsrs	r3, r3, #18
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
        break;
 8001c74:	e016      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
        break;
 8001c7c:	e012      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	60fb      	str	r3, [r7, #12]
        break;
 8001c84:	e00e      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	60fb      	str	r3, [r7, #12]
        break;
 8001c8c:	e00a      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	09db      	lsrs	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]
        break;
 8001c94:	e006      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	60fb      	str	r3, [r7, #12]
        break;
 8001c9c:	e002      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
        break;
 8001c9e:	bf00      	nop
 8001ca0:	e000      	b.n	8001ca4 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8001ca2:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <ADC_ConfigureBoostMode+0x190>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d808      	bhi.n	8001cc4 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001cc0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001cc2:	e025      	b.n	8001d10 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a16      	ldr	r2, [pc, #88]	@ (8001d20 <ADC_ConfigureBoostMode+0x194>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d80a      	bhi.n	8001ce2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	e016      	b.n	8001d10 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <ADC_ConfigureBoostMode+0x198>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d80a      	bhi.n	8001d00 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfc:	609a      	str	r2, [r3, #8]
}
 8001cfe:	e007      	b.n	8001d10 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40022300 	.word	0x40022300
 8001d1c:	005f5e10 	.word	0x005f5e10
 8001d20:	00bebc20 	.word	0x00bebc20
 8001d24:	017d7840 	.word	0x017d7840

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x40>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x40>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00
 8001d6c:	05fa0000 	.word	0x05fa0000

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	@ (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	@ (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff29 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff40 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff90 	bl	8001e1c <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5f 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff33 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa4 	bl	8001e84 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001f4c:	f3bf 8f5f 	dmb	sy
}
 8001f50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <HAL_MPU_Disable+0x28>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <HAL_MPU_Disable+0x28>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_MPU_Disable+0x2c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	e000ed90 	.word	0xe000ed90

08001f78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f80:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <HAL_MPU_Enable+0x38>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_MPU_Enable+0x3c>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	4a09      	ldr	r2, [pc, #36]	@ (8001fb4 <HAL_MPU_Enable+0x3c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f94:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f96:	f3bf 8f4f 	dsb	sy
}
 8001f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f9c:	f3bf 8f6f 	isb	sy
}
 8001fa0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed90 	.word	0xe000ed90
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	785a      	ldrb	r2, [r3, #1]
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fc6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fd4:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7adb      	ldrb	r3, [r3, #11]
 8001fe6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a9b      	ldrb	r3, [r3, #10]
 8001fee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ff0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7b5b      	ldrb	r3, [r3, #13]
 8001ff6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ff8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7b9b      	ldrb	r3, [r3, #14]
 8001ffe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002000:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7bdb      	ldrb	r3, [r3, #15]
 8002006:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7a5b      	ldrb	r3, [r3, #9]
 800200e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7a1b      	ldrb	r3, [r3, #8]
 8002016:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002018:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002022:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002024:	6113      	str	r3, [r2, #16]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed90 	.word	0xe000ed90

08002038 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7fe fdba 	bl	8000bb8 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e37d      	b.n	800274c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a66      	ldr	r2, [pc, #408]	@ (80021f0 <HAL_DMA_Init+0x1b8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d04a      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a65      	ldr	r2, [pc, #404]	@ (80021f4 <HAL_DMA_Init+0x1bc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d045      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a63      	ldr	r2, [pc, #396]	@ (80021f8 <HAL_DMA_Init+0x1c0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d040      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a62      	ldr	r2, [pc, #392]	@ (80021fc <HAL_DMA_Init+0x1c4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d03b      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a60      	ldr	r2, [pc, #384]	@ (8002200 <HAL_DMA_Init+0x1c8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d036      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5f      	ldr	r2, [pc, #380]	@ (8002204 <HAL_DMA_Init+0x1cc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d031      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5d      	ldr	r2, [pc, #372]	@ (8002208 <HAL_DMA_Init+0x1d0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02c      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5c      	ldr	r2, [pc, #368]	@ (800220c <HAL_DMA_Init+0x1d4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d027      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002210 <HAL_DMA_Init+0x1d8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d022      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a59      	ldr	r2, [pc, #356]	@ (8002214 <HAL_DMA_Init+0x1dc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d01d      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a57      	ldr	r2, [pc, #348]	@ (8002218 <HAL_DMA_Init+0x1e0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d018      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a56      	ldr	r2, [pc, #344]	@ (800221c <HAL_DMA_Init+0x1e4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a54      	ldr	r2, [pc, #336]	@ (8002220 <HAL_DMA_Init+0x1e8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00e      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a53      	ldr	r2, [pc, #332]	@ (8002224 <HAL_DMA_Init+0x1ec>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a51      	ldr	r2, [pc, #324]	@ (8002228 <HAL_DMA_Init+0x1f0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d004      	beq.n	80020f0 <HAL_DMA_Init+0xb8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a50      	ldr	r2, [pc, #320]	@ (800222c <HAL_DMA_Init+0x1f4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_DMA_Init+0xbc>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_DMA_Init+0xbe>
 80020f4:	2300      	movs	r3, #0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 813c 	beq.w	8002374 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a37      	ldr	r2, [pc, #220]	@ (80021f0 <HAL_DMA_Init+0x1b8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d04a      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a36      	ldr	r2, [pc, #216]	@ (80021f4 <HAL_DMA_Init+0x1bc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d045      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a34      	ldr	r2, [pc, #208]	@ (80021f8 <HAL_DMA_Init+0x1c0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d040      	beq.n	80021ac <HAL_DMA_Init+0x174>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a33      	ldr	r2, [pc, #204]	@ (80021fc <HAL_DMA_Init+0x1c4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d03b      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a31      	ldr	r2, [pc, #196]	@ (8002200 <HAL_DMA_Init+0x1c8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d036      	beq.n	80021ac <HAL_DMA_Init+0x174>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a30      	ldr	r2, [pc, #192]	@ (8002204 <HAL_DMA_Init+0x1cc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d031      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2e      	ldr	r2, [pc, #184]	@ (8002208 <HAL_DMA_Init+0x1d0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d02c      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2d      	ldr	r2, [pc, #180]	@ (800220c <HAL_DMA_Init+0x1d4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d027      	beq.n	80021ac <HAL_DMA_Init+0x174>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a2b      	ldr	r2, [pc, #172]	@ (8002210 <HAL_DMA_Init+0x1d8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d022      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2a      	ldr	r2, [pc, #168]	@ (8002214 <HAL_DMA_Init+0x1dc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d01d      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a28      	ldr	r2, [pc, #160]	@ (8002218 <HAL_DMA_Init+0x1e0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d018      	beq.n	80021ac <HAL_DMA_Init+0x174>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a27      	ldr	r2, [pc, #156]	@ (800221c <HAL_DMA_Init+0x1e4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a25      	ldr	r2, [pc, #148]	@ (8002220 <HAL_DMA_Init+0x1e8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00e      	beq.n	80021ac <HAL_DMA_Init+0x174>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a24      	ldr	r2, [pc, #144]	@ (8002224 <HAL_DMA_Init+0x1ec>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d009      	beq.n	80021ac <HAL_DMA_Init+0x174>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a22      	ldr	r2, [pc, #136]	@ (8002228 <HAL_DMA_Init+0x1f0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d004      	beq.n	80021ac <HAL_DMA_Init+0x174>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a21      	ldr	r2, [pc, #132]	@ (800222c <HAL_DMA_Init+0x1f4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d108      	bne.n	80021be <HAL_DMA_Init+0x186>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e007      	b.n	80021ce <HAL_DMA_Init+0x196>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021ce:	e02f      	b.n	8002230 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d0:	f7fe fcf2 	bl	8000bb8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d928      	bls.n	8002230 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2203      	movs	r2, #3
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e2ad      	b.n	800274c <HAL_DMA_Init+0x714>
 80021f0:	40020010 	.word	0x40020010
 80021f4:	40020028 	.word	0x40020028
 80021f8:	40020040 	.word	0x40020040
 80021fc:	40020058 	.word	0x40020058
 8002200:	40020070 	.word	0x40020070
 8002204:	40020088 	.word	0x40020088
 8002208:	400200a0 	.word	0x400200a0
 800220c:	400200b8 	.word	0x400200b8
 8002210:	40020410 	.word	0x40020410
 8002214:	40020428 	.word	0x40020428
 8002218:	40020440 	.word	0x40020440
 800221c:	40020458 	.word	0x40020458
 8002220:	40020470 	.word	0x40020470
 8002224:	40020488 	.word	0x40020488
 8002228:	400204a0 	.word	0x400204a0
 800222c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1c8      	bne.n	80021d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4b73      	ldr	r3, [pc, #460]	@ (8002418 <HAL_DMA_Init+0x3e0>)
 800224a:	4013      	ands	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002256:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002262:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	2b04      	cmp	r3, #4
 8002282:	d107      	bne.n	8002294 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	4313      	orrs	r3, r2
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b28      	cmp	r3, #40	@ 0x28
 800229a:	d903      	bls.n	80022a4 <HAL_DMA_Init+0x26c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80022a2:	d91f      	bls.n	80022e4 <HAL_DMA_Init+0x2ac>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80022aa:	d903      	bls.n	80022b4 <HAL_DMA_Init+0x27c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b42      	cmp	r3, #66	@ 0x42
 80022b2:	d917      	bls.n	80022e4 <HAL_DMA_Init+0x2ac>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b46      	cmp	r3, #70	@ 0x46
 80022ba:	d903      	bls.n	80022c4 <HAL_DMA_Init+0x28c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b48      	cmp	r3, #72	@ 0x48
 80022c2:	d90f      	bls.n	80022e4 <HAL_DMA_Init+0x2ac>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80022ca:	d903      	bls.n	80022d4 <HAL_DMA_Init+0x29c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b52      	cmp	r3, #82	@ 0x52
 80022d2:	d907      	bls.n	80022e4 <HAL_DMA_Init+0x2ac>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b73      	cmp	r3, #115	@ 0x73
 80022da:	d905      	bls.n	80022e8 <HAL_DMA_Init+0x2b0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b77      	cmp	r3, #119	@ 0x77
 80022e2:	d801      	bhi.n	80022e8 <HAL_DMA_Init+0x2b0>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_DMA_Init+0x2b2>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f023 0307 	bic.w	r3, r3, #7
 800230c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	2b04      	cmp	r3, #4
 800231e:	d117      	bne.n	8002350 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00e      	beq.n	8002350 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 ff0e 	bl	8003154 <DMA_CheckFifoParam>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2240      	movs	r2, #64	@ 0x40
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e1fd      	b.n	800274c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fe49 	bl	8002ff0 <DMA_CalcBaseAndBitshift>
 800235e:	4603      	mov	r3, r0
 8002360:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	223f      	movs	r2, #63	@ 0x3f
 800236c:	409a      	lsls	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	e0fd      	b.n	8002570 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a28      	ldr	r2, [pc, #160]	@ (800241c <HAL_DMA_Init+0x3e4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04a      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a27      	ldr	r2, [pc, #156]	@ (8002420 <HAL_DMA_Init+0x3e8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d045      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a25      	ldr	r2, [pc, #148]	@ (8002424 <HAL_DMA_Init+0x3ec>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d040      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <HAL_DMA_Init+0x3f0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d03b      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a22      	ldr	r2, [pc, #136]	@ (800242c <HAL_DMA_Init+0x3f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a21      	ldr	r2, [pc, #132]	@ (8002430 <HAL_DMA_Init+0x3f8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d031      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002434 <HAL_DMA_Init+0x3fc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02c      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1e      	ldr	r2, [pc, #120]	@ (8002438 <HAL_DMA_Init+0x400>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d027      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <HAL_DMA_Init+0x404>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002440 <HAL_DMA_Init+0x408>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01d      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <HAL_DMA_Init+0x40c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a18      	ldr	r2, [pc, #96]	@ (8002448 <HAL_DMA_Init+0x410>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a16      	ldr	r2, [pc, #88]	@ (800244c <HAL_DMA_Init+0x414>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a15      	ldr	r2, [pc, #84]	@ (8002450 <HAL_DMA_Init+0x418>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <HAL_DMA_Init+0x41c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_Init+0x3dc>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_DMA_Init+0x420>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d123      	bne.n	800245c <HAL_DMA_Init+0x424>
 8002414:	2301      	movs	r3, #1
 8002416:	e022      	b.n	800245e <HAL_DMA_Init+0x426>
 8002418:	fe10803f 	.word	0xfe10803f
 800241c:	48022c08 	.word	0x48022c08
 8002420:	48022c1c 	.word	0x48022c1c
 8002424:	48022c30 	.word	0x48022c30
 8002428:	48022c44 	.word	0x48022c44
 800242c:	48022c58 	.word	0x48022c58
 8002430:	48022c6c 	.word	0x48022c6c
 8002434:	48022c80 	.word	0x48022c80
 8002438:	48022c94 	.word	0x48022c94
 800243c:	58025408 	.word	0x58025408
 8002440:	5802541c 	.word	0x5802541c
 8002444:	58025430 	.word	0x58025430
 8002448:	58025444 	.word	0x58025444
 800244c:	58025458 	.word	0x58025458
 8002450:	5802546c 	.word	0x5802546c
 8002454:	58025480 	.word	0x58025480
 8002458:	58025494 	.word	0x58025494
 800245c:	2300      	movs	r3, #0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d07d      	beq.n	800255e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7f      	ldr	r2, [pc, #508]	@ (8002664 <HAL_DMA_Init+0x62c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d021      	beq.n	80024b0 <HAL_DMA_Init+0x478>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a7d      	ldr	r2, [pc, #500]	@ (8002668 <HAL_DMA_Init+0x630>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01c      	beq.n	80024b0 <HAL_DMA_Init+0x478>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7c      	ldr	r2, [pc, #496]	@ (800266c <HAL_DMA_Init+0x634>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d017      	beq.n	80024b0 <HAL_DMA_Init+0x478>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a7a      	ldr	r2, [pc, #488]	@ (8002670 <HAL_DMA_Init+0x638>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d012      	beq.n	80024b0 <HAL_DMA_Init+0x478>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a79      	ldr	r2, [pc, #484]	@ (8002674 <HAL_DMA_Init+0x63c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00d      	beq.n	80024b0 <HAL_DMA_Init+0x478>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a77      	ldr	r2, [pc, #476]	@ (8002678 <HAL_DMA_Init+0x640>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d008      	beq.n	80024b0 <HAL_DMA_Init+0x478>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a76      	ldr	r2, [pc, #472]	@ (800267c <HAL_DMA_Init+0x644>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d003      	beq.n	80024b0 <HAL_DMA_Init+0x478>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a74      	ldr	r2, [pc, #464]	@ (8002680 <HAL_DMA_Init+0x648>)
 80024ae:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002684 <HAL_DMA_Init+0x64c>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b40      	cmp	r3, #64	@ 0x40
 80024d6:	d008      	beq.n	80024ea <HAL_DMA_Init+0x4b2>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b80      	cmp	r3, #128	@ 0x80
 80024de:	d102      	bne.n	80024e6 <HAL_DMA_Init+0x4ae>
 80024e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024e4:	e002      	b.n	80024ec <HAL_DMA_Init+0x4b4>
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_DMA_Init+0x4b4>
 80024ea:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68d2      	ldr	r2, [r2, #12]
 80024f0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024f2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002502:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800250a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002512:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800251a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4b55      	ldr	r3, [pc, #340]	@ (8002688 <HAL_DMA_Init+0x650>)
 8002532:	4413      	add	r3, r2
 8002534:	4a55      	ldr	r2, [pc, #340]	@ (800268c <HAL_DMA_Init+0x654>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	009a      	lsls	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fd54 	bl	8002ff0 <DMA_CalcBaseAndBitshift>
 8002548:	4603      	mov	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2201      	movs	r2, #1
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	e008      	b.n	8002570 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2240      	movs	r2, #64	@ 0x40
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2203      	movs	r2, #3
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0ed      	b.n	800274c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a46      	ldr	r2, [pc, #280]	@ (8002690 <HAL_DMA_Init+0x658>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d072      	beq.n	8002660 <HAL_DMA_Init+0x628>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a45      	ldr	r2, [pc, #276]	@ (8002694 <HAL_DMA_Init+0x65c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d06d      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a43      	ldr	r2, [pc, #268]	@ (8002698 <HAL_DMA_Init+0x660>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d068      	beq.n	8002660 <HAL_DMA_Init+0x628>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a42      	ldr	r2, [pc, #264]	@ (800269c <HAL_DMA_Init+0x664>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d063      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a40      	ldr	r2, [pc, #256]	@ (80026a0 <HAL_DMA_Init+0x668>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d05e      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3f      	ldr	r2, [pc, #252]	@ (80026a4 <HAL_DMA_Init+0x66c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d059      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a3d      	ldr	r2, [pc, #244]	@ (80026a8 <HAL_DMA_Init+0x670>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d054      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a3c      	ldr	r2, [pc, #240]	@ (80026ac <HAL_DMA_Init+0x674>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d04f      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a3a      	ldr	r2, [pc, #232]	@ (80026b0 <HAL_DMA_Init+0x678>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d04a      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a39      	ldr	r2, [pc, #228]	@ (80026b4 <HAL_DMA_Init+0x67c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d045      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a37      	ldr	r2, [pc, #220]	@ (80026b8 <HAL_DMA_Init+0x680>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d040      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a36      	ldr	r2, [pc, #216]	@ (80026bc <HAL_DMA_Init+0x684>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d03b      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a34      	ldr	r2, [pc, #208]	@ (80026c0 <HAL_DMA_Init+0x688>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d036      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a33      	ldr	r2, [pc, #204]	@ (80026c4 <HAL_DMA_Init+0x68c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d031      	beq.n	8002660 <HAL_DMA_Init+0x628>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a31      	ldr	r2, [pc, #196]	@ (80026c8 <HAL_DMA_Init+0x690>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02c      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_DMA_Init+0x694>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d027      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <HAL_DMA_Init+0x62c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d022      	beq.n	8002660 <HAL_DMA_Init+0x628>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <HAL_DMA_Init+0x630>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d01d      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a10      	ldr	r2, [pc, #64]	@ (800266c <HAL_DMA_Init+0x634>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d018      	beq.n	8002660 <HAL_DMA_Init+0x628>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a0f      	ldr	r2, [pc, #60]	@ (8002670 <HAL_DMA_Init+0x638>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <HAL_DMA_Init+0x63c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00e      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a0c      	ldr	r2, [pc, #48]	@ (8002678 <HAL_DMA_Init+0x640>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_DMA_Init+0x628>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <HAL_DMA_Init+0x644>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_DMA_Init+0x628>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_DMA_Init+0x648>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d137      	bne.n	80026d0 <HAL_DMA_Init+0x698>
 8002660:	2301      	movs	r3, #1
 8002662:	e036      	b.n	80026d2 <HAL_DMA_Init+0x69a>
 8002664:	58025408 	.word	0x58025408
 8002668:	5802541c 	.word	0x5802541c
 800266c:	58025430 	.word	0x58025430
 8002670:	58025444 	.word	0x58025444
 8002674:	58025458 	.word	0x58025458
 8002678:	5802546c 	.word	0x5802546c
 800267c:	58025480 	.word	0x58025480
 8002680:	58025494 	.word	0x58025494
 8002684:	fffe000f 	.word	0xfffe000f
 8002688:	a7fdabf8 	.word	0xa7fdabf8
 800268c:	cccccccd 	.word	0xcccccccd
 8002690:	40020010 	.word	0x40020010
 8002694:	40020028 	.word	0x40020028
 8002698:	40020040 	.word	0x40020040
 800269c:	40020058 	.word	0x40020058
 80026a0:	40020070 	.word	0x40020070
 80026a4:	40020088 	.word	0x40020088
 80026a8:	400200a0 	.word	0x400200a0
 80026ac:	400200b8 	.word	0x400200b8
 80026b0:	40020410 	.word	0x40020410
 80026b4:	40020428 	.word	0x40020428
 80026b8:	40020440 	.word	0x40020440
 80026bc:	40020458 	.word	0x40020458
 80026c0:	40020470 	.word	0x40020470
 80026c4:	40020488 	.word	0x40020488
 80026c8:	400204a0 	.word	0x400204a0
 80026cc:	400204b8 	.word	0x400204b8
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d032      	beq.n	800273c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fdb8 	bl	800324c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b80      	cmp	r3, #128	@ 0x80
 80026e2:	d102      	bne.n	80026ea <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80026fe:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_DMA_Init+0x6f2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d80c      	bhi.n	800272a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fe35 	bl	8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	e008      	b.n	800273c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e226      	b.n	8002bbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_DMA_Start_IT+0x2a>
 800277a:	2302      	movs	r3, #2
 800277c:	e21f      	b.n	8002bbe <HAL_DMA_Start_IT+0x46a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	f040 820a 	bne.w	8002ba8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a68      	ldr	r2, [pc, #416]	@ (8002948 <HAL_DMA_Start_IT+0x1f4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d04a      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a66      	ldr	r2, [pc, #408]	@ (800294c <HAL_DMA_Start_IT+0x1f8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d045      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a65      	ldr	r2, [pc, #404]	@ (8002950 <HAL_DMA_Start_IT+0x1fc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d040      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a63      	ldr	r2, [pc, #396]	@ (8002954 <HAL_DMA_Start_IT+0x200>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d03b      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a62      	ldr	r2, [pc, #392]	@ (8002958 <HAL_DMA_Start_IT+0x204>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d036      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a60      	ldr	r2, [pc, #384]	@ (800295c <HAL_DMA_Start_IT+0x208>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d031      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_DMA_Start_IT+0x20c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d02c      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002964 <HAL_DMA_Start_IT+0x210>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d027      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_DMA_Start_IT+0x214>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5a      	ldr	r2, [pc, #360]	@ (800296c <HAL_DMA_Start_IT+0x218>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01d      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a59      	ldr	r2, [pc, #356]	@ (8002970 <HAL_DMA_Start_IT+0x21c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d018      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a57      	ldr	r2, [pc, #348]	@ (8002974 <HAL_DMA_Start_IT+0x220>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <HAL_DMA_Start_IT+0x224>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00e      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a54      	ldr	r2, [pc, #336]	@ (800297c <HAL_DMA_Start_IT+0x228>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a53      	ldr	r2, [pc, #332]	@ (8002980 <HAL_DMA_Start_IT+0x22c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a51      	ldr	r2, [pc, #324]	@ (8002984 <HAL_DMA_Start_IT+0x230>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <HAL_DMA_Start_IT+0x100>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <HAL_DMA_Start_IT+0x110>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f9dc 	bl	8002c28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_DMA_Start_IT+0x1f4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d04a      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	@ (800294c <HAL_DMA_Start_IT+0x1f8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d045      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <HAL_DMA_Start_IT+0x1fc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d040      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_DMA_Start_IT+0x200>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d03b      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <HAL_DMA_Start_IT+0x204>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d036      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	@ (800295c <HAL_DMA_Start_IT+0x208>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d031      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <HAL_DMA_Start_IT+0x20c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d02c      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <HAL_DMA_Start_IT+0x210>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d027      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <HAL_DMA_Start_IT+0x214>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d022      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	@ (800296c <HAL_DMA_Start_IT+0x218>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d01d      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	@ (8002970 <HAL_DMA_Start_IT+0x21c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d018      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	@ (8002974 <HAL_DMA_Start_IT+0x220>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d013      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <HAL_DMA_Start_IT+0x224>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00e      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	@ (800297c <HAL_DMA_Start_IT+0x228>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <HAL_DMA_Start_IT+0x22c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <HAL_DMA_Start_IT+0x230>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_DMA_Start_IT+0x1c0>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_DMA_Start_IT+0x1c2>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 021e 	bic.w	r2, r3, #30
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0216 	orr.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03e      	beq.n	80029b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0208 	orr.w	r2, r2, #8
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e035      	b.n	80029b4 <HAL_DMA_Start_IT+0x260>
 8002948:	40020010 	.word	0x40020010
 800294c:	40020028 	.word	0x40020028
 8002950:	40020040 	.word	0x40020040
 8002954:	40020058 	.word	0x40020058
 8002958:	40020070 	.word	0x40020070
 800295c:	40020088 	.word	0x40020088
 8002960:	400200a0 	.word	0x400200a0
 8002964:	400200b8 	.word	0x400200b8
 8002968:	40020410 	.word	0x40020410
 800296c:	40020428 	.word	0x40020428
 8002970:	40020440 	.word	0x40020440
 8002974:	40020458 	.word	0x40020458
 8002978:	40020470 	.word	0x40020470
 800297c:	40020488 	.word	0x40020488
 8002980:	400204a0 	.word	0x400204a0
 8002984:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 020e 	bic.w	r2, r3, #14
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 020a 	orr.w	r2, r2, #10
 800299a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0204 	orr.w	r2, r2, #4
 80029b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a83      	ldr	r2, [pc, #524]	@ (8002bc8 <HAL_DMA_Start_IT+0x474>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d072      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a82      	ldr	r2, [pc, #520]	@ (8002bcc <HAL_DMA_Start_IT+0x478>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d06d      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a80      	ldr	r2, [pc, #512]	@ (8002bd0 <HAL_DMA_Start_IT+0x47c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d068      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7f      	ldr	r2, [pc, #508]	@ (8002bd4 <HAL_DMA_Start_IT+0x480>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d063      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd8 <HAL_DMA_Start_IT+0x484>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d05e      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7c      	ldr	r2, [pc, #496]	@ (8002bdc <HAL_DMA_Start_IT+0x488>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d059      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7a      	ldr	r2, [pc, #488]	@ (8002be0 <HAL_DMA_Start_IT+0x48c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d054      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a79      	ldr	r2, [pc, #484]	@ (8002be4 <HAL_DMA_Start_IT+0x490>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d04f      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a77      	ldr	r2, [pc, #476]	@ (8002be8 <HAL_DMA_Start_IT+0x494>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d04a      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a76      	ldr	r2, [pc, #472]	@ (8002bec <HAL_DMA_Start_IT+0x498>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d045      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a74      	ldr	r2, [pc, #464]	@ (8002bf0 <HAL_DMA_Start_IT+0x49c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d040      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a73      	ldr	r2, [pc, #460]	@ (8002bf4 <HAL_DMA_Start_IT+0x4a0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d03b      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a71      	ldr	r2, [pc, #452]	@ (8002bf8 <HAL_DMA_Start_IT+0x4a4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d036      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a70      	ldr	r2, [pc, #448]	@ (8002bfc <HAL_DMA_Start_IT+0x4a8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d031      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_DMA_Start_IT+0x4ac>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d02c      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c04 <HAL_DMA_Start_IT+0x4b0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d027      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6b      	ldr	r2, [pc, #428]	@ (8002c08 <HAL_DMA_Start_IT+0x4b4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6a      	ldr	r2, [pc, #424]	@ (8002c0c <HAL_DMA_Start_IT+0x4b8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d01d      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a68      	ldr	r2, [pc, #416]	@ (8002c10 <HAL_DMA_Start_IT+0x4bc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d018      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a67      	ldr	r2, [pc, #412]	@ (8002c14 <HAL_DMA_Start_IT+0x4c0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a65      	ldr	r2, [pc, #404]	@ (8002c18 <HAL_DMA_Start_IT+0x4c4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a64      	ldr	r2, [pc, #400]	@ (8002c1c <HAL_DMA_Start_IT+0x4c8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a62      	ldr	r2, [pc, #392]	@ (8002c20 <HAL_DMA_Start_IT+0x4cc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a61      	ldr	r2, [pc, #388]	@ (8002c24 <HAL_DMA_Start_IT+0x4d0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_Start_IT+0x354>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_Start_IT+0x356>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01a      	beq.n	8002ae4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a37      	ldr	r2, [pc, #220]	@ (8002bc8 <HAL_DMA_Start_IT+0x474>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d04a      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a36      	ldr	r2, [pc, #216]	@ (8002bcc <HAL_DMA_Start_IT+0x478>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d045      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a34      	ldr	r2, [pc, #208]	@ (8002bd0 <HAL_DMA_Start_IT+0x47c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d040      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a33      	ldr	r2, [pc, #204]	@ (8002bd4 <HAL_DMA_Start_IT+0x480>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d03b      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a31      	ldr	r2, [pc, #196]	@ (8002bd8 <HAL_DMA_Start_IT+0x484>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d036      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a30      	ldr	r2, [pc, #192]	@ (8002bdc <HAL_DMA_Start_IT+0x488>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2e      	ldr	r2, [pc, #184]	@ (8002be0 <HAL_DMA_Start_IT+0x48c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02c      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8002be4 <HAL_DMA_Start_IT+0x490>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d027      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2b      	ldr	r2, [pc, #172]	@ (8002be8 <HAL_DMA_Start_IT+0x494>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d022      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2a      	ldr	r2, [pc, #168]	@ (8002bec <HAL_DMA_Start_IT+0x498>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01d      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a28      	ldr	r2, [pc, #160]	@ (8002bf0 <HAL_DMA_Start_IT+0x49c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <HAL_DMA_Start_IT+0x4a0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a25      	ldr	r2, [pc, #148]	@ (8002bf8 <HAL_DMA_Start_IT+0x4a4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00e      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a24      	ldr	r2, [pc, #144]	@ (8002bfc <HAL_DMA_Start_IT+0x4a8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a22      	ldr	r2, [pc, #136]	@ (8002c00 <HAL_DMA_Start_IT+0x4ac>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a21      	ldr	r2, [pc, #132]	@ (8002c04 <HAL_DMA_Start_IT+0x4b0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <HAL_DMA_Start_IT+0x442>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e012      	b.n	8002bbc <HAL_DMA_Start_IT+0x468>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e009      	b.n	8002bbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40020028 	.word	0x40020028
 8002bd0:	40020040 	.word	0x40020040
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	40020070 	.word	0x40020070
 8002bdc:	40020088 	.word	0x40020088
 8002be0:	400200a0 	.word	0x400200a0
 8002be4:	400200b8 	.word	0x400200b8
 8002be8:	40020410 	.word	0x40020410
 8002bec:	40020428 	.word	0x40020428
 8002bf0:	40020440 	.word	0x40020440
 8002bf4:	40020458 	.word	0x40020458
 8002bf8:	40020470 	.word	0x40020470
 8002bfc:	40020488 	.word	0x40020488
 8002c00:	400204a0 	.word	0x400204a0
 8002c04:	400204b8 	.word	0x400204b8
 8002c08:	58025408 	.word	0x58025408
 8002c0c:	5802541c 	.word	0x5802541c
 8002c10:	58025430 	.word	0x58025430
 8002c14:	58025444 	.word	0x58025444
 8002c18:	58025458 	.word	0x58025458
 8002c1c:	5802546c 	.word	0x5802546c
 8002c20:	58025480 	.word	0x58025480
 8002c24:	58025494 	.word	0x58025494

08002c28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7f      	ldr	r2, [pc, #508]	@ (8002e44 <DMA_SetConfig+0x21c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d072      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7d      	ldr	r2, [pc, #500]	@ (8002e48 <DMA_SetConfig+0x220>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d06d      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e4c <DMA_SetConfig+0x224>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d068      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7a      	ldr	r2, [pc, #488]	@ (8002e50 <DMA_SetConfig+0x228>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d063      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a79      	ldr	r2, [pc, #484]	@ (8002e54 <DMA_SetConfig+0x22c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d05e      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a77      	ldr	r2, [pc, #476]	@ (8002e58 <DMA_SetConfig+0x230>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d059      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a76      	ldr	r2, [pc, #472]	@ (8002e5c <DMA_SetConfig+0x234>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d054      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a74      	ldr	r2, [pc, #464]	@ (8002e60 <DMA_SetConfig+0x238>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d04f      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a73      	ldr	r2, [pc, #460]	@ (8002e64 <DMA_SetConfig+0x23c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d04a      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a71      	ldr	r2, [pc, #452]	@ (8002e68 <DMA_SetConfig+0x240>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d045      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a70      	ldr	r2, [pc, #448]	@ (8002e6c <DMA_SetConfig+0x244>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d040      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e70 <DMA_SetConfig+0x248>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d03b      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6d      	ldr	r2, [pc, #436]	@ (8002e74 <DMA_SetConfig+0x24c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d036      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e78 <DMA_SetConfig+0x250>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d031      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6a      	ldr	r2, [pc, #424]	@ (8002e7c <DMA_SetConfig+0x254>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d02c      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a68      	ldr	r2, [pc, #416]	@ (8002e80 <DMA_SetConfig+0x258>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d027      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a67      	ldr	r2, [pc, #412]	@ (8002e84 <DMA_SetConfig+0x25c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d022      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a65      	ldr	r2, [pc, #404]	@ (8002e88 <DMA_SetConfig+0x260>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01d      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a64      	ldr	r2, [pc, #400]	@ (8002e8c <DMA_SetConfig+0x264>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d018      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a62      	ldr	r2, [pc, #392]	@ (8002e90 <DMA_SetConfig+0x268>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a61      	ldr	r2, [pc, #388]	@ (8002e94 <DMA_SetConfig+0x26c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00e      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5f      	ldr	r2, [pc, #380]	@ (8002e98 <DMA_SetConfig+0x270>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5e      	ldr	r2, [pc, #376]	@ (8002e9c <DMA_SetConfig+0x274>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <DMA_SetConfig+0x10a>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea0 <DMA_SetConfig+0x278>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <DMA_SetConfig+0x10e>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <DMA_SetConfig+0x110>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a39      	ldr	r2, [pc, #228]	@ (8002e44 <DMA_SetConfig+0x21c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d04a      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a38      	ldr	r2, [pc, #224]	@ (8002e48 <DMA_SetConfig+0x220>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d045      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a36      	ldr	r2, [pc, #216]	@ (8002e4c <DMA_SetConfig+0x224>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d040      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a35      	ldr	r2, [pc, #212]	@ (8002e50 <DMA_SetConfig+0x228>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d03b      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a33      	ldr	r2, [pc, #204]	@ (8002e54 <DMA_SetConfig+0x22c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d036      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a32      	ldr	r2, [pc, #200]	@ (8002e58 <DMA_SetConfig+0x230>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d031      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a30      	ldr	r2, [pc, #192]	@ (8002e5c <DMA_SetConfig+0x234>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02c      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2f      	ldr	r2, [pc, #188]	@ (8002e60 <DMA_SetConfig+0x238>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d027      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2d      	ldr	r2, [pc, #180]	@ (8002e64 <DMA_SetConfig+0x23c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e68 <DMA_SetConfig+0x240>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01d      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e6c <DMA_SetConfig+0x244>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a29      	ldr	r2, [pc, #164]	@ (8002e70 <DMA_SetConfig+0x248>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <DMA_SetConfig+0x24c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a26      	ldr	r2, [pc, #152]	@ (8002e78 <DMA_SetConfig+0x250>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d009      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <DMA_SetConfig+0x254>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <DMA_SetConfig+0x1d0>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <DMA_SetConfig+0x258>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <DMA_SetConfig+0x1d4>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <DMA_SetConfig+0x1d6>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d059      	beq.n	8002eb6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	223f      	movs	r2, #63	@ 0x3f
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b40      	cmp	r3, #64	@ 0x40
 8002e30:	d138      	bne.n	8002ea4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e42:	e0ae      	b.n	8002fa2 <DMA_SetConfig+0x37a>
 8002e44:	40020010 	.word	0x40020010
 8002e48:	40020028 	.word	0x40020028
 8002e4c:	40020040 	.word	0x40020040
 8002e50:	40020058 	.word	0x40020058
 8002e54:	40020070 	.word	0x40020070
 8002e58:	40020088 	.word	0x40020088
 8002e5c:	400200a0 	.word	0x400200a0
 8002e60:	400200b8 	.word	0x400200b8
 8002e64:	40020410 	.word	0x40020410
 8002e68:	40020428 	.word	0x40020428
 8002e6c:	40020440 	.word	0x40020440
 8002e70:	40020458 	.word	0x40020458
 8002e74:	40020470 	.word	0x40020470
 8002e78:	40020488 	.word	0x40020488
 8002e7c:	400204a0 	.word	0x400204a0
 8002e80:	400204b8 	.word	0x400204b8
 8002e84:	58025408 	.word	0x58025408
 8002e88:	5802541c 	.word	0x5802541c
 8002e8c:	58025430 	.word	0x58025430
 8002e90:	58025444 	.word	0x58025444
 8002e94:	58025458 	.word	0x58025458
 8002e98:	5802546c 	.word	0x5802546c
 8002e9c:	58025480 	.word	0x58025480
 8002ea0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
}
 8002eb4:	e075      	b.n	8002fa2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb0 <DMA_SetConfig+0x388>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb4 <DMA_SetConfig+0x38c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3a      	ldr	r2, [pc, #232]	@ (8002fb8 <DMA_SetConfig+0x390>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a38      	ldr	r2, [pc, #224]	@ (8002fbc <DMA_SetConfig+0x394>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a37      	ldr	r2, [pc, #220]	@ (8002fc0 <DMA_SetConfig+0x398>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a35      	ldr	r2, [pc, #212]	@ (8002fc4 <DMA_SetConfig+0x39c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a34      	ldr	r2, [pc, #208]	@ (8002fc8 <DMA_SetConfig+0x3a0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a32      	ldr	r2, [pc, #200]	@ (8002fcc <DMA_SetConfig+0x3a4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a31      	ldr	r2, [pc, #196]	@ (8002fd0 <DMA_SetConfig+0x3a8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd4 <DMA_SetConfig+0x3ac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd8 <DMA_SetConfig+0x3b0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2c      	ldr	r2, [pc, #176]	@ (8002fdc <DMA_SetConfig+0x3b4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <DMA_SetConfig+0x3b8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a29      	ldr	r2, [pc, #164]	@ (8002fe4 <DMA_SetConfig+0x3bc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a28      	ldr	r2, [pc, #160]	@ (8002fe8 <DMA_SetConfig+0x3c0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <DMA_SetConfig+0x32e>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a26      	ldr	r2, [pc, #152]	@ (8002fec <DMA_SetConfig+0x3c4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <DMA_SetConfig+0x332>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <DMA_SetConfig+0x334>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2201      	movs	r2, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b40      	cmp	r3, #64	@ 0x40
 8002f7e:	d108      	bne.n	8002f92 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
}
 8002f90:	e007      	b.n	8002fa2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	60da      	str	r2, [r3, #12]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	48022c08 	.word	0x48022c08
 8002fb4:	48022c1c 	.word	0x48022c1c
 8002fb8:	48022c30 	.word	0x48022c30
 8002fbc:	48022c44 	.word	0x48022c44
 8002fc0:	48022c58 	.word	0x48022c58
 8002fc4:	48022c6c 	.word	0x48022c6c
 8002fc8:	48022c80 	.word	0x48022c80
 8002fcc:	48022c94 	.word	0x48022c94
 8002fd0:	58025408 	.word	0x58025408
 8002fd4:	5802541c 	.word	0x5802541c
 8002fd8:	58025430 	.word	0x58025430
 8002fdc:	58025444 	.word	0x58025444
 8002fe0:	58025458 	.word	0x58025458
 8002fe4:	5802546c 	.word	0x5802546c
 8002fe8:	58025480 	.word	0x58025480
 8002fec:	58025494 	.word	0x58025494

08002ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	@ (8003108 <DMA_CalcBaseAndBitshift+0x118>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d04a      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a41      	ldr	r2, [pc, #260]	@ (800310c <DMA_CalcBaseAndBitshift+0x11c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d045      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <DMA_CalcBaseAndBitshift+0x120>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d040      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3e      	ldr	r2, [pc, #248]	@ (8003114 <DMA_CalcBaseAndBitshift+0x124>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d03b      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3c      	ldr	r2, [pc, #240]	@ (8003118 <DMA_CalcBaseAndBitshift+0x128>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d036      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3b      	ldr	r2, [pc, #236]	@ (800311c <DMA_CalcBaseAndBitshift+0x12c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d031      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a39      	ldr	r2, [pc, #228]	@ (8003120 <DMA_CalcBaseAndBitshift+0x130>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02c      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a38      	ldr	r2, [pc, #224]	@ (8003124 <DMA_CalcBaseAndBitshift+0x134>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d027      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a36      	ldr	r2, [pc, #216]	@ (8003128 <DMA_CalcBaseAndBitshift+0x138>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d022      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a35      	ldr	r2, [pc, #212]	@ (800312c <DMA_CalcBaseAndBitshift+0x13c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d01d      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a33      	ldr	r2, [pc, #204]	@ (8003130 <DMA_CalcBaseAndBitshift+0x140>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a32      	ldr	r2, [pc, #200]	@ (8003134 <DMA_CalcBaseAndBitshift+0x144>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a30      	ldr	r2, [pc, #192]	@ (8003138 <DMA_CalcBaseAndBitshift+0x148>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2f      	ldr	r2, [pc, #188]	@ (800313c <DMA_CalcBaseAndBitshift+0x14c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <DMA_CalcBaseAndBitshift+0x150>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <DMA_CalcBaseAndBitshift+0xa8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <DMA_CalcBaseAndBitshift+0x154>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <DMA_CalcBaseAndBitshift+0xac>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <DMA_CalcBaseAndBitshift+0xae>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3b10      	subs	r3, #16
 80030aa:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <DMA_CalcBaseAndBitshift+0x158>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	4a24      	ldr	r2, [pc, #144]	@ (800314c <DMA_CalcBaseAndBitshift+0x15c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d908      	bls.n	80030dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <DMA_CalcBaseAndBitshift+0x160>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	1d1a      	adds	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80030da:	e00d      	b.n	80030f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <DMA_CalcBaseAndBitshift+0x160>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ea:	e005      	b.n	80030f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40020010 	.word	0x40020010
 800310c:	40020028 	.word	0x40020028
 8003110:	40020040 	.word	0x40020040
 8003114:	40020058 	.word	0x40020058
 8003118:	40020070 	.word	0x40020070
 800311c:	40020088 	.word	0x40020088
 8003120:	400200a0 	.word	0x400200a0
 8003124:	400200b8 	.word	0x400200b8
 8003128:	40020410 	.word	0x40020410
 800312c:	40020428 	.word	0x40020428
 8003130:	40020440 	.word	0x40020440
 8003134:	40020458 	.word	0x40020458
 8003138:	40020470 	.word	0x40020470
 800313c:	40020488 	.word	0x40020488
 8003140:	400204a0 	.word	0x400204a0
 8003144:	400204b8 	.word	0x400204b8
 8003148:	aaaaaaab 	.word	0xaaaaaaab
 800314c:	08008160 	.word	0x08008160
 8003150:	fffffc00 	.word	0xfffffc00

08003154 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d120      	bne.n	80031aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	2b03      	cmp	r3, #3
 800316e:	d858      	bhi.n	8003222 <DMA_CheckFifoParam+0xce>
 8003170:	a201      	add	r2, pc, #4	@ (adr r2, 8003178 <DMA_CheckFifoParam+0x24>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	08003189 	.word	0x08003189
 800317c:	0800319b 	.word	0x0800319b
 8003180:	08003189 	.word	0x08003189
 8003184:	08003223 	.word	0x08003223
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d048      	beq.n	8003226 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003198:	e045      	b.n	8003226 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031a2:	d142      	bne.n	800322a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031a8:	e03f      	b.n	800322a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b2:	d123      	bne.n	80031fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d838      	bhi.n	800322e <DMA_CheckFifoParam+0xda>
 80031bc:	a201      	add	r2, pc, #4	@ (adr r2, 80031c4 <DMA_CheckFifoParam+0x70>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031db 	.word	0x080031db
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	080031ed 	.word	0x080031ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
        break;
 80031d8:	e030      	b.n	800323c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d025      	beq.n	8003232 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031ea:	e022      	b.n	8003232 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031f4:	d11f      	bne.n	8003236 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031fa:	e01c      	b.n	8003236 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	2b02      	cmp	r3, #2
 8003202:	d902      	bls.n	800320a <DMA_CheckFifoParam+0xb6>
 8003204:	2b03      	cmp	r3, #3
 8003206:	d003      	beq.n	8003210 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003208:	e018      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
        break;
 800320e:	e015      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
    break;
 8003220:	e00b      	b.n	800323a <DMA_CheckFifoParam+0xe6>
        break;
 8003222:	bf00      	nop
 8003224:	e00a      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 8003226:	bf00      	nop
 8003228:	e008      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 800322a:	bf00      	nop
 800322c:	e006      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <DMA_CheckFifoParam+0xe8>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <DMA_CheckFifoParam+0xe8>
    break;
 800323a:	bf00      	nop
    }
  }

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop

0800324c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a38      	ldr	r2, [pc, #224]	@ (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a36      	ldr	r2, [pc, #216]	@ (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a35      	ldr	r2, [pc, #212]	@ (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a33      	ldr	r2, [pc, #204]	@ (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a32      	ldr	r2, [pc, #200]	@ (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a30      	ldr	r2, [pc, #192]	@ (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2f      	ldr	r2, [pc, #188]	@ (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2d      	ldr	r2, [pc, #180]	@ (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01a      	beq.n	80032ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3b08      	subs	r3, #8
 80032bc:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a24      	ldr	r2, [pc, #144]	@ (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80032d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032e8:	e024      	b.n	8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3b10      	subs	r3, #16
 80032f2:	4a1e      	ldr	r2, [pc, #120]	@ (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d806      	bhi.n	8003312 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a1b      	ldr	r2, [pc, #108]	@ (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d902      	bls.n	8003312 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3308      	adds	r3, #8
 8003310:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4b18      	ldr	r3, [pc, #96]	@ (8003378 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a16      	ldr	r2, [pc, #88]	@ (800337c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003324:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	58025408 	.word	0x58025408
 8003344:	5802541c 	.word	0x5802541c
 8003348:	58025430 	.word	0x58025430
 800334c:	58025444 	.word	0x58025444
 8003350:	58025458 	.word	0x58025458
 8003354:	5802546c 	.word	0x5802546c
 8003358:	58025480 	.word	0x58025480
 800335c:	58025494 	.word	0x58025494
 8003360:	cccccccd 	.word	0xcccccccd
 8003364:	16009600 	.word	0x16009600
 8003368:	58025880 	.word	0x58025880
 800336c:	aaaaaaab 	.word	0xaaaaaaab
 8003370:	400204b8 	.word	0x400204b8
 8003374:	4002040f 	.word	0x4002040f
 8003378:	10008200 	.word	0x10008200
 800337c:	40020880 	.word	0x40020880

08003380 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04a      	beq.n	800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d847      	bhi.n	800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a25      	ldr	r2, [pc, #148]	@ (8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a24      	ldr	r2, [pc, #144]	@ (800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a21      	ldr	r2, [pc, #132]	@ (8003444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a15      	ldr	r2, [pc, #84]	@ (800345c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003408:	671a      	str	r2, [r3, #112]	@ 0x70
 800340a:	e009      	b.n	8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a11      	ldr	r2, [pc, #68]	@ (8003464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800341e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3b01      	subs	r3, #1
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	58025408 	.word	0x58025408
 800343c:	5802541c 	.word	0x5802541c
 8003440:	58025430 	.word	0x58025430
 8003444:	58025444 	.word	0x58025444
 8003448:	58025458 	.word	0x58025458
 800344c:	5802546c 	.word	0x5802546c
 8003450:	58025480 	.word	0x58025480
 8003454:	58025494 	.word	0x58025494
 8003458:	1600963f 	.word	0x1600963f
 800345c:	58025940 	.word	0x58025940
 8003460:	1000823f 	.word	0x1000823f
 8003464:	40020940 	.word	0x40020940

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	@ 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003476:	4b89      	ldr	r3, [pc, #548]	@ (800369c <HAL_GPIO_Init+0x234>)
 8003478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800347a:	e194      	b.n	80037a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8186 	beq.w	80037a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d005      	beq.n	80034ac <HAL_GPIO_Init+0x44>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d130      	bne.n	800350e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e2:	2201      	movs	r2, #1
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f003 0201 	and.w	r2, r3, #1
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b03      	cmp	r3, #3
 8003518:	d017      	beq.n	800354a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d123      	bne.n	800359e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0203 	and.w	r2, r3, #3
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80e0 	beq.w	80037a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e0:	4b2f      	ldr	r3, [pc, #188]	@ (80036a0 <HAL_GPIO_Init+0x238>)
 80035e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80035e6:	4a2e      	ldr	r2, [pc, #184]	@ (80036a0 <HAL_GPIO_Init+0x238>)
 80035e8:	f043 0302 	orr.w	r3, r3, #2
 80035ec:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80035f0:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_GPIO_Init+0x238>)
 80035f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035fe:	4a29      	ldr	r2, [pc, #164]	@ (80036a4 <HAL_GPIO_Init+0x23c>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a20      	ldr	r2, [pc, #128]	@ (80036a8 <HAL_GPIO_Init+0x240>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d052      	beq.n	80036d0 <HAL_GPIO_Init+0x268>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1f      	ldr	r2, [pc, #124]	@ (80036ac <HAL_GPIO_Init+0x244>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d031      	beq.n	8003696 <HAL_GPIO_Init+0x22e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1e      	ldr	r2, [pc, #120]	@ (80036b0 <HAL_GPIO_Init+0x248>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02b      	beq.n	8003692 <HAL_GPIO_Init+0x22a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <HAL_GPIO_Init+0x24c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d025      	beq.n	800368e <HAL_GPIO_Init+0x226>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <HAL_GPIO_Init+0x250>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01f      	beq.n	800368a <HAL_GPIO_Init+0x222>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1b      	ldr	r2, [pc, #108]	@ (80036bc <HAL_GPIO_Init+0x254>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_Init+0x21e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <HAL_GPIO_Init+0x258>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0x21a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <HAL_GPIO_Init+0x25c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_Init+0x216>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a18      	ldr	r2, [pc, #96]	@ (80036c8 <HAL_GPIO_Init+0x260>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x212>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a17      	ldr	r2, [pc, #92]	@ (80036cc <HAL_GPIO_Init+0x264>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_Init+0x20e>
 8003672:	2309      	movs	r3, #9
 8003674:	e02d      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 8003676:	230a      	movs	r3, #10
 8003678:	e02b      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 800367a:	2308      	movs	r3, #8
 800367c:	e029      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 800367e:	2307      	movs	r3, #7
 8003680:	e027      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 8003682:	2306      	movs	r3, #6
 8003684:	e025      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 8003686:	2305      	movs	r3, #5
 8003688:	e023      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 800368a:	2304      	movs	r3, #4
 800368c:	e021      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 800368e:	2303      	movs	r3, #3
 8003690:	e01f      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 8003692:	2302      	movs	r3, #2
 8003694:	e01d      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 8003696:	2301      	movs	r3, #1
 8003698:	e01b      	b.n	80036d2 <HAL_GPIO_Init+0x26a>
 800369a:	bf00      	nop
 800369c:	58000080 	.word	0x58000080
 80036a0:	58024400 	.word	0x58024400
 80036a4:	58000400 	.word	0x58000400
 80036a8:	58020000 	.word	0x58020000
 80036ac:	58020400 	.word	0x58020400
 80036b0:	58020800 	.word	0x58020800
 80036b4:	58020c00 	.word	0x58020c00
 80036b8:	58021000 	.word	0x58021000
 80036bc:	58021400 	.word	0x58021400
 80036c0:	58021800 	.word	0x58021800
 80036c4:	58021c00 	.word	0x58021c00
 80036c8:	58022000 	.word	0x58022000
 80036cc:	58022400 	.word	0x58022400
 80036d0:	2300      	movs	r3, #0
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	f002 0203 	and.w	r2, r2, #3
 80036d8:	0092      	lsls	r2, r2, #2
 80036da:	4093      	lsls	r3, r2
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e2:	4938      	ldr	r1, [pc, #224]	@ (80037c4 <HAL_GPIO_Init+0x35c>)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3302      	adds	r3, #2
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003716:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800371e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f47f ae63 	bne.w	800347c <HAL_GPIO_Init+0x14>
  }
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	3724      	adds	r7, #36	@ 0x24
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	58000400 	.word	0x58000400

080037c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_PWREx_ConfigSupply+0x70>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d00a      	beq.n	80037f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037dc:	4b16      	ldr	r3, [pc, #88]	@ (8003838 <HAL_PWREx_ConfigSupply+0x70>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d001      	beq.n	80037ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e01f      	b.n	800382e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e01d      	b.n	800382e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037f2:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <HAL_PWREx_ConfigSupply+0x70>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f023 0207 	bic.w	r2, r3, #7
 80037fa:	490f      	ldr	r1, [pc, #60]	@ (8003838 <HAL_PWREx_ConfigSupply+0x70>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003802:	f7fd f9d9 	bl	8000bb8 <HAL_GetTick>
 8003806:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003808:	e009      	b.n	800381e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800380a:	f7fd f9d5 	bl	8000bb8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003818:	d901      	bls.n	800381e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e007      	b.n	800382e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_PWREx_ConfigSupply+0x70>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382a:	d1ee      	bne.n	800380a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	58024800 	.word	0x58024800

0800383c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	@ 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f000 bc1f 	b.w	800408e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80b3 	beq.w	80039c4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385e:	4b95      	ldr	r3, [pc, #596]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003868:	4b92      	ldr	r3, [pc, #584]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003870:	2b10      	cmp	r3, #16
 8003872:	d007      	beq.n	8003884 <HAL_RCC_OscConfig+0x48>
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	2b18      	cmp	r3, #24
 8003878:	d112      	bne.n	80038a0 <HAL_RCC_OscConfig+0x64>
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d10d      	bne.n	80038a0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b8b      	ldr	r3, [pc, #556]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8098 	beq.w	80039c2 <HAL_RCC_OscConfig+0x186>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 8093 	bne.w	80039c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e3f6      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x7c>
 80038aa:	4b82      	ldr	r3, [pc, #520]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a81      	ldr	r2, [pc, #516]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e058      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d112      	bne.n	80038e6 <HAL_RCC_OscConfig+0xaa>
 80038c0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a7b      	ldr	r2, [pc, #492]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b79      	ldr	r3, [pc, #484]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a78      	ldr	r2, [pc, #480]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b76      	ldr	r3, [pc, #472]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a75      	ldr	r2, [pc, #468]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e041      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ee:	d112      	bne.n	8003916 <HAL_RCC_OscConfig+0xda>
 80038f0:	4b70      	ldr	r3, [pc, #448]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6f      	ldr	r2, [pc, #444]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6c      	ldr	r2, [pc, #432]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003902:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a69      	ldr	r2, [pc, #420]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e029      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800391e:	d112      	bne.n	8003946 <HAL_RCC_OscConfig+0x10a>
 8003920:	4b64      	ldr	r3, [pc, #400]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003926:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b61      	ldr	r3, [pc, #388]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a60      	ldr	r2, [pc, #384]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e011      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
 8003946:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800394c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b58      	ldr	r3, [pc, #352]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a57      	ldr	r2, [pc, #348]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003958:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b55      	ldr	r3, [pc, #340]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003964:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003968:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d013      	beq.n	800399a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd f921 	bl	8000bb8 <HAL_GetTick>
 8003976:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397a:	f7fd f91d 	bl	8000bb8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	@ 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e380      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800398c:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x13e>
 8003998:	e014      	b.n	80039c4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fd f90d 	bl	8000bb8 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a2:	f7fd f909 	bl	8000bb8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	@ 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e36c      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039b4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x166>
 80039c0:	e000      	b.n	80039c4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 808c 	beq.w	8003aea <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d2:	4b38      	ldr	r3, [pc, #224]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039dc:	4b35      	ldr	r3, [pc, #212]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_RCC_OscConfig+0x1bc>
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	2b18      	cmp	r3, #24
 80039ec:	d137      	bne.n	8003a5e <HAL_RCC_OscConfig+0x222>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d132      	bne.n	8003a5e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1d4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e33e      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a10:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 0219 	bic.w	r2, r3, #25
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4925      	ldr	r1, [pc, #148]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd f8c9 	bl	8000bb8 <HAL_GetTick>
 8003a26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd f8c5 	bl	8000bb8 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e328      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	4917      	ldr	r1, [pc, #92]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5c:	e045      	b.n	8003aea <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a66:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 0219 	bic.w	r2, r3, #25
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4910      	ldr	r1, [pc, #64]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd f89e 	bl	8000bb8 <HAL_GetTick>
 8003a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a80:	f7fd f89a 	bl	8000bb8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e2fd      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a92:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9e:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	4901      	ldr	r1, [pc, #4]	@ (8003ab4 <HAL_RCC_OscConfig+0x278>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
 8003ab2:	e01a      	b.n	8003aea <HAL_RCC_OscConfig+0x2ae>
 8003ab4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab8:	4b97      	ldr	r3, [pc, #604]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a96      	ldr	r2, [pc, #600]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd f878 	bl	8000bb8 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fd f874 	bl	8000bb8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2d7      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ade:	4b8e      	ldr	r3, [pc, #568]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d06a      	beq.n	8003bcc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af6:	4b88      	ldr	r3, [pc, #544]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003afe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b00:	4b85      	ldr	r3, [pc, #532]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d007      	beq.n	8003b1c <HAL_RCC_OscConfig+0x2e0>
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b18      	cmp	r3, #24
 8003b10:	d11b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x30e>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d116      	bne.n	8003b4a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x2f8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	2b80      	cmp	r3, #128	@ 0x80
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e2ac      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b34:	4b78      	ldr	r3, [pc, #480]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	4975      	ldr	r1, [pc, #468]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b48:	e040      	b.n	8003bcc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d023      	beq.n	8003b9a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b52:	4b71      	ldr	r3, [pc, #452]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a70      	ldr	r2, [pc, #448]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fd f82b 	bl	8000bb8 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b66:	f7fd f827 	bl	8000bb8 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e28a      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b78:	4b67      	ldr	r3, [pc, #412]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b84:	4b64      	ldr	r3, [pc, #400]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	4961      	ldr	r1, [pc, #388]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60cb      	str	r3, [r1, #12]
 8003b98:	e018      	b.n	8003bcc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fd f807 	bl	8000bb8 <HAL_GetTick>
 8003baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bae:	f7fd f803 	bl	8000bb8 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e266      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bc0:	4b55      	ldr	r3, [pc, #340]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d036      	beq.n	8003c46 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d019      	beq.n	8003c14 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be0:	4b4d      	ldr	r3, [pc, #308]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be4:	4a4c      	ldr	r2, [pc, #304]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fc ffe4 	bl	8000bb8 <HAL_GetTick>
 8003bf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fc ffe0 	bl	8000bb8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e243      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c06:	4b44      	ldr	r3, [pc, #272]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x3b8>
 8003c12:	e018      	b.n	8003c46 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c14:	4b40      	ldr	r3, [pc, #256]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c18:	4a3f      	ldr	r2, [pc, #252]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fc ffca 	bl	8000bb8 <HAL_GetTick>
 8003c24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fc ffc6 	bl	8000bb8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e229      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c3a:	4b37      	ldr	r3, [pc, #220]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d036      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d019      	beq.n	8003c8e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c66:	f7fc ffa7 	bl	8000bb8 <HAL_GetTick>
 8003c6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c6e:	f7fc ffa3 	bl	8000bb8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e206      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c80:	4b25      	ldr	r3, [pc, #148]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x432>
 8003c8c:	e018      	b.n	8003cc0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c8e:	4b22      	ldr	r3, [pc, #136]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a21      	ldr	r2, [pc, #132]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c9a:	f7fc ff8d 	bl	8000bb8 <HAL_GetTick>
 8003c9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca2:	f7fc ff89 	bl	8000bb8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1ec      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cb4:	4b18      	ldr	r3, [pc, #96]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80af 	beq.w	8003e2c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cce:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <HAL_RCC_OscConfig+0x4e0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a12      	ldr	r2, [pc, #72]	@ (8003d1c <HAL_RCC_OscConfig+0x4e0>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cda:	f7fc ff6d 	bl	8000bb8 <HAL_GetTick>
 8003cde:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fc ff69 	bl	8000bb8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	@ 0x64
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1cc      	b.n	800408e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf4:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <HAL_RCC_OscConfig+0x4e0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4e4>
 8003d08:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	4a02      	ldr	r2, [pc, #8]	@ (8003d18 <HAL_RCC_OscConfig+0x4dc>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d14:	e05b      	b.n	8003dce <HAL_RCC_OscConfig+0x592>
 8003d16:	bf00      	nop
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	58024800 	.word	0x58024800
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d112      	bne.n	8003d4e <HAL_RCC_OscConfig+0x512>
 8003d28:	4b9d      	ldr	r3, [pc, #628]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d34:	4b9a      	ldr	r3, [pc, #616]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	4a99      	ldr	r2, [pc, #612]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d40:	4b97      	ldr	r3, [pc, #604]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	4a96      	ldr	r2, [pc, #600]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4c:	e03f      	b.n	8003dce <HAL_RCC_OscConfig+0x592>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d112      	bne.n	8003d7c <HAL_RCC_OscConfig+0x540>
 8003d56:	4b92      	ldr	r3, [pc, #584]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	4a91      	ldr	r2, [pc, #580]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d62:	4b8f      	ldr	r3, [pc, #572]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	4a8e      	ldr	r2, [pc, #568]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6e:	4b8c      	ldr	r3, [pc, #560]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	4a8b      	ldr	r2, [pc, #556]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7a:	e028      	b.n	8003dce <HAL_RCC_OscConfig+0x592>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b85      	cmp	r3, #133	@ 0x85
 8003d82:	d112      	bne.n	8003daa <HAL_RCC_OscConfig+0x56e>
 8003d84:	4b86      	ldr	r3, [pc, #536]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d88:	4a85      	ldr	r2, [pc, #532]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d90:	4b83      	ldr	r3, [pc, #524]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	4a82      	ldr	r2, [pc, #520]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9c:	4b80      	ldr	r3, [pc, #512]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4a7f      	ldr	r2, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da8:	e011      	b.n	8003dce <HAL_RCC_OscConfig+0x592>
 8003daa:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db6:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	4a79      	ldr	r2, [pc, #484]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc2:	4b77      	ldr	r3, [pc, #476]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc6:	4a76      	ldr	r2, [pc, #472]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dcc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d015      	beq.n	8003e02 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fc feef 	bl	8000bb8 <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fc feeb 	bl	8000bb8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e14c      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df4:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ee      	beq.n	8003dde <HAL_RCC_OscConfig+0x5a2>
 8003e00:	e014      	b.n	8003e2c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fc fed9 	bl	8000bb8 <HAL_GetTick>
 8003e06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fc fed5 	bl	8000bb8 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e136      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e20:	4b5f      	ldr	r3, [pc, #380]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 812b 	beq.w	800408c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e36:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e3e:	2b18      	cmp	r3, #24
 8003e40:	f000 80bb 	beq.w	8003fba <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	f040 8095 	bne.w	8003f78 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4e:	4b54      	ldr	r3, [pc, #336]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a53      	ldr	r2, [pc, #332]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003e54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fc fead 	bl	8000bb8 <HAL_GetTick>
 8003e5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fc fea9 	bl	8000bb8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e10c      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e74:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e80:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003e82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e84:	4b47      	ldr	r3, [pc, #284]	@ (8003fa4 <HAL_RCC_OscConfig+0x768>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	430a      	orrs	r2, r1
 8003e94:	4942      	ldr	r1, [pc, #264]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	025b      	lsls	r3, r3, #9
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003eca:	4935      	ldr	r1, [pc, #212]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ed0:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	4a32      	ldr	r2, [pc, #200]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003edc:	4b30      	ldr	r3, [pc, #192]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003ede:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee0:	4b31      	ldr	r3, [pc, #196]	@ (8003fa8 <HAL_RCC_OscConfig+0x76c>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ee8:	00d2      	lsls	r2, r2, #3
 8003eea:	492d      	ldr	r1, [pc, #180]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	f023 020c 	bic.w	r2, r3, #12
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	4928      	ldr	r1, [pc, #160]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f02:	4b27      	ldr	r3, [pc, #156]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	f023 0202 	bic.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	4924      	ldr	r1, [pc, #144]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f14:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	4a21      	ldr	r2, [pc, #132]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f20:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f30:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f38:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f44:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fc fe32 	bl	8000bb8 <HAL_GetTick>
 8003f54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fc fe2e 	bl	8000bb8 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e091      	b.n	800408e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x71c>
 8003f76:	e089      	b.n	800408c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <HAL_RCC_OscConfig+0x764>)
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fc fe18 	bl	8000bb8 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f8a:	e00f      	b.n	8003fac <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fc fe14 	bl	8000bb8 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d908      	bls.n	8003fac <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e077      	b.n	800408e <HAL_RCC_OscConfig+0x852>
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	fffffc0c 	.word	0xfffffc0c
 8003fa8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fac:	4b3a      	ldr	r3, [pc, #232]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e9      	bne.n	8003f8c <HAL_RCC_OscConfig+0x750>
 8003fb8:	e068      	b.n	800408c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fba:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fc0:	4b35      	ldr	r3, [pc, #212]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d031      	beq.n	8004032 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0203 	and.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d12a      	bne.n	8004032 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d122      	bne.n	8004032 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d11a      	bne.n	8004032 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	0a5b      	lsrs	r3, r3, #9
 8004000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004008:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d111      	bne.n	8004032 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d108      	bne.n	8004032 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	0e1b      	lsrs	r3, r3, #24
 8004024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e02b      	b.n	800408e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004036:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	08db      	lsrs	r3, r3, #3
 800403c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004040:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d01f      	beq.n	800408c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800404c:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	4a11      	ldr	r2, [pc, #68]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004058:	f7fc fdae 	bl	8000bb8 <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800405e:	bf00      	nop
 8004060:	f7fc fdaa 	bl	8000bb8 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	4293      	cmp	r3, r2
 800406a:	d0f9      	beq.n	8004060 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800406c:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 800406e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004070:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <HAL_RCC_OscConfig+0x860>)
 8004072:	4013      	ands	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004078:	00d2      	lsls	r2, r2, #3
 800407a:	4907      	ldr	r1, [pc, #28]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 800407c:	4313      	orrs	r3, r2
 800407e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	4a04      	ldr	r2, [pc, #16]	@ (8004098 <HAL_RCC_OscConfig+0x85c>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3730      	adds	r7, #48	@ 0x30
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	58024400 	.word	0x58024400
 800409c:	ffff0007 	.word	0xffff0007

080040a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e19c      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b8a      	ldr	r3, [pc, #552]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b87      	ldr	r3, [pc, #540]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 020f 	bic.w	r2, r3, #15
 80040ca:	4985      	ldr	r1, [pc, #532]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b83      	ldr	r3, [pc, #524]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e184      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b7b      	ldr	r3, [pc, #492]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d908      	bls.n	8004112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004100:	4b78      	ldr	r3, [pc, #480]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4975      	ldr	r1, [pc, #468]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 800410e:	4313      	orrs	r3, r2
 8004110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	4b70      	ldr	r3, [pc, #448]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800412a:	429a      	cmp	r2, r3
 800412c:	d908      	bls.n	8004140 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800412e:	4b6d      	ldr	r3, [pc, #436]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	496a      	ldr	r1, [pc, #424]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 800413c:	4313      	orrs	r3, r2
 800413e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	4b64      	ldr	r3, [pc, #400]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004158:	429a      	cmp	r2, r3
 800415a:	d908      	bls.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800415c:	4b61      	ldr	r3, [pc, #388]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	495e      	ldr	r1, [pc, #376]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 800416a:	4313      	orrs	r3, r2
 800416c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	4b59      	ldr	r3, [pc, #356]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004186:	429a      	cmp	r2, r3
 8004188:	d908      	bls.n	800419c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800418a:	4b56      	ldr	r3, [pc, #344]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4953      	ldr	r1, [pc, #332]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004198:	4313      	orrs	r3, r2
 800419a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	4b4d      	ldr	r3, [pc, #308]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d908      	bls.n	80041ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b4a      	ldr	r3, [pc, #296]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f023 020f 	bic.w	r2, r3, #15
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4947      	ldr	r1, [pc, #284]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d055      	beq.n	8004282 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041d6:	4b43      	ldr	r3, [pc, #268]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4940      	ldr	r1, [pc, #256]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041f0:	4b3c      	ldr	r3, [pc, #240]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d121      	bne.n	8004240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0f6      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d107      	bne.n	8004218 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004208:	4b36      	ldr	r3, [pc, #216]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d115      	bne.n	8004240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0ea      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004220:	4b30      	ldr	r3, [pc, #192]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0de      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004230:	4b2c      	ldr	r3, [pc, #176]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0d6      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004240:	4b28      	ldr	r3, [pc, #160]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f023 0207 	bic.w	r2, r3, #7
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4925      	ldr	r1, [pc, #148]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 800424e:	4313      	orrs	r3, r2
 8004250:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004252:	f7fc fcb1 	bl	8000bb8 <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004258:	e00a      	b.n	8004270 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425a:	f7fc fcad 	bl	8000bb8 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0be      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004270:	4b1c      	ldr	r3, [pc, #112]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	429a      	cmp	r2, r3
 8004280:	d1eb      	bne.n	800425a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d010      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	429a      	cmp	r2, r3
 800429c:	d208      	bcs.n	80042b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429e:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f023 020f 	bic.w	r2, r3, #15
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	490e      	ldr	r1, [pc, #56]	@ (80042e4 <HAL_RCC_ClockConfig+0x244>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b0:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d214      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b08      	ldr	r3, [pc, #32]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 020f 	bic.w	r2, r3, #15
 80042c6:	4906      	ldr	r1, [pc, #24]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b04      	ldr	r3, [pc, #16]	@ (80042e0 <HAL_RCC_ClockConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e086      	b.n	80043ee <HAL_RCC_ClockConfig+0x34e>
 80042e0:	52002000 	.word	0x52002000
 80042e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d010      	beq.n	8004316 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	4b3f      	ldr	r3, [pc, #252]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004300:	429a      	cmp	r2, r3
 8004302:	d208      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004304:	4b3c      	ldr	r3, [pc, #240]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	4939      	ldr	r1, [pc, #228]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004312:	4313      	orrs	r3, r2
 8004314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d010      	beq.n	8004344 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	4b34      	ldr	r3, [pc, #208]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800432e:	429a      	cmp	r2, r3
 8004330:	d208      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004332:	4b31      	ldr	r3, [pc, #196]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	492e      	ldr	r1, [pc, #184]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004340:	4313      	orrs	r3, r2
 8004342:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d010      	beq.n	8004372 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	4b28      	ldr	r3, [pc, #160]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800435c:	429a      	cmp	r2, r3
 800435e:	d208      	bcs.n	8004372 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004360:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	4922      	ldr	r1, [pc, #136]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 800436e:	4313      	orrs	r3, r2
 8004370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800438a:	429a      	cmp	r2, r3
 800438c:	d208      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800438e:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4917      	ldr	r1, [pc, #92]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 800439c:	4313      	orrs	r3, r2
 800439e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80043a0:	f000 f834 	bl	800440c <HAL_RCC_GetSysClockFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b14      	ldr	r3, [pc, #80]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	0a1b      	lsrs	r3, r3, #8
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	4912      	ldr	r1, [pc, #72]	@ (80043fc <HAL_RCC_ClockConfig+0x35c>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80043be:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <HAL_RCC_ClockConfig+0x358>)
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	4a0d      	ldr	r2, [pc, #52]	@ (80043fc <HAL_RCC_ClockConfig+0x35c>)
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
 80043d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004400 <HAL_RCC_ClockConfig+0x360>)
 80043d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <HAL_RCC_ClockConfig+0x364>)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043de:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <HAL_RCC_ClockConfig+0x368>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc fb9e 	bl	8000b24 <HAL_InitTick>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	58024400 	.word	0x58024400
 80043fc:	08008150 	.word	0x08008150
 8004400:	24000004 	.word	0x24000004
 8004404:	24000000 	.word	0x24000000
 8004408:	24000008 	.word	0x24000008

0800440c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	@ 0x24
 8004410:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004412:	4bb3      	ldr	r3, [pc, #716]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800441a:	2b18      	cmp	r3, #24
 800441c:	f200 8155 	bhi.w	80046ca <HAL_RCC_GetSysClockFreq+0x2be>
 8004420:	a201      	add	r2, pc, #4	@ (adr r2, 8004428 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	0800448d 	.word	0x0800448d
 800442c:	080046cb 	.word	0x080046cb
 8004430:	080046cb 	.word	0x080046cb
 8004434:	080046cb 	.word	0x080046cb
 8004438:	080046cb 	.word	0x080046cb
 800443c:	080046cb 	.word	0x080046cb
 8004440:	080046cb 	.word	0x080046cb
 8004444:	080046cb 	.word	0x080046cb
 8004448:	080044b3 	.word	0x080044b3
 800444c:	080046cb 	.word	0x080046cb
 8004450:	080046cb 	.word	0x080046cb
 8004454:	080046cb 	.word	0x080046cb
 8004458:	080046cb 	.word	0x080046cb
 800445c:	080046cb 	.word	0x080046cb
 8004460:	080046cb 	.word	0x080046cb
 8004464:	080046cb 	.word	0x080046cb
 8004468:	080044b9 	.word	0x080044b9
 800446c:	080046cb 	.word	0x080046cb
 8004470:	080046cb 	.word	0x080046cb
 8004474:	080046cb 	.word	0x080046cb
 8004478:	080046cb 	.word	0x080046cb
 800447c:	080046cb 	.word	0x080046cb
 8004480:	080046cb 	.word	0x080046cb
 8004484:	080046cb 	.word	0x080046cb
 8004488:	080044bf 	.word	0x080044bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800448c:	4b94      	ldr	r3, [pc, #592]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004498:	4b91      	ldr	r3, [pc, #580]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	4a90      	ldr	r2, [pc, #576]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
 80044a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044aa:	e111      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044ac:	4b8d      	ldr	r3, [pc, #564]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ae:	61bb      	str	r3, [r7, #24]
      break;
 80044b0:	e10e      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044b2:	4b8d      	ldr	r3, [pc, #564]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044b4:	61bb      	str	r3, [r7, #24]
      break;
 80044b6:	e10b      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044b8:	4b8c      	ldr	r3, [pc, #560]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044ba:	61bb      	str	r3, [r7, #24]
      break;
 80044bc:	e108      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044be:	4b88      	ldr	r3, [pc, #544]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044c8:	4b85      	ldr	r3, [pc, #532]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044d4:	4b82      	ldr	r3, [pc, #520]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044de:	4b80      	ldr	r3, [pc, #512]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e2:	08db      	lsrs	r3, r3, #3
 80044e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80e1 	beq.w	80046c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b02      	cmp	r3, #2
 8004506:	f000 8083 	beq.w	8004610 <HAL_RCC_GetSysClockFreq+0x204>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b02      	cmp	r3, #2
 800450e:	f200 80a1 	bhi.w	8004654 <HAL_RCC_GetSysClockFreq+0x248>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x114>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d056      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800451e:	e099      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004520:	4b6f      	ldr	r3, [pc, #444]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02d      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800452c:	4b6c      	ldr	r3, [pc, #432]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	08db      	lsrs	r3, r3, #3
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	4a6b      	ldr	r2, [pc, #428]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
 800453c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004556:	4b62      	ldr	r3, [pc, #392]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a02 	vldr	s12, [r7, #8]
 800456a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004586:	e087      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459a:	4b51      	ldr	r3, [pc, #324]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ca:	e065      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80046f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b40      	ldr	r3, [pc, #256]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800460e:	e043      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800461e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004622:	4b2f      	ldr	r3, [pc, #188]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	ed97 6a02 	vldr	s12, [r7, #8]
 8004636:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800463a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004652:	e021      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004666:	4b1e      	ldr	r3, [pc, #120]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a02 	vldr	s12, [r7, #8]
 800467a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004696:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	0a5b      	lsrs	r3, r3, #9
 800469e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a2:	3301      	adds	r3, #1
 80046a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046bc:	ee17 3a90 	vmov	r3, s15
 80046c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046c2:	e005      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61bb      	str	r3, [r7, #24]
      break;
 80046c8:	e002      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046ca:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046cc:	61bb      	str	r3, [r7, #24]
      break;
 80046ce:	bf00      	nop
  }

  return sysclockfreq;
 80046d0:	69bb      	ldr	r3, [r7, #24]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3724      	adds	r7, #36	@ 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	58024400 	.word	0x58024400
 80046e4:	03d09000 	.word	0x03d09000
 80046e8:	003d0900 	.word	0x003d0900
 80046ec:	016e3600 	.word	0x016e3600
 80046f0:	46000000 	.word	0x46000000
 80046f4:	4c742400 	.word	0x4c742400
 80046f8:	4a742400 	.word	0x4a742400
 80046fc:	4bb71b00 	.word	0x4bb71b00

08004700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004706:	f7ff fe81 	bl	800440c <HAL_RCC_GetSysClockFreq>
 800470a:	4602      	mov	r2, r0
 800470c:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <HAL_RCC_GetHCLKFreq+0x50>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	490f      	ldr	r1, [pc, #60]	@ (8004754 <HAL_RCC_GetHCLKFreq+0x54>)
 8004718:	5ccb      	ldrb	r3, [r1, r3]
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004724:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <HAL_RCC_GetHCLKFreq+0x50>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	4a09      	ldr	r2, [pc, #36]	@ (8004754 <HAL_RCC_GetHCLKFreq+0x54>)
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	fa22 f303 	lsr.w	r3, r2, r3
 800473a:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x58>)
 800473c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800473e:	4a07      	ldr	r2, [pc, #28]	@ (800475c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004744:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x58>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	58024400 	.word	0x58024400
 8004754:	08008150 	.word	0x08008150
 8004758:	24000004 	.word	0x24000004
 800475c:	24000000 	.word	0x24000000

08004760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004764:	f7ff ffcc 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004768:	4602      	mov	r2, r0
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	4904      	ldr	r1, [pc, #16]	@ (8004788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004776:	5ccb      	ldrb	r3, [r1, r3]
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	58024400 	.word	0x58024400
 8004788:	08008150 	.word	0x08008150

0800478c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b090      	sub	sp, #64	@ 0x40
 8004790:	af00      	add	r7, sp, #0
 8004792:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800479a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800479e:	430b      	orrs	r3, r1
 80047a0:	f040 8094 	bne.w	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80047a4:	4b97      	ldr	r3, [pc, #604]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	f200 8087 	bhi.w	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80047b6:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047d1 	.word	0x080047d1
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	08004821 	.word	0x08004821
 80047c8:	080048bd 	.word	0x080048bd
 80047cc:	08004849 	.word	0x08004849
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047dc:	d108      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ff68 	bl	80056b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047ec:	f000 bc97 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047f4:	f000 bc93 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047f8:	4b82      	ldr	r3, [pc, #520]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004804:	d108      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004806:	f107 0318 	add.w	r3, r7, #24
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fcac 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004814:	f000 bc83 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800481c:	f000 bc7f 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004820:	4b78      	ldr	r3, [pc, #480]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800482c:	d108      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800482e:	f107 030c 	add.w	r3, r7, #12
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fdec 	bl	8005410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800483c:	f000 bc6f 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004844:	f000 bc6b 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004848:	4b6e      	ldr	r3, [pc, #440]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800484a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004852:	4b6c      	ldr	r3, [pc, #432]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d10c      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800485e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004864:	4b67      	ldr	r3, [pc, #412]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	4a66      	ldr	r2, [pc, #408]	@ (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004876:	e01f      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004878:	4b62      	ldr	r3, [pc, #392]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004884:	d106      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800488c:	d102      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800488e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004892:	e011      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004894:	4b5b      	ldr	r3, [pc, #364]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80048a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a8:	d102      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80048aa:	4b59      	ldr	r3, [pc, #356]	@ (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80048ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80048b4:	f000 bc33 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80048b8:	f000 bc31 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80048bc:	4b55      	ldr	r3, [pc, #340]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80048be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048c0:	f000 bc2d 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048c8:	f000 bc29 	b.w	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80048cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80048d4:	430b      	orrs	r3, r1
 80048d6:	f040 809f 	bne.w	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80048da:	4b4a      	ldr	r3, [pc, #296]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048de:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80048e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ea:	d04d      	beq.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f2:	f200 8084 	bhi.w	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80048fa:	d07d      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004900:	d87d      	bhi.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	2b80      	cmp	r3, #128	@ 0x80
 8004906:	d02d      	beq.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	2b80      	cmp	r3, #128	@ 0x80
 800490c:	d877      	bhi.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	2b40      	cmp	r3, #64	@ 0x40
 8004918:	d012      	beq.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800491a:	e070      	b.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800491c:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004928:	d107      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800492a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fec2 	bl	80056b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004938:	e3f1      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800493e:	e3ee      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004940:	4b30      	ldr	r3, [pc, #192]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004948:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800494c:	d107      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800494e:	f107 0318 	add.w	r3, r7, #24
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fc08 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800495c:	e3df      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004962:	e3dc      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004964:	4b27      	ldr	r3, [pc, #156]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800496c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004970:	d107      	bne.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004972:	f107 030c 	add.w	r3, r7, #12
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fd4a 	bl	8005410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004980:	e3cd      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004986:	e3ca      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004988:	4b1e      	ldr	r3, [pc, #120]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800498a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004992:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b04      	cmp	r3, #4
 800499c:	d10c      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800499e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a4:	4b17      	ldr	r3, [pc, #92]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	4a16      	ldr	r2, [pc, #88]	@ (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b6:	e01e      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049b8:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c4:	d106      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80049c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049cc:	d102      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80049ce:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80049d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d2:	e010      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049e0:	d106      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80049e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e8:	d102      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ee:	e002      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80049f4:	e393      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80049f6:	e392      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80049f8:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049fc:	e38f      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a02:	e38c      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004a04:	58024400 	.word	0x58024400
 8004a08:	03d09000 	.word	0x03d09000
 8004a0c:	003d0900 	.word	0x003d0900
 8004a10:	016e3600 	.word	0x016e3600
 8004a14:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004a20:	430b      	orrs	r3, r1
 8004a22:	f040 809c 	bne.w	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8004a26:	4b9e      	ldr	r3, [pc, #632]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a2a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8004a2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a36:	d054      	beq.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3e:	f200 808b 	bhi.w	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a48:	f000 8083 	beq.w	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a52:	f200 8081 	bhi.w	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5c:	d02f      	beq.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a64:	d878      	bhi.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a72:	d012      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004a74:	e070      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a76:	4b8a      	ldr	r3, [pc, #552]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a82:	d107      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fe15 	bl	80056b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a92:	e344      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a98:	e341      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a9a:	4b81      	ldr	r3, [pc, #516]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aa8:	f107 0318 	add.w	r3, r7, #24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fb5b 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ab6:	e332      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004abc:	e32f      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004abe:	4b78      	ldr	r3, [pc, #480]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aca:	d107      	bne.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004acc:	f107 030c 	add.w	r3, r7, #12
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fc9d 	bl	8005410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ada:	e320      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ae0:	e31d      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004aec:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d10c      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004afe:	4b68      	ldr	r3, [pc, #416]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	4a66      	ldr	r2, [pc, #408]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b10:	e01e      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b12:	4b63      	ldr	r3, [pc, #396]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b26:	d102      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b28:	4b5f      	ldr	r3, [pc, #380]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b2c:	e010      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b42:	d102      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b44:	4b59      	ldr	r3, [pc, #356]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b48:	e002      	b.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8004b4e:	e2e6      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004b50:	e2e5      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b52:	4b57      	ldr	r3, [pc, #348]	@ (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b56:	e2e2      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b5c:	e2df      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b62:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004b66:	430b      	orrs	r3, r1
 8004b68:	f040 80a7 	bne.w	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b7c:	d055      	beq.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b84:	f200 8096 	bhi.w	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b8e:	f000 8084 	beq.w	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b98:	f200 808c 	bhi.w	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba2:	d030      	beq.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004baa:	f200 8083 	bhi.w	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bba:	d012      	beq.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004bbc:	e07a      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bbe:	4b38      	ldr	r3, [pc, #224]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fd71 	bl	80056b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bda:	e2a0      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004be0:	e29d      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004be2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bee:	d107      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bf0:	f107 0318 	add.w	r3, r7, #24
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fab7 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bfe:	e28e      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c04:	e28b      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c06:	4b26      	ldr	r3, [pc, #152]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c12:	d107      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c14:	f107 030c 	add.w	r3, r7, #12
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fbf9 	bl	8005410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c22:	e27c      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c28:	e279      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c34:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8004c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c46:	4b16      	ldr	r3, [pc, #88]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	08db      	lsrs	r3, r3, #3
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	4a14      	ldr	r2, [pc, #80]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c58:	e01e      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c66:	d106      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004c70:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c74:	e010      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c82:	d106      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c8a:	d102      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004c8c:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c90:	e002      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004c96:	e242      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004c98:	e241      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c9a:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c9e:	e23e      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	03d09000 	.word	0x03d09000
 8004ca8:	003d0900 	.word	0x003d0900
 8004cac:	016e3600 	.word	0x016e3600
 8004cb0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cb8:	e231      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cbe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	f040 8085 	bne.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004cc8:	4b9c      	ldr	r3, [pc, #624]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ccc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cd8:	d06b      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce0:	d874      	bhi.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ce8:	d056      	beq.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8004cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf0:	d86c      	bhi.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cf8:	d03b      	beq.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d00:	d864      	bhi.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d08:	d021      	beq.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d10:	d85c      	bhi.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8004d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1e:	d004      	beq.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8004d20:	e054      	b.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004d22:	f7ff fd1d 	bl	8004760 <HAL_RCC_GetPCLK1Freq>
 8004d26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d28:	e1f9      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d2a:	4b84      	ldr	r3, [pc, #528]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d36:	d107      	bne.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d38:	f107 0318 	add.w	r3, r7, #24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fa13 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d46:	e1ea      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d4c:	e1e7      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d5a:	d107      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5c:	f107 030c 	add.w	r3, r7, #12
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fb55 	bl	8005410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d6a:	e1d8      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d70:	e1d5      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d72:	4b72      	ldr	r3, [pc, #456]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	4a6d      	ldr	r2, [pc, #436]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d90:	e1c5      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d96:	e1c2      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d98:	4b68      	ldr	r3, [pc, #416]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da4:	d102      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8004da6:	4b67      	ldr	r3, [pc, #412]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004daa:	e1b8      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004db0:	e1b5      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004db2:	4b62      	ldr	r3, [pc, #392]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8004dc0:	4b61      	ldr	r3, [pc, #388]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dc4:	e1ab      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dca:	e1a8      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd0:	e1a5      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	d173      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004dde:	4b57      	ldr	r3, [pc, #348]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004de6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dee:	d02f      	beq.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004df6:	d863      	bhi.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e04:	d012      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8004e06:	e05b      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e08:	4b4c      	ldr	r3, [pc, #304]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e14:	d107      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e16:	f107 0318 	add.w	r3, r7, #24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f9a4 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e24:	e17b      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e2a:	e178      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e2c:	4b43      	ldr	r3, [pc, #268]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e38:	d107      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e3a:	f107 030c 	add.w	r3, r7, #12
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fae6 	bl	8005410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e48:	e169      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e4e:	e166      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e50:	4b3a      	ldr	r3, [pc, #232]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e5a:	4b38      	ldr	r3, [pc, #224]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e6c:	4b33      	ldr	r3, [pc, #204]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	4a32      	ldr	r2, [pc, #200]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e7e:	e01e      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e80:	4b2e      	ldr	r3, [pc, #184]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e94:	d102      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e96:	4b2b      	ldr	r3, [pc, #172]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9a:	e010      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e9c:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004eb2:	4b25      	ldr	r3, [pc, #148]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eb6:	e002      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004ebc:	e12f      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004ebe:	e12e      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec4:	e12b      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eca:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	d13c      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eda:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d012      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8004eea:	e023      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004eec:	4b13      	ldr	r3, [pc, #76]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fbda 	bl	80056b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f08:	e109      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f0e:	e106      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f10:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f1e:	f107 0318 	add.w	r3, r7, #24
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f920 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f2c:	e0f7      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f32:	e0f4      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f38:	e0f1      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004f3a:	bf00      	nop
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	03d09000 	.word	0x03d09000
 8004f44:	003d0900 	.word	0x003d0900
 8004f48:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f50:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004f54:	430b      	orrs	r3, r1
 8004f56:	f040 8091 	bne.w	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004f5a:	4b73      	ldr	r3, [pc, #460]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f6a:	f000 8081 	beq.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f74:	d87f      	bhi.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f7c:	d06b      	beq.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f84:	d877      	bhi.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d056      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d86f      	bhi.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f9c:	d03b      	beq.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004fa4:	d867      	bhi.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fac:	d021      	beq.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fb4:	d85f      	bhi.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fc2:	d004      	beq.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004fc4:	e057      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004fc6:	f000 f8b9 	bl	800513c <HAL_RCCEx_GetD3PCLK1Freq>
 8004fca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004fcc:	e0a7      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fce:	4b56      	ldr	r3, [pc, #344]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fda:	d107      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fdc:	f107 0318 	add.w	r3, r7, #24
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 f8c1 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fea:	e098      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ff0:	e095      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ffe:	d107      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fa03 	bl	8005410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800500e:	e086      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005014:	e083      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005016:	4b44      	ldr	r3, [pc, #272]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d109      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005022:	4b41      	ldr	r3, [pc, #260]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	4a3f      	ldr	r2, [pc, #252]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800502e:	fa22 f303 	lsr.w	r3, r2, r3
 8005032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005034:	e073      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800503a:	e070      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800503c:	4b3a      	ldr	r3, [pc, #232]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005048:	d102      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800504a:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800504e:	e066      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005054:	e063      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005056:	4b34      	ldr	r3, [pc, #208]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005062:	d102      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005064:	4b33      	ldr	r3, [pc, #204]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005068:	e059      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800506e:	e056      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005070:	4b31      	ldr	r3, [pc, #196]	@ (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005074:	e053      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507a:	e050      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800507c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005080:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005084:	430b      	orrs	r3, r1
 8005086:	d148      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005088:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005090:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005098:	d02a      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a0:	d838      	bhi.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d004      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050ae:	d00d      	beq.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80050b0:	e030      	b.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050be:	d102      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80050c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80050c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050c4:	e02b      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ca:	e028      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050cc:	4b16      	ldr	r3, [pc, #88]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050d8:	d107      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 faea 	bl	80056b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050e8:	e019      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ee:	e016      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050fc:	d107      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050fe:	f107 0318 	add.w	r3, r7, #24
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f830 	bl	8005168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800510c:	e007      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005112:	e004      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005118:	e001      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005120:	4618      	mov	r0, r3
 8005122:	3740      	adds	r7, #64	@ 0x40
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	58024400 	.word	0x58024400
 800512c:	03d09000 	.word	0x03d09000
 8005130:	003d0900 	.word	0x003d0900
 8005134:	016e3600 	.word	0x016e3600
 8005138:	00bb8000 	.word	0x00bb8000

0800513c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005140:	f7ff fade 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4904      	ldr	r1, [pc, #16]	@ (8005164 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	58024400 	.word	0x58024400
 8005164:	08008150 	.word	0x08008150

08005168 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	@ 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005170:	4ba1      	ldr	r3, [pc, #644]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800517a:	4b9f      	ldr	r3, [pc, #636]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	0b1b      	lsrs	r3, r3, #12
 8005180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005184:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005186:	4b9c      	ldr	r3, [pc, #624]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005192:	4b99      	ldr	r3, [pc, #612]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005196:	08db      	lsrs	r3, r3, #3
 8005198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8111 	beq.w	80053d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	f000 8083 	beq.w	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	f200 80a1 	bhi.w	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d056      	beq.n	8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051d2:	e099      	b.n	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d4:	4b88      	ldr	r3, [pc, #544]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d02d      	beq.n	800523c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051e0:	4b85      	ldr	r3, [pc, #532]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	4a84      	ldr	r2, [pc, #528]	@ (80053fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520a:	4b7b      	ldr	r3, [pc, #492]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521a:	ed97 6a03 	vldr	s12, [r7, #12]
 800521e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005236:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800523a:	e087      	b.n	800534c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800524a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524e:	4b6a      	ldr	r3, [pc, #424]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005262:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800527e:	e065      	b.n	800534c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b59      	ldr	r3, [pc, #356]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052c2:	e043      	b.n	800534c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800540c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d6:	4b48      	ldr	r3, [pc, #288]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005306:	e021      	b.n	800534c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532a:	ed97 6a03 	vldr	s12, [r7, #12]
 800532e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800533e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800534a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800534c:	4b2a      	ldr	r3, [pc, #168]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	0a5b      	lsrs	r3, r3, #9
 8005352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005366:	edd7 6a07 	vldr	s13, [r7, #28]
 800536a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800536e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005372:	ee17 2a90 	vmov	r2, s15
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800537a:	4b1f      	ldr	r3, [pc, #124]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005394:	edd7 6a07 	vldr	s13, [r7, #28]
 8005398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800539c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a0:	ee17 2a90 	vmov	r2, s15
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053a8:	4b13      	ldr	r3, [pc, #76]	@ (80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	0e1b      	lsrs	r3, r3, #24
 80053ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ce:	ee17 2a90 	vmov	r2, s15
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053d6:	e008      	b.n	80053ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
}
 80053ea:	bf00      	nop
 80053ec:	3724      	adds	r7, #36	@ 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	58024400 	.word	0x58024400
 80053fc:	03d09000 	.word	0x03d09000
 8005400:	46000000 	.word	0x46000000
 8005404:	4c742400 	.word	0x4c742400
 8005408:	4a742400 	.word	0x4a742400
 800540c:	4bb71b00 	.word	0x4bb71b00

08005410 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	@ 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005418:	4ba1      	ldr	r3, [pc, #644]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005422:	4b9f      	ldr	r3, [pc, #636]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	0d1b      	lsrs	r3, r3, #20
 8005428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800542c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800542e:	4b9c      	ldr	r3, [pc, #624]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800543a:	4b99      	ldr	r3, [pc, #612]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	08db      	lsrs	r3, r3, #3
 8005440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8111 	beq.w	8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b02      	cmp	r3, #2
 8005462:	f000 8083 	beq.w	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b02      	cmp	r3, #2
 800546a:	f200 80a1 	bhi.w	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d056      	beq.n	8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800547a:	e099      	b.n	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547c:	4b88      	ldr	r3, [pc, #544]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02d      	beq.n	80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005488:	4b85      	ldr	r3, [pc, #532]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	08db      	lsrs	r3, r3, #3
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	4a84      	ldr	r2, [pc, #528]	@ (80056a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
 8005498:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b2:	4b7b      	ldr	r3, [pc, #492]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054e2:	e087      	b.n	80055f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	4b6a      	ldr	r3, [pc, #424]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005506:	ed97 6a03 	vldr	s12, [r7, #12]
 800550a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800550e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800551a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005526:	e065      	b.n	80055f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553a:	4b59      	ldr	r3, [pc, #356]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554a:	ed97 6a03 	vldr	s12, [r7, #12]
 800554e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800555e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800556a:	e043      	b.n	80055f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005576:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800557a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557e:	4b48      	ldr	r3, [pc, #288]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005592:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ae:	e021      	b.n	80055f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c2:	4b37      	ldr	r3, [pc, #220]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055f4:	4b2a      	ldr	r3, [pc, #168]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	0a5b      	lsrs	r3, r3, #9
 80055fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800560a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800560e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561a:	ee17 2a90 	vmov	r2, s15
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005622:	4b1f      	ldr	r3, [pc, #124]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005648:	ee17 2a90 	vmov	r2, s15
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005650:	4b13      	ldr	r3, [pc, #76]	@ (80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005654:	0e1b      	lsrs	r3, r3, #24
 8005656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800566a:	edd7 6a07 	vldr	s13, [r7, #28]
 800566e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005676:	ee17 2a90 	vmov	r2, s15
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800567e:	e008      	b.n	8005692 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	609a      	str	r2, [r3, #8]
}
 8005692:	bf00      	nop
 8005694:	3724      	adds	r7, #36	@ 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	03d09000 	.word	0x03d09000
 80056a8:	46000000 	.word	0x46000000
 80056ac:	4c742400 	.word	0x4c742400
 80056b0:	4a742400 	.word	0x4a742400
 80056b4:	4bb71b00 	.word	0x4bb71b00

080056b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	@ 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056c0:	4ba0      	ldr	r3, [pc, #640]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80056ca:	4b9e      	ldr	r3, [pc, #632]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80056d6:	4b9b      	ldr	r3, [pc, #620]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056e0:	4b98      	ldr	r3, [pc, #608]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e4:	08db      	lsrs	r3, r3, #3
 80056e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	fb02 f303 	mul.w	r3, r2, r3
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8111 	beq.w	8005926 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b02      	cmp	r3, #2
 8005708:	f000 8083 	beq.w	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b02      	cmp	r3, #2
 8005710:	f200 80a1 	bhi.w	8005856 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d056      	beq.n	80057ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005720:	e099      	b.n	8005856 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005722:	4b88      	ldr	r3, [pc, #544]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02d      	beq.n	800578a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800572e:	4b85      	ldr	r3, [pc, #532]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	08db      	lsrs	r3, r3, #3
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	4a83      	ldr	r2, [pc, #524]	@ (8005948 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005758:	4b7a      	ldr	r3, [pc, #488]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005768:	ed97 6a03 	vldr	s12, [r7, #12]
 800576c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800594c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800577c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005784:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005788:	e087      	b.n	800589a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005794:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005950 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579c:	4b69      	ldr	r3, [pc, #420]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800594c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057cc:	e065      	b.n	800589a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80057dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e0:	4b58      	ldr	r3, [pc, #352]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80057f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800594c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005810:	e043      	b.n	800589a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	ee07 3a90 	vmov	s15, r3
 8005818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005958 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005824:	4b47      	ldr	r3, [pc, #284]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582c:	ee07 3a90 	vmov	s15, r3
 8005830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005834:	ed97 6a03 	vldr	s12, [r7, #12]
 8005838:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800594c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800583c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005854:	e021      	b.n	800589a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005860:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005950 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005868:	4b36      	ldr	r3, [pc, #216]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005878:	ed97 6a03 	vldr	s12, [r7, #12]
 800587c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800594c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800588c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005898:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800589a:	4b2a      	ldr	r3, [pc, #168]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	0a5b      	lsrs	r3, r3, #9
 80058a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a4:	ee07 3a90 	vmov	s15, r3
 80058a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c0:	ee17 2a90 	vmov	r2, s15
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ee:	ee17 2a90 	vmov	r2, s15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80058f6:	4b13      	ldr	r3, [pc, #76]	@ (8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fa:	0e1b      	lsrs	r3, r3, #24
 80058fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800590c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005910:	edd7 6a07 	vldr	s13, [r7, #28]
 8005914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591c:	ee17 2a90 	vmov	r2, s15
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005924:	e008      	b.n	8005938 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	3724      	adds	r7, #36	@ 0x24
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	58024400 	.word	0x58024400
 8005948:	03d09000 	.word	0x03d09000
 800594c:	46000000 	.word	0x46000000
 8005950:	4c742400 	.word	0x4c742400
 8005954:	4a742400 	.word	0x4a742400
 8005958:	4bb71b00 	.word	0x4bb71b00

0800595c <__cvt>:
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595e:	ed2d 8b02 	vpush	{d8}
 8005962:	eeb0 8b40 	vmov.f64	d8, d0
 8005966:	b085      	sub	sp, #20
 8005968:	4617      	mov	r7, r2
 800596a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800596c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800596e:	ee18 2a90 	vmov	r2, s17
 8005972:	f025 0520 	bic.w	r5, r5, #32
 8005976:	2a00      	cmp	r2, #0
 8005978:	bfb6      	itet	lt
 800597a:	222d      	movlt	r2, #45	@ 0x2d
 800597c:	2200      	movge	r2, #0
 800597e:	eeb1 8b40 	vneglt.f64	d8, d0
 8005982:	2d46      	cmp	r5, #70	@ 0x46
 8005984:	460c      	mov	r4, r1
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	d004      	beq.n	8005994 <__cvt+0x38>
 800598a:	2d45      	cmp	r5, #69	@ 0x45
 800598c:	d100      	bne.n	8005990 <__cvt+0x34>
 800598e:	3401      	adds	r4, #1
 8005990:	2102      	movs	r1, #2
 8005992:	e000      	b.n	8005996 <__cvt+0x3a>
 8005994:	2103      	movs	r1, #3
 8005996:	ab03      	add	r3, sp, #12
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	ab02      	add	r3, sp, #8
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	4622      	mov	r2, r4
 80059a0:	4633      	mov	r3, r6
 80059a2:	eeb0 0b48 	vmov.f64	d0, d8
 80059a6:	f000 fe1b 	bl	80065e0 <_dtoa_r>
 80059aa:	2d47      	cmp	r5, #71	@ 0x47
 80059ac:	d114      	bne.n	80059d8 <__cvt+0x7c>
 80059ae:	07fb      	lsls	r3, r7, #31
 80059b0:	d50a      	bpl.n	80059c8 <__cvt+0x6c>
 80059b2:	1902      	adds	r2, r0, r4
 80059b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80059b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059bc:	bf08      	it	eq
 80059be:	9203      	streq	r2, [sp, #12]
 80059c0:	2130      	movs	r1, #48	@ 0x30
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d319      	bcc.n	80059fc <__cvt+0xa0>
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059cc:	1a1b      	subs	r3, r3, r0
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	b005      	add	sp, #20
 80059d2:	ecbd 8b02 	vpop	{d8}
 80059d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d8:	2d46      	cmp	r5, #70	@ 0x46
 80059da:	eb00 0204 	add.w	r2, r0, r4
 80059de:	d1e9      	bne.n	80059b4 <__cvt+0x58>
 80059e0:	7803      	ldrb	r3, [r0, #0]
 80059e2:	2b30      	cmp	r3, #48	@ 0x30
 80059e4:	d107      	bne.n	80059f6 <__cvt+0x9a>
 80059e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80059ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ee:	bf1c      	itt	ne
 80059f0:	f1c4 0401 	rsbne	r4, r4, #1
 80059f4:	6034      	strne	r4, [r6, #0]
 80059f6:	6833      	ldr	r3, [r6, #0]
 80059f8:	441a      	add	r2, r3
 80059fa:	e7db      	b.n	80059b4 <__cvt+0x58>
 80059fc:	1c5c      	adds	r4, r3, #1
 80059fe:	9403      	str	r4, [sp, #12]
 8005a00:	7019      	strb	r1, [r3, #0]
 8005a02:	e7de      	b.n	80059c2 <__cvt+0x66>

08005a04 <__exponent>:
 8005a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a06:	2900      	cmp	r1, #0
 8005a08:	bfba      	itte	lt
 8005a0a:	4249      	neglt	r1, r1
 8005a0c:	232d      	movlt	r3, #45	@ 0x2d
 8005a0e:	232b      	movge	r3, #43	@ 0x2b
 8005a10:	2909      	cmp	r1, #9
 8005a12:	7002      	strb	r2, [r0, #0]
 8005a14:	7043      	strb	r3, [r0, #1]
 8005a16:	dd29      	ble.n	8005a6c <__exponent+0x68>
 8005a18:	f10d 0307 	add.w	r3, sp, #7
 8005a1c:	461d      	mov	r5, r3
 8005a1e:	270a      	movs	r7, #10
 8005a20:	461a      	mov	r2, r3
 8005a22:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a26:	fb07 1416 	mls	r4, r7, r6, r1
 8005a2a:	3430      	adds	r4, #48	@ 0x30
 8005a2c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a30:	460c      	mov	r4, r1
 8005a32:	2c63      	cmp	r4, #99	@ 0x63
 8005a34:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a38:	4631      	mov	r1, r6
 8005a3a:	dcf1      	bgt.n	8005a20 <__exponent+0x1c>
 8005a3c:	3130      	adds	r1, #48	@ 0x30
 8005a3e:	1e94      	subs	r4, r2, #2
 8005a40:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a44:	1c41      	adds	r1, r0, #1
 8005a46:	4623      	mov	r3, r4
 8005a48:	42ab      	cmp	r3, r5
 8005a4a:	d30a      	bcc.n	8005a62 <__exponent+0x5e>
 8005a4c:	f10d 0309 	add.w	r3, sp, #9
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	42ac      	cmp	r4, r5
 8005a54:	bf88      	it	hi
 8005a56:	2300      	movhi	r3, #0
 8005a58:	3302      	adds	r3, #2
 8005a5a:	4403      	add	r3, r0
 8005a5c:	1a18      	subs	r0, r3, r0
 8005a5e:	b003      	add	sp, #12
 8005a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a62:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a66:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a6a:	e7ed      	b.n	8005a48 <__exponent+0x44>
 8005a6c:	2330      	movs	r3, #48	@ 0x30
 8005a6e:	3130      	adds	r1, #48	@ 0x30
 8005a70:	7083      	strb	r3, [r0, #2]
 8005a72:	70c1      	strb	r1, [r0, #3]
 8005a74:	1d03      	adds	r3, r0, #4
 8005a76:	e7f1      	b.n	8005a5c <__exponent+0x58>

08005a78 <_printf_float>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	b08d      	sub	sp, #52	@ 0x34
 8005a7e:	460c      	mov	r4, r1
 8005a80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a84:	4616      	mov	r6, r2
 8005a86:	461f      	mov	r7, r3
 8005a88:	4605      	mov	r5, r0
 8005a8a:	f000 fca9 	bl	80063e0 <_localeconv_r>
 8005a8e:	f8d0 b000 	ldr.w	fp, [r0]
 8005a92:	4658      	mov	r0, fp
 8005a94:	f7fa fc7c 	bl	8000390 <strlen>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	9005      	str	r0, [sp, #20]
 8005aa8:	3307      	adds	r3, #7
 8005aaa:	f023 0307 	bic.w	r3, r3, #7
 8005aae:	f103 0108 	add.w	r1, r3, #8
 8005ab2:	f8c8 1000 	str.w	r1, [r8]
 8005ab6:	ed93 0b00 	vldr	d0, [r3]
 8005aba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005d18 <_printf_float+0x2a0>
 8005abe:	eeb0 7bc0 	vabs.f64	d7, d0
 8005ac2:	eeb4 7b46 	vcmp.f64	d7, d6
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8005ace:	dd24      	ble.n	8005b1a <_printf_float+0xa2>
 8005ad0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad8:	d502      	bpl.n	8005ae0 <_printf_float+0x68>
 8005ada:	232d      	movs	r3, #45	@ 0x2d
 8005adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ae0:	498f      	ldr	r1, [pc, #572]	@ (8005d20 <_printf_float+0x2a8>)
 8005ae2:	4b90      	ldr	r3, [pc, #576]	@ (8005d24 <_printf_float+0x2ac>)
 8005ae4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8005ae8:	bf8c      	ite	hi
 8005aea:	4688      	movhi	r8, r1
 8005aec:	4698      	movls	r8, r3
 8005aee:	f022 0204 	bic.w	r2, r2, #4
 8005af2:	2303      	movs	r3, #3
 8005af4:	6123      	str	r3, [r4, #16]
 8005af6:	6022      	str	r2, [r4, #0]
 8005af8:	f04f 0a00 	mov.w	sl, #0
 8005afc:	9700      	str	r7, [sp, #0]
 8005afe:	4633      	mov	r3, r6
 8005b00:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005b02:	4621      	mov	r1, r4
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 f9d1 	bl	8005eac <_printf_common>
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f040 8089 	bne.w	8005c22 <_printf_float+0x1aa>
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	b00d      	add	sp, #52	@ 0x34
 8005b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1a:	eeb4 0b40 	vcmp.f64	d0, d0
 8005b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b22:	d709      	bvc.n	8005b38 <_printf_float+0xc0>
 8005b24:	ee10 3a90 	vmov	r3, s1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bfbc      	itt	lt
 8005b2c:	232d      	movlt	r3, #45	@ 0x2d
 8005b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b32:	497d      	ldr	r1, [pc, #500]	@ (8005d28 <_printf_float+0x2b0>)
 8005b34:	4b7d      	ldr	r3, [pc, #500]	@ (8005d2c <_printf_float+0x2b4>)
 8005b36:	e7d5      	b.n	8005ae4 <_printf_float+0x6c>
 8005b38:	6863      	ldr	r3, [r4, #4]
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005b40:	d139      	bne.n	8005bb6 <_printf_float+0x13e>
 8005b42:	2306      	movs	r3, #6
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6022      	str	r2, [r4, #0]
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005b56:	ab09      	add	r3, sp, #36	@ 0x24
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	6861      	ldr	r1, [r4, #4]
 8005b5c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b60:	4628      	mov	r0, r5
 8005b62:	f7ff fefb 	bl	800595c <__cvt>
 8005b66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	d129      	bne.n	8005bc4 <_printf_float+0x14c>
 8005b70:	1cc8      	adds	r0, r1, #3
 8005b72:	db02      	blt.n	8005b7a <_printf_float+0x102>
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	4299      	cmp	r1, r3
 8005b78:	dd41      	ble.n	8005bfe <_printf_float+0x186>
 8005b7a:	f1a9 0902 	sub.w	r9, r9, #2
 8005b7e:	fa5f f989 	uxtb.w	r9, r9
 8005b82:	3901      	subs	r1, #1
 8005b84:	464a      	mov	r2, r9
 8005b86:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b8c:	f7ff ff3a 	bl	8005a04 <__exponent>
 8005b90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b92:	1813      	adds	r3, r2, r0
 8005b94:	2a01      	cmp	r2, #1
 8005b96:	4682      	mov	sl, r0
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	dc02      	bgt.n	8005ba2 <_printf_float+0x12a>
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	07d2      	lsls	r2, r2, #31
 8005ba0:	d501      	bpl.n	8005ba6 <_printf_float+0x12e>
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0a6      	beq.n	8005afc <_printf_float+0x84>
 8005bae:	232d      	movs	r3, #45	@ 0x2d
 8005bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb4:	e7a2      	b.n	8005afc <_printf_float+0x84>
 8005bb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bba:	d1c4      	bne.n	8005b46 <_printf_float+0xce>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1c2      	bne.n	8005b46 <_printf_float+0xce>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e7bf      	b.n	8005b44 <_printf_float+0xcc>
 8005bc4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005bc8:	d9db      	bls.n	8005b82 <_printf_float+0x10a>
 8005bca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8005bce:	d118      	bne.n	8005c02 <_printf_float+0x18a>
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	6863      	ldr	r3, [r4, #4]
 8005bd4:	dd0b      	ble.n	8005bee <_printf_float+0x176>
 8005bd6:	6121      	str	r1, [r4, #16]
 8005bd8:	b913      	cbnz	r3, 8005be0 <_printf_float+0x168>
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	07d0      	lsls	r0, r2, #31
 8005bde:	d502      	bpl.n	8005be6 <_printf_float+0x16e>
 8005be0:	3301      	adds	r3, #1
 8005be2:	440b      	add	r3, r1
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005be8:	f04f 0a00 	mov.w	sl, #0
 8005bec:	e7db      	b.n	8005ba6 <_printf_float+0x12e>
 8005bee:	b913      	cbnz	r3, 8005bf6 <_printf_float+0x17e>
 8005bf0:	6822      	ldr	r2, [r4, #0]
 8005bf2:	07d2      	lsls	r2, r2, #31
 8005bf4:	d501      	bpl.n	8005bfa <_printf_float+0x182>
 8005bf6:	3302      	adds	r3, #2
 8005bf8:	e7f4      	b.n	8005be4 <_printf_float+0x16c>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e7f2      	b.n	8005be4 <_printf_float+0x16c>
 8005bfe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8005c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c04:	4299      	cmp	r1, r3
 8005c06:	db05      	blt.n	8005c14 <_printf_float+0x19c>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	6121      	str	r1, [r4, #16]
 8005c0c:	07d8      	lsls	r0, r3, #31
 8005c0e:	d5ea      	bpl.n	8005be6 <_printf_float+0x16e>
 8005c10:	1c4b      	adds	r3, r1, #1
 8005c12:	e7e7      	b.n	8005be4 <_printf_float+0x16c>
 8005c14:	2900      	cmp	r1, #0
 8005c16:	bfd4      	ite	le
 8005c18:	f1c1 0202 	rsble	r2, r1, #2
 8005c1c:	2201      	movgt	r2, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	e7e0      	b.n	8005be4 <_printf_float+0x16c>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	055a      	lsls	r2, r3, #21
 8005c26:	d407      	bmi.n	8005c38 <_printf_float+0x1c0>
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	d12a      	bne.n	8005c8c <_printf_float+0x214>
 8005c36:	e76b      	b.n	8005b10 <_printf_float+0x98>
 8005c38:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005c3c:	f240 80e0 	bls.w	8005e00 <_printf_float+0x388>
 8005c40:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005c44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4c:	d133      	bne.n	8005cb6 <_printf_float+0x23e>
 8005c4e:	4a38      	ldr	r2, [pc, #224]	@ (8005d30 <_printf_float+0x2b8>)
 8005c50:	2301      	movs	r3, #1
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f af59 	beq.w	8005b10 <_printf_float+0x98>
 8005c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c62:	4543      	cmp	r3, r8
 8005c64:	db02      	blt.n	8005c6c <_printf_float+0x1f4>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	07d8      	lsls	r0, r3, #31
 8005c6a:	d50f      	bpl.n	8005c8c <_printf_float+0x214>
 8005c6c:	9b05      	ldr	r3, [sp, #20]
 8005c6e:	465a      	mov	r2, fp
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f af4a 	beq.w	8005b10 <_printf_float+0x98>
 8005c7c:	f04f 0900 	mov.w	r9, #0
 8005c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c84:	f104 0a1a 	add.w	sl, r4, #26
 8005c88:	45c8      	cmp	r8, r9
 8005c8a:	dc09      	bgt.n	8005ca0 <_printf_float+0x228>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	079b      	lsls	r3, r3, #30
 8005c90:	f100 8107 	bmi.w	8005ea2 <_printf_float+0x42a>
 8005c94:	68e0      	ldr	r0, [r4, #12]
 8005c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	bfb8      	it	lt
 8005c9c:	4618      	movlt	r0, r3
 8005c9e:	e739      	b.n	8005b14 <_printf_float+0x9c>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f af30 	beq.w	8005b10 <_printf_float+0x98>
 8005cb0:	f109 0901 	add.w	r9, r9, #1
 8005cb4:	e7e8      	b.n	8005c88 <_printf_float+0x210>
 8005cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	dc3b      	bgt.n	8005d34 <_printf_float+0x2bc>
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d30 <_printf_float+0x2b8>)
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f af22 	beq.w	8005b10 <_printf_float+0x98>
 8005ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8005cd4:	d102      	bne.n	8005cdc <_printf_float+0x264>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	07d9      	lsls	r1, r3, #31
 8005cda:	d5d7      	bpl.n	8005c8c <_printf_float+0x214>
 8005cdc:	9b05      	ldr	r3, [sp, #20]
 8005cde:	465a      	mov	r2, fp
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f af12 	beq.w	8005b10 <_printf_float+0x98>
 8005cec:	f04f 0a00 	mov.w	sl, #0
 8005cf0:	f104 0b1a 	add.w	fp, r4, #26
 8005cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cf6:	425b      	negs	r3, r3
 8005cf8:	4553      	cmp	r3, sl
 8005cfa:	dc01      	bgt.n	8005d00 <_printf_float+0x288>
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	e794      	b.n	8005c2a <_printf_float+0x1b2>
 8005d00:	2301      	movs	r3, #1
 8005d02:	465a      	mov	r2, fp
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f af00 	beq.w	8005b10 <_printf_float+0x98>
 8005d10:	f10a 0a01 	add.w	sl, sl, #1
 8005d14:	e7ee      	b.n	8005cf4 <_printf_float+0x27c>
 8005d16:	bf00      	nop
 8005d18:	ffffffff 	.word	0xffffffff
 8005d1c:	7fefffff 	.word	0x7fefffff
 8005d20:	0800816c 	.word	0x0800816c
 8005d24:	08008168 	.word	0x08008168
 8005d28:	08008174 	.word	0x08008174
 8005d2c:	08008170 	.word	0x08008170
 8005d30:	08008178 	.word	0x08008178
 8005d34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d3a:	4553      	cmp	r3, sl
 8005d3c:	bfa8      	it	ge
 8005d3e:	4653      	movge	r3, sl
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	4699      	mov	r9, r3
 8005d44:	dc37      	bgt.n	8005db6 <_printf_float+0x33e>
 8005d46:	2300      	movs	r3, #0
 8005d48:	9307      	str	r3, [sp, #28]
 8005d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d4e:	f104 021a 	add.w	r2, r4, #26
 8005d52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d54:	9907      	ldr	r1, [sp, #28]
 8005d56:	9306      	str	r3, [sp, #24]
 8005d58:	eba3 0309 	sub.w	r3, r3, r9
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	dc31      	bgt.n	8005dc4 <_printf_float+0x34c>
 8005d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d62:	459a      	cmp	sl, r3
 8005d64:	dc3b      	bgt.n	8005dde <_printf_float+0x366>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	07da      	lsls	r2, r3, #31
 8005d6a:	d438      	bmi.n	8005dde <_printf_float+0x366>
 8005d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6e:	ebaa 0903 	sub.w	r9, sl, r3
 8005d72:	9b06      	ldr	r3, [sp, #24]
 8005d74:	ebaa 0303 	sub.w	r3, sl, r3
 8005d78:	4599      	cmp	r9, r3
 8005d7a:	bfa8      	it	ge
 8005d7c:	4699      	movge	r9, r3
 8005d7e:	f1b9 0f00 	cmp.w	r9, #0
 8005d82:	dc34      	bgt.n	8005dee <_printf_float+0x376>
 8005d84:	f04f 0800 	mov.w	r8, #0
 8005d88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d8c:	f104 0b1a 	add.w	fp, r4, #26
 8005d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d92:	ebaa 0303 	sub.w	r3, sl, r3
 8005d96:	eba3 0309 	sub.w	r3, r3, r9
 8005d9a:	4543      	cmp	r3, r8
 8005d9c:	f77f af76 	ble.w	8005c8c <_printf_float+0x214>
 8005da0:	2301      	movs	r3, #1
 8005da2:	465a      	mov	r2, fp
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	f43f aeb0 	beq.w	8005b10 <_printf_float+0x98>
 8005db0:	f108 0801 	add.w	r8, r8, #1
 8005db4:	e7ec      	b.n	8005d90 <_printf_float+0x318>
 8005db6:	4642      	mov	r2, r8
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d1c1      	bne.n	8005d46 <_printf_float+0x2ce>
 8005dc2:	e6a5      	b.n	8005b10 <_printf_float+0x98>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	9206      	str	r2, [sp, #24]
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f ae9e 	beq.w	8005b10 <_printf_float+0x98>
 8005dd4:	9b07      	ldr	r3, [sp, #28]
 8005dd6:	9a06      	ldr	r2, [sp, #24]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	9307      	str	r3, [sp, #28]
 8005ddc:	e7b9      	b.n	8005d52 <_printf_float+0x2da>
 8005dde:	9b05      	ldr	r3, [sp, #20]
 8005de0:	465a      	mov	r2, fp
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	d1bf      	bne.n	8005d6c <_printf_float+0x2f4>
 8005dec:	e690      	b.n	8005b10 <_printf_float+0x98>
 8005dee:	9a06      	ldr	r2, [sp, #24]
 8005df0:	464b      	mov	r3, r9
 8005df2:	4442      	add	r2, r8
 8005df4:	4631      	mov	r1, r6
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d1c2      	bne.n	8005d84 <_printf_float+0x30c>
 8005dfe:	e687      	b.n	8005b10 <_printf_float+0x98>
 8005e00:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8005e04:	f1b9 0f01 	cmp.w	r9, #1
 8005e08:	dc01      	bgt.n	8005e0e <_printf_float+0x396>
 8005e0a:	07db      	lsls	r3, r3, #31
 8005e0c:	d536      	bpl.n	8005e7c <_printf_float+0x404>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4642      	mov	r2, r8
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f ae79 	beq.w	8005b10 <_printf_float+0x98>
 8005e1e:	9b05      	ldr	r3, [sp, #20]
 8005e20:	465a      	mov	r2, fp
 8005e22:	4631      	mov	r1, r6
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f43f ae71 	beq.w	8005b10 <_printf_float+0x98>
 8005e2e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8005e3e:	d018      	beq.n	8005e72 <_printf_float+0x3fa>
 8005e40:	464b      	mov	r3, r9
 8005e42:	f108 0201 	add.w	r2, r8, #1
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d10c      	bne.n	8005e6a <_printf_float+0x3f2>
 8005e50:	e65e      	b.n	8005b10 <_printf_float+0x98>
 8005e52:	2301      	movs	r3, #1
 8005e54:	465a      	mov	r2, fp
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f43f ae57 	beq.w	8005b10 <_printf_float+0x98>
 8005e62:	f108 0801 	add.w	r8, r8, #1
 8005e66:	45c8      	cmp	r8, r9
 8005e68:	dbf3      	blt.n	8005e52 <_printf_float+0x3da>
 8005e6a:	4653      	mov	r3, sl
 8005e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e70:	e6dc      	b.n	8005c2c <_printf_float+0x1b4>
 8005e72:	f04f 0800 	mov.w	r8, #0
 8005e76:	f104 0b1a 	add.w	fp, r4, #26
 8005e7a:	e7f4      	b.n	8005e66 <_printf_float+0x3ee>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4642      	mov	r2, r8
 8005e80:	e7e1      	b.n	8005e46 <_printf_float+0x3ce>
 8005e82:	2301      	movs	r3, #1
 8005e84:	464a      	mov	r2, r9
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f ae3f 	beq.w	8005b10 <_printf_float+0x98>
 8005e92:	f108 0801 	add.w	r8, r8, #1
 8005e96:	68e3      	ldr	r3, [r4, #12]
 8005e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e9a:	1a5b      	subs	r3, r3, r1
 8005e9c:	4543      	cmp	r3, r8
 8005e9e:	dcf0      	bgt.n	8005e82 <_printf_float+0x40a>
 8005ea0:	e6f8      	b.n	8005c94 <_printf_float+0x21c>
 8005ea2:	f04f 0800 	mov.w	r8, #0
 8005ea6:	f104 0919 	add.w	r9, r4, #25
 8005eaa:	e7f4      	b.n	8005e96 <_printf_float+0x41e>

08005eac <_printf_common>:
 8005eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb0:	4616      	mov	r6, r2
 8005eb2:	4698      	mov	r8, r3
 8005eb4:	688a      	ldr	r2, [r1, #8]
 8005eb6:	690b      	ldr	r3, [r1, #16]
 8005eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	bfb8      	it	lt
 8005ec0:	4613      	movlt	r3, r2
 8005ec2:	6033      	str	r3, [r6, #0]
 8005ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ec8:	4607      	mov	r7, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	b10a      	cbz	r2, 8005ed2 <_printf_common+0x26>
 8005ece:	3301      	adds	r3, #1
 8005ed0:	6033      	str	r3, [r6, #0]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	0699      	lsls	r1, r3, #26
 8005ed6:	bf42      	ittt	mi
 8005ed8:	6833      	ldrmi	r3, [r6, #0]
 8005eda:	3302      	addmi	r3, #2
 8005edc:	6033      	strmi	r3, [r6, #0]
 8005ede:	6825      	ldr	r5, [r4, #0]
 8005ee0:	f015 0506 	ands.w	r5, r5, #6
 8005ee4:	d106      	bne.n	8005ef4 <_printf_common+0x48>
 8005ee6:	f104 0a19 	add.w	sl, r4, #25
 8005eea:	68e3      	ldr	r3, [r4, #12]
 8005eec:	6832      	ldr	r2, [r6, #0]
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	dc26      	bgt.n	8005f42 <_printf_common+0x96>
 8005ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	3b00      	subs	r3, #0
 8005efc:	bf18      	it	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	0692      	lsls	r2, r2, #26
 8005f02:	d42b      	bmi.n	8005f5c <_printf_common+0xb0>
 8005f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f08:	4641      	mov	r1, r8
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	47c8      	blx	r9
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d01e      	beq.n	8005f50 <_printf_common+0xa4>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	6922      	ldr	r2, [r4, #16]
 8005f16:	f003 0306 	and.w	r3, r3, #6
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	bf02      	ittt	eq
 8005f1e:	68e5      	ldreq	r5, [r4, #12]
 8005f20:	6833      	ldreq	r3, [r6, #0]
 8005f22:	1aed      	subeq	r5, r5, r3
 8005f24:	68a3      	ldr	r3, [r4, #8]
 8005f26:	bf0c      	ite	eq
 8005f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f2c:	2500      	movne	r5, #0
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	bfc4      	itt	gt
 8005f32:	1a9b      	subgt	r3, r3, r2
 8005f34:	18ed      	addgt	r5, r5, r3
 8005f36:	2600      	movs	r6, #0
 8005f38:	341a      	adds	r4, #26
 8005f3a:	42b5      	cmp	r5, r6
 8005f3c:	d11a      	bne.n	8005f74 <_printf_common+0xc8>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e008      	b.n	8005f54 <_printf_common+0xa8>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4652      	mov	r2, sl
 8005f46:	4641      	mov	r1, r8
 8005f48:	4638      	mov	r0, r7
 8005f4a:	47c8      	blx	r9
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d103      	bne.n	8005f58 <_printf_common+0xac>
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	3501      	adds	r5, #1
 8005f5a:	e7c6      	b.n	8005eea <_printf_common+0x3e>
 8005f5c:	18e1      	adds	r1, r4, r3
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	2030      	movs	r0, #48	@ 0x30
 8005f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f66:	4422      	add	r2, r4
 8005f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f70:	3302      	adds	r3, #2
 8005f72:	e7c7      	b.n	8005f04 <_printf_common+0x58>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4622      	mov	r2, r4
 8005f78:	4641      	mov	r1, r8
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c8      	blx	r9
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d0e6      	beq.n	8005f50 <_printf_common+0xa4>
 8005f82:	3601      	adds	r6, #1
 8005f84:	e7d9      	b.n	8005f3a <_printf_common+0x8e>
	...

08005f88 <_printf_i>:
 8005f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	7e0f      	ldrb	r7, [r1, #24]
 8005f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f90:	2f78      	cmp	r7, #120	@ 0x78
 8005f92:	4691      	mov	r9, r2
 8005f94:	4680      	mov	r8, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	469a      	mov	sl, r3
 8005f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f9e:	d807      	bhi.n	8005fb0 <_printf_i+0x28>
 8005fa0:	2f62      	cmp	r7, #98	@ 0x62
 8005fa2:	d80a      	bhi.n	8005fba <_printf_i+0x32>
 8005fa4:	2f00      	cmp	r7, #0
 8005fa6:	f000 80d1 	beq.w	800614c <_printf_i+0x1c4>
 8005faa:	2f58      	cmp	r7, #88	@ 0x58
 8005fac:	f000 80b8 	beq.w	8006120 <_printf_i+0x198>
 8005fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fb8:	e03a      	b.n	8006030 <_printf_i+0xa8>
 8005fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fbe:	2b15      	cmp	r3, #21
 8005fc0:	d8f6      	bhi.n	8005fb0 <_printf_i+0x28>
 8005fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8005fc8 <_printf_i+0x40>)
 8005fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc8:	08006021 	.word	0x08006021
 8005fcc:	08006035 	.word	0x08006035
 8005fd0:	08005fb1 	.word	0x08005fb1
 8005fd4:	08005fb1 	.word	0x08005fb1
 8005fd8:	08005fb1 	.word	0x08005fb1
 8005fdc:	08005fb1 	.word	0x08005fb1
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	08005fb1 	.word	0x08005fb1
 8005fe8:	08005fb1 	.word	0x08005fb1
 8005fec:	08005fb1 	.word	0x08005fb1
 8005ff0:	08005fb1 	.word	0x08005fb1
 8005ff4:	08006133 	.word	0x08006133
 8005ff8:	0800605f 	.word	0x0800605f
 8005ffc:	080060ed 	.word	0x080060ed
 8006000:	08005fb1 	.word	0x08005fb1
 8006004:	08005fb1 	.word	0x08005fb1
 8006008:	08006155 	.word	0x08006155
 800600c:	08005fb1 	.word	0x08005fb1
 8006010:	0800605f 	.word	0x0800605f
 8006014:	08005fb1 	.word	0x08005fb1
 8006018:	08005fb1 	.word	0x08005fb1
 800601c:	080060f5 	.word	0x080060f5
 8006020:	6833      	ldr	r3, [r6, #0]
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6032      	str	r2, [r6, #0]
 8006028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800602c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006030:	2301      	movs	r3, #1
 8006032:	e09c      	b.n	800616e <_printf_i+0x1e6>
 8006034:	6833      	ldr	r3, [r6, #0]
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	1d19      	adds	r1, r3, #4
 800603a:	6031      	str	r1, [r6, #0]
 800603c:	0606      	lsls	r6, r0, #24
 800603e:	d501      	bpl.n	8006044 <_printf_i+0xbc>
 8006040:	681d      	ldr	r5, [r3, #0]
 8006042:	e003      	b.n	800604c <_printf_i+0xc4>
 8006044:	0645      	lsls	r5, r0, #25
 8006046:	d5fb      	bpl.n	8006040 <_printf_i+0xb8>
 8006048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800604c:	2d00      	cmp	r5, #0
 800604e:	da03      	bge.n	8006058 <_printf_i+0xd0>
 8006050:	232d      	movs	r3, #45	@ 0x2d
 8006052:	426d      	negs	r5, r5
 8006054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006058:	4858      	ldr	r0, [pc, #352]	@ (80061bc <_printf_i+0x234>)
 800605a:	230a      	movs	r3, #10
 800605c:	e011      	b.n	8006082 <_printf_i+0xfa>
 800605e:	6821      	ldr	r1, [r4, #0]
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	0608      	lsls	r0, r1, #24
 8006064:	f853 5b04 	ldr.w	r5, [r3], #4
 8006068:	d402      	bmi.n	8006070 <_printf_i+0xe8>
 800606a:	0649      	lsls	r1, r1, #25
 800606c:	bf48      	it	mi
 800606e:	b2ad      	uxthmi	r5, r5
 8006070:	2f6f      	cmp	r7, #111	@ 0x6f
 8006072:	4852      	ldr	r0, [pc, #328]	@ (80061bc <_printf_i+0x234>)
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	bf14      	ite	ne
 8006078:	230a      	movne	r3, #10
 800607a:	2308      	moveq	r3, #8
 800607c:	2100      	movs	r1, #0
 800607e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006082:	6866      	ldr	r6, [r4, #4]
 8006084:	60a6      	str	r6, [r4, #8]
 8006086:	2e00      	cmp	r6, #0
 8006088:	db05      	blt.n	8006096 <_printf_i+0x10e>
 800608a:	6821      	ldr	r1, [r4, #0]
 800608c:	432e      	orrs	r6, r5
 800608e:	f021 0104 	bic.w	r1, r1, #4
 8006092:	6021      	str	r1, [r4, #0]
 8006094:	d04b      	beq.n	800612e <_printf_i+0x1a6>
 8006096:	4616      	mov	r6, r2
 8006098:	fbb5 f1f3 	udiv	r1, r5, r3
 800609c:	fb03 5711 	mls	r7, r3, r1, r5
 80060a0:	5dc7      	ldrb	r7, [r0, r7]
 80060a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060a6:	462f      	mov	r7, r5
 80060a8:	42bb      	cmp	r3, r7
 80060aa:	460d      	mov	r5, r1
 80060ac:	d9f4      	bls.n	8006098 <_printf_i+0x110>
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d10b      	bne.n	80060ca <_printf_i+0x142>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	07df      	lsls	r7, r3, #31
 80060b6:	d508      	bpl.n	80060ca <_printf_i+0x142>
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	6861      	ldr	r1, [r4, #4]
 80060bc:	4299      	cmp	r1, r3
 80060be:	bfde      	ittt	le
 80060c0:	2330      	movle	r3, #48	@ 0x30
 80060c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060ca:	1b92      	subs	r2, r2, r6
 80060cc:	6122      	str	r2, [r4, #16]
 80060ce:	f8cd a000 	str.w	sl, [sp]
 80060d2:	464b      	mov	r3, r9
 80060d4:	aa03      	add	r2, sp, #12
 80060d6:	4621      	mov	r1, r4
 80060d8:	4640      	mov	r0, r8
 80060da:	f7ff fee7 	bl	8005eac <_printf_common>
 80060de:	3001      	adds	r0, #1
 80060e0:	d14a      	bne.n	8006178 <_printf_i+0x1f0>
 80060e2:	f04f 30ff 	mov.w	r0, #4294967295
 80060e6:	b004      	add	sp, #16
 80060e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	f043 0320 	orr.w	r3, r3, #32
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	4832      	ldr	r0, [pc, #200]	@ (80061c0 <_printf_i+0x238>)
 80060f6:	2778      	movs	r7, #120	@ 0x78
 80060f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	6831      	ldr	r1, [r6, #0]
 8006100:	061f      	lsls	r7, r3, #24
 8006102:	f851 5b04 	ldr.w	r5, [r1], #4
 8006106:	d402      	bmi.n	800610e <_printf_i+0x186>
 8006108:	065f      	lsls	r7, r3, #25
 800610a:	bf48      	it	mi
 800610c:	b2ad      	uxthmi	r5, r5
 800610e:	6031      	str	r1, [r6, #0]
 8006110:	07d9      	lsls	r1, r3, #31
 8006112:	bf44      	itt	mi
 8006114:	f043 0320 	orrmi.w	r3, r3, #32
 8006118:	6023      	strmi	r3, [r4, #0]
 800611a:	b11d      	cbz	r5, 8006124 <_printf_i+0x19c>
 800611c:	2310      	movs	r3, #16
 800611e:	e7ad      	b.n	800607c <_printf_i+0xf4>
 8006120:	4826      	ldr	r0, [pc, #152]	@ (80061bc <_printf_i+0x234>)
 8006122:	e7e9      	b.n	80060f8 <_printf_i+0x170>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	f023 0320 	bic.w	r3, r3, #32
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	e7f6      	b.n	800611c <_printf_i+0x194>
 800612e:	4616      	mov	r6, r2
 8006130:	e7bd      	b.n	80060ae <_printf_i+0x126>
 8006132:	6833      	ldr	r3, [r6, #0]
 8006134:	6825      	ldr	r5, [r4, #0]
 8006136:	6961      	ldr	r1, [r4, #20]
 8006138:	1d18      	adds	r0, r3, #4
 800613a:	6030      	str	r0, [r6, #0]
 800613c:	062e      	lsls	r6, r5, #24
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	d501      	bpl.n	8006146 <_printf_i+0x1be>
 8006142:	6019      	str	r1, [r3, #0]
 8006144:	e002      	b.n	800614c <_printf_i+0x1c4>
 8006146:	0668      	lsls	r0, r5, #25
 8006148:	d5fb      	bpl.n	8006142 <_printf_i+0x1ba>
 800614a:	8019      	strh	r1, [r3, #0]
 800614c:	2300      	movs	r3, #0
 800614e:	6123      	str	r3, [r4, #16]
 8006150:	4616      	mov	r6, r2
 8006152:	e7bc      	b.n	80060ce <_printf_i+0x146>
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	1d1a      	adds	r2, r3, #4
 8006158:	6032      	str	r2, [r6, #0]
 800615a:	681e      	ldr	r6, [r3, #0]
 800615c:	6862      	ldr	r2, [r4, #4]
 800615e:	2100      	movs	r1, #0
 8006160:	4630      	mov	r0, r6
 8006162:	f7fa f8c5 	bl	80002f0 <memchr>
 8006166:	b108      	cbz	r0, 800616c <_printf_i+0x1e4>
 8006168:	1b80      	subs	r0, r0, r6
 800616a:	6060      	str	r0, [r4, #4]
 800616c:	6863      	ldr	r3, [r4, #4]
 800616e:	6123      	str	r3, [r4, #16]
 8006170:	2300      	movs	r3, #0
 8006172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006176:	e7aa      	b.n	80060ce <_printf_i+0x146>
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	4632      	mov	r2, r6
 800617c:	4649      	mov	r1, r9
 800617e:	4640      	mov	r0, r8
 8006180:	47d0      	blx	sl
 8006182:	3001      	adds	r0, #1
 8006184:	d0ad      	beq.n	80060e2 <_printf_i+0x15a>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	079b      	lsls	r3, r3, #30
 800618a:	d413      	bmi.n	80061b4 <_printf_i+0x22c>
 800618c:	68e0      	ldr	r0, [r4, #12]
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	4298      	cmp	r0, r3
 8006192:	bfb8      	it	lt
 8006194:	4618      	movlt	r0, r3
 8006196:	e7a6      	b.n	80060e6 <_printf_i+0x15e>
 8006198:	2301      	movs	r3, #1
 800619a:	4632      	mov	r2, r6
 800619c:	4649      	mov	r1, r9
 800619e:	4640      	mov	r0, r8
 80061a0:	47d0      	blx	sl
 80061a2:	3001      	adds	r0, #1
 80061a4:	d09d      	beq.n	80060e2 <_printf_i+0x15a>
 80061a6:	3501      	adds	r5, #1
 80061a8:	68e3      	ldr	r3, [r4, #12]
 80061aa:	9903      	ldr	r1, [sp, #12]
 80061ac:	1a5b      	subs	r3, r3, r1
 80061ae:	42ab      	cmp	r3, r5
 80061b0:	dcf2      	bgt.n	8006198 <_printf_i+0x210>
 80061b2:	e7eb      	b.n	800618c <_printf_i+0x204>
 80061b4:	2500      	movs	r5, #0
 80061b6:	f104 0619 	add.w	r6, r4, #25
 80061ba:	e7f5      	b.n	80061a8 <_printf_i+0x220>
 80061bc:	0800817a 	.word	0x0800817a
 80061c0:	0800818b 	.word	0x0800818b

080061c4 <std>:
 80061c4:	2300      	movs	r3, #0
 80061c6:	b510      	push	{r4, lr}
 80061c8:	4604      	mov	r4, r0
 80061ca:	e9c0 3300 	strd	r3, r3, [r0]
 80061ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061d2:	6083      	str	r3, [r0, #8]
 80061d4:	8181      	strh	r1, [r0, #12]
 80061d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80061d8:	81c2      	strh	r2, [r0, #14]
 80061da:	6183      	str	r3, [r0, #24]
 80061dc:	4619      	mov	r1, r3
 80061de:	2208      	movs	r2, #8
 80061e0:	305c      	adds	r0, #92	@ 0x5c
 80061e2:	f000 f8f4 	bl	80063ce <memset>
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <std+0x58>)
 80061e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <std+0x5c>)
 80061ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <std+0x60>)
 80061f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <std+0x64>)
 80061f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80061f6:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <std+0x68>)
 80061f8:	6224      	str	r4, [r4, #32]
 80061fa:	429c      	cmp	r4, r3
 80061fc:	d006      	beq.n	800620c <std+0x48>
 80061fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006202:	4294      	cmp	r4, r2
 8006204:	d002      	beq.n	800620c <std+0x48>
 8006206:	33d0      	adds	r3, #208	@ 0xd0
 8006208:	429c      	cmp	r4, r3
 800620a:	d105      	bne.n	8006218 <std+0x54>
 800620c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006214:	f000 b958 	b.w	80064c8 <__retarget_lock_init_recursive>
 8006218:	bd10      	pop	{r4, pc}
 800621a:	bf00      	nop
 800621c:	08006349 	.word	0x08006349
 8006220:	0800636b 	.word	0x0800636b
 8006224:	080063a3 	.word	0x080063a3
 8006228:	080063c7 	.word	0x080063c7
 800622c:	240004d8 	.word	0x240004d8

08006230 <stdio_exit_handler>:
 8006230:	4a02      	ldr	r2, [pc, #8]	@ (800623c <stdio_exit_handler+0xc>)
 8006232:	4903      	ldr	r1, [pc, #12]	@ (8006240 <stdio_exit_handler+0x10>)
 8006234:	4803      	ldr	r0, [pc, #12]	@ (8006244 <stdio_exit_handler+0x14>)
 8006236:	f000 b869 	b.w	800630c <_fwalk_sglue>
 800623a:	bf00      	nop
 800623c:	24000010 	.word	0x24000010
 8006240:	08007a99 	.word	0x08007a99
 8006244:	24000020 	.word	0x24000020

08006248 <cleanup_stdio>:
 8006248:	6841      	ldr	r1, [r0, #4]
 800624a:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <cleanup_stdio+0x34>)
 800624c:	4299      	cmp	r1, r3
 800624e:	b510      	push	{r4, lr}
 8006250:	4604      	mov	r4, r0
 8006252:	d001      	beq.n	8006258 <cleanup_stdio+0x10>
 8006254:	f001 fc20 	bl	8007a98 <_fflush_r>
 8006258:	68a1      	ldr	r1, [r4, #8]
 800625a:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <cleanup_stdio+0x38>)
 800625c:	4299      	cmp	r1, r3
 800625e:	d002      	beq.n	8006266 <cleanup_stdio+0x1e>
 8006260:	4620      	mov	r0, r4
 8006262:	f001 fc19 	bl	8007a98 <_fflush_r>
 8006266:	68e1      	ldr	r1, [r4, #12]
 8006268:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <cleanup_stdio+0x3c>)
 800626a:	4299      	cmp	r1, r3
 800626c:	d004      	beq.n	8006278 <cleanup_stdio+0x30>
 800626e:	4620      	mov	r0, r4
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	f001 bc10 	b.w	8007a98 <_fflush_r>
 8006278:	bd10      	pop	{r4, pc}
 800627a:	bf00      	nop
 800627c:	240004d8 	.word	0x240004d8
 8006280:	24000540 	.word	0x24000540
 8006284:	240005a8 	.word	0x240005a8

08006288 <global_stdio_init.part.0>:
 8006288:	b510      	push	{r4, lr}
 800628a:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <global_stdio_init.part.0+0x30>)
 800628c:	4c0b      	ldr	r4, [pc, #44]	@ (80062bc <global_stdio_init.part.0+0x34>)
 800628e:	4a0c      	ldr	r2, [pc, #48]	@ (80062c0 <global_stdio_init.part.0+0x38>)
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	4620      	mov	r0, r4
 8006294:	2200      	movs	r2, #0
 8006296:	2104      	movs	r1, #4
 8006298:	f7ff ff94 	bl	80061c4 <std>
 800629c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062a0:	2201      	movs	r2, #1
 80062a2:	2109      	movs	r1, #9
 80062a4:	f7ff ff8e 	bl	80061c4 <std>
 80062a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062ac:	2202      	movs	r2, #2
 80062ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b2:	2112      	movs	r1, #18
 80062b4:	f7ff bf86 	b.w	80061c4 <std>
 80062b8:	24000610 	.word	0x24000610
 80062bc:	240004d8 	.word	0x240004d8
 80062c0:	08006231 	.word	0x08006231

080062c4 <__sfp_lock_acquire>:
 80062c4:	4801      	ldr	r0, [pc, #4]	@ (80062cc <__sfp_lock_acquire+0x8>)
 80062c6:	f000 b900 	b.w	80064ca <__retarget_lock_acquire_recursive>
 80062ca:	bf00      	nop
 80062cc:	24000619 	.word	0x24000619

080062d0 <__sfp_lock_release>:
 80062d0:	4801      	ldr	r0, [pc, #4]	@ (80062d8 <__sfp_lock_release+0x8>)
 80062d2:	f000 b8fb 	b.w	80064cc <__retarget_lock_release_recursive>
 80062d6:	bf00      	nop
 80062d8:	24000619 	.word	0x24000619

080062dc <__sinit>:
 80062dc:	b510      	push	{r4, lr}
 80062de:	4604      	mov	r4, r0
 80062e0:	f7ff fff0 	bl	80062c4 <__sfp_lock_acquire>
 80062e4:	6a23      	ldr	r3, [r4, #32]
 80062e6:	b11b      	cbz	r3, 80062f0 <__sinit+0x14>
 80062e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ec:	f7ff bff0 	b.w	80062d0 <__sfp_lock_release>
 80062f0:	4b04      	ldr	r3, [pc, #16]	@ (8006304 <__sinit+0x28>)
 80062f2:	6223      	str	r3, [r4, #32]
 80062f4:	4b04      	ldr	r3, [pc, #16]	@ (8006308 <__sinit+0x2c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f5      	bne.n	80062e8 <__sinit+0xc>
 80062fc:	f7ff ffc4 	bl	8006288 <global_stdio_init.part.0>
 8006300:	e7f2      	b.n	80062e8 <__sinit+0xc>
 8006302:	bf00      	nop
 8006304:	08006249 	.word	0x08006249
 8006308:	24000610 	.word	0x24000610

0800630c <_fwalk_sglue>:
 800630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006310:	4607      	mov	r7, r0
 8006312:	4688      	mov	r8, r1
 8006314:	4614      	mov	r4, r2
 8006316:	2600      	movs	r6, #0
 8006318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800631c:	f1b9 0901 	subs.w	r9, r9, #1
 8006320:	d505      	bpl.n	800632e <_fwalk_sglue+0x22>
 8006322:	6824      	ldr	r4, [r4, #0]
 8006324:	2c00      	cmp	r4, #0
 8006326:	d1f7      	bne.n	8006318 <_fwalk_sglue+0xc>
 8006328:	4630      	mov	r0, r6
 800632a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d907      	bls.n	8006344 <_fwalk_sglue+0x38>
 8006334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006338:	3301      	adds	r3, #1
 800633a:	d003      	beq.n	8006344 <_fwalk_sglue+0x38>
 800633c:	4629      	mov	r1, r5
 800633e:	4638      	mov	r0, r7
 8006340:	47c0      	blx	r8
 8006342:	4306      	orrs	r6, r0
 8006344:	3568      	adds	r5, #104	@ 0x68
 8006346:	e7e9      	b.n	800631c <_fwalk_sglue+0x10>

08006348 <__sread>:
 8006348:	b510      	push	{r4, lr}
 800634a:	460c      	mov	r4, r1
 800634c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006350:	f000 f86c 	bl	800642c <_read_r>
 8006354:	2800      	cmp	r0, #0
 8006356:	bfab      	itete	ge
 8006358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800635a:	89a3      	ldrhlt	r3, [r4, #12]
 800635c:	181b      	addge	r3, r3, r0
 800635e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006362:	bfac      	ite	ge
 8006364:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006366:	81a3      	strhlt	r3, [r4, #12]
 8006368:	bd10      	pop	{r4, pc}

0800636a <__swrite>:
 800636a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	461f      	mov	r7, r3
 8006370:	898b      	ldrh	r3, [r1, #12]
 8006372:	05db      	lsls	r3, r3, #23
 8006374:	4605      	mov	r5, r0
 8006376:	460c      	mov	r4, r1
 8006378:	4616      	mov	r6, r2
 800637a:	d505      	bpl.n	8006388 <__swrite+0x1e>
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	2302      	movs	r3, #2
 8006382:	2200      	movs	r2, #0
 8006384:	f000 f840 	bl	8006408 <_lseek_r>
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800638e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006392:	81a3      	strh	r3, [r4, #12]
 8006394:	4632      	mov	r2, r6
 8006396:	463b      	mov	r3, r7
 8006398:	4628      	mov	r0, r5
 800639a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800639e:	f000 b857 	b.w	8006450 <_write_r>

080063a2 <__sseek>:
 80063a2:	b510      	push	{r4, lr}
 80063a4:	460c      	mov	r4, r1
 80063a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063aa:	f000 f82d 	bl	8006408 <_lseek_r>
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	bf15      	itete	ne
 80063b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063be:	81a3      	strheq	r3, [r4, #12]
 80063c0:	bf18      	it	ne
 80063c2:	81a3      	strhne	r3, [r4, #12]
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <__sclose>:
 80063c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ca:	f000 b80d 	b.w	80063e8 <_close_r>

080063ce <memset>:
 80063ce:	4402      	add	r2, r0
 80063d0:	4603      	mov	r3, r0
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d100      	bne.n	80063d8 <memset+0xa>
 80063d6:	4770      	bx	lr
 80063d8:	f803 1b01 	strb.w	r1, [r3], #1
 80063dc:	e7f9      	b.n	80063d2 <memset+0x4>
	...

080063e0 <_localeconv_r>:
 80063e0:	4800      	ldr	r0, [pc, #0]	@ (80063e4 <_localeconv_r+0x4>)
 80063e2:	4770      	bx	lr
 80063e4:	2400015c 	.word	0x2400015c

080063e8 <_close_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d06      	ldr	r5, [pc, #24]	@ (8006404 <_close_r+0x1c>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fa fa1b 	bl	800082e <_close>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_close_r+0x1a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_close_r+0x1a>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	24000614 	.word	0x24000614

08006408 <_lseek_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d07      	ldr	r5, [pc, #28]	@ (8006428 <_lseek_r+0x20>)
 800640c:	4604      	mov	r4, r0
 800640e:	4608      	mov	r0, r1
 8006410:	4611      	mov	r1, r2
 8006412:	2200      	movs	r2, #0
 8006414:	602a      	str	r2, [r5, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	f7fa fa30 	bl	800087c <_lseek>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_lseek_r+0x1e>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_lseek_r+0x1e>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	24000614 	.word	0x24000614

0800642c <_read_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	@ (800644c <_read_r+0x20>)
 8006430:	4604      	mov	r4, r0
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	2200      	movs	r2, #0
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f7fa f9be 	bl	80007bc <_read>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_read_r+0x1e>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_read_r+0x1e>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	24000614 	.word	0x24000614

08006450 <_write_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d07      	ldr	r5, [pc, #28]	@ (8006470 <_write_r+0x20>)
 8006454:	4604      	mov	r4, r0
 8006456:	4608      	mov	r0, r1
 8006458:	4611      	mov	r1, r2
 800645a:	2200      	movs	r2, #0
 800645c:	602a      	str	r2, [r5, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	f7fa f9c9 	bl	80007f6 <_write>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_write_r+0x1e>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_write_r+0x1e>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	24000614 	.word	0x24000614

08006474 <__errno>:
 8006474:	4b01      	ldr	r3, [pc, #4]	@ (800647c <__errno+0x8>)
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	2400001c 	.word	0x2400001c

08006480 <__libc_init_array>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	4d0d      	ldr	r5, [pc, #52]	@ (80064b8 <__libc_init_array+0x38>)
 8006484:	4c0d      	ldr	r4, [pc, #52]	@ (80064bc <__libc_init_array+0x3c>)
 8006486:	1b64      	subs	r4, r4, r5
 8006488:	10a4      	asrs	r4, r4, #2
 800648a:	2600      	movs	r6, #0
 800648c:	42a6      	cmp	r6, r4
 800648e:	d109      	bne.n	80064a4 <__libc_init_array+0x24>
 8006490:	4d0b      	ldr	r5, [pc, #44]	@ (80064c0 <__libc_init_array+0x40>)
 8006492:	4c0c      	ldr	r4, [pc, #48]	@ (80064c4 <__libc_init_array+0x44>)
 8006494:	f001 fe4e 	bl	8008134 <_init>
 8006498:	1b64      	subs	r4, r4, r5
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	2600      	movs	r6, #0
 800649e:	42a6      	cmp	r6, r4
 80064a0:	d105      	bne.n	80064ae <__libc_init_array+0x2e>
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a8:	4798      	blx	r3
 80064aa:	3601      	adds	r6, #1
 80064ac:	e7ee      	b.n	800648c <__libc_init_array+0xc>
 80064ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b2:	4798      	blx	r3
 80064b4:	3601      	adds	r6, #1
 80064b6:	e7f2      	b.n	800649e <__libc_init_array+0x1e>
 80064b8:	080084e4 	.word	0x080084e4
 80064bc:	080084e4 	.word	0x080084e4
 80064c0:	080084e4 	.word	0x080084e4
 80064c4:	080084e8 	.word	0x080084e8

080064c8 <__retarget_lock_init_recursive>:
 80064c8:	4770      	bx	lr

080064ca <__retarget_lock_acquire_recursive>:
 80064ca:	4770      	bx	lr

080064cc <__retarget_lock_release_recursive>:
 80064cc:	4770      	bx	lr

080064ce <quorem>:
 80064ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d2:	6903      	ldr	r3, [r0, #16]
 80064d4:	690c      	ldr	r4, [r1, #16]
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	4607      	mov	r7, r0
 80064da:	db7e      	blt.n	80065da <quorem+0x10c>
 80064dc:	3c01      	subs	r4, #1
 80064de:	f101 0814 	add.w	r8, r1, #20
 80064e2:	00a3      	lsls	r3, r4, #2
 80064e4:	f100 0514 	add.w	r5, r0, #20
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f8:	3301      	adds	r3, #1
 80064fa:	429a      	cmp	r2, r3
 80064fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006500:	fbb2 f6f3 	udiv	r6, r2, r3
 8006504:	d32e      	bcc.n	8006564 <quorem+0x96>
 8006506:	f04f 0a00 	mov.w	sl, #0
 800650a:	46c4      	mov	ip, r8
 800650c:	46ae      	mov	lr, r5
 800650e:	46d3      	mov	fp, sl
 8006510:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006514:	b298      	uxth	r0, r3
 8006516:	fb06 a000 	mla	r0, r6, r0, sl
 800651a:	0c02      	lsrs	r2, r0, #16
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	fb06 2303 	mla	r3, r6, r3, r2
 8006522:	f8de 2000 	ldr.w	r2, [lr]
 8006526:	b280      	uxth	r0, r0
 8006528:	b292      	uxth	r2, r2
 800652a:	1a12      	subs	r2, r2, r0
 800652c:	445a      	add	r2, fp
 800652e:	f8de 0000 	ldr.w	r0, [lr]
 8006532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006536:	b29b      	uxth	r3, r3
 8006538:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800653c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006540:	b292      	uxth	r2, r2
 8006542:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006546:	45e1      	cmp	r9, ip
 8006548:	f84e 2b04 	str.w	r2, [lr], #4
 800654c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006550:	d2de      	bcs.n	8006510 <quorem+0x42>
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	58eb      	ldr	r3, [r5, r3]
 8006556:	b92b      	cbnz	r3, 8006564 <quorem+0x96>
 8006558:	9b01      	ldr	r3, [sp, #4]
 800655a:	3b04      	subs	r3, #4
 800655c:	429d      	cmp	r5, r3
 800655e:	461a      	mov	r2, r3
 8006560:	d32f      	bcc.n	80065c2 <quorem+0xf4>
 8006562:	613c      	str	r4, [r7, #16]
 8006564:	4638      	mov	r0, r7
 8006566:	f001 f90b 	bl	8007780 <__mcmp>
 800656a:	2800      	cmp	r0, #0
 800656c:	db25      	blt.n	80065ba <quorem+0xec>
 800656e:	4629      	mov	r1, r5
 8006570:	2000      	movs	r0, #0
 8006572:	f858 2b04 	ldr.w	r2, [r8], #4
 8006576:	f8d1 c000 	ldr.w	ip, [r1]
 800657a:	fa1f fe82 	uxth.w	lr, r2
 800657e:	fa1f f38c 	uxth.w	r3, ip
 8006582:	eba3 030e 	sub.w	r3, r3, lr
 8006586:	4403      	add	r3, r0
 8006588:	0c12      	lsrs	r2, r2, #16
 800658a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800658e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006598:	45c1      	cmp	r9, r8
 800659a:	f841 3b04 	str.w	r3, [r1], #4
 800659e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065a2:	d2e6      	bcs.n	8006572 <quorem+0xa4>
 80065a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ac:	b922      	cbnz	r2, 80065b8 <quorem+0xea>
 80065ae:	3b04      	subs	r3, #4
 80065b0:	429d      	cmp	r5, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	d30b      	bcc.n	80065ce <quorem+0x100>
 80065b6:	613c      	str	r4, [r7, #16]
 80065b8:	3601      	adds	r6, #1
 80065ba:	4630      	mov	r0, r6
 80065bc:	b003      	add	sp, #12
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d1cb      	bne.n	8006562 <quorem+0x94>
 80065ca:	3c01      	subs	r4, #1
 80065cc:	e7c6      	b.n	800655c <quorem+0x8e>
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	d1ef      	bne.n	80065b6 <quorem+0xe8>
 80065d6:	3c01      	subs	r4, #1
 80065d8:	e7ea      	b.n	80065b0 <quorem+0xe2>
 80065da:	2000      	movs	r0, #0
 80065dc:	e7ee      	b.n	80065bc <quorem+0xee>
	...

080065e0 <_dtoa_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	ed2d 8b02 	vpush	{d8}
 80065e8:	69c7      	ldr	r7, [r0, #28]
 80065ea:	b091      	sub	sp, #68	@ 0x44
 80065ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80065f0:	ec55 4b10 	vmov	r4, r5, d0
 80065f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80065f6:	9107      	str	r1, [sp, #28]
 80065f8:	4681      	mov	r9, r0
 80065fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80065fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80065fe:	b97f      	cbnz	r7, 8006620 <_dtoa_r+0x40>
 8006600:	2010      	movs	r0, #16
 8006602:	f000 fd95 	bl	8007130 <malloc>
 8006606:	4602      	mov	r2, r0
 8006608:	f8c9 001c 	str.w	r0, [r9, #28]
 800660c:	b920      	cbnz	r0, 8006618 <_dtoa_r+0x38>
 800660e:	4ba0      	ldr	r3, [pc, #640]	@ (8006890 <_dtoa_r+0x2b0>)
 8006610:	21ef      	movs	r1, #239	@ 0xef
 8006612:	48a0      	ldr	r0, [pc, #640]	@ (8006894 <_dtoa_r+0x2b4>)
 8006614:	f001 fa86 	bl	8007b24 <__assert_func>
 8006618:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800661c:	6007      	str	r7, [r0, #0]
 800661e:	60c7      	str	r7, [r0, #12]
 8006620:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006624:	6819      	ldr	r1, [r3, #0]
 8006626:	b159      	cbz	r1, 8006640 <_dtoa_r+0x60>
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	604a      	str	r2, [r1, #4]
 800662c:	2301      	movs	r3, #1
 800662e:	4093      	lsls	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
 8006632:	4648      	mov	r0, r9
 8006634:	f000 fe72 	bl	800731c <_Bfree>
 8006638:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	1e2b      	subs	r3, r5, #0
 8006642:	bfbb      	ittet	lt
 8006644:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006648:	9303      	strlt	r3, [sp, #12]
 800664a:	2300      	movge	r3, #0
 800664c:	2201      	movlt	r2, #1
 800664e:	bfac      	ite	ge
 8006650:	6033      	strge	r3, [r6, #0]
 8006652:	6032      	strlt	r2, [r6, #0]
 8006654:	4b90      	ldr	r3, [pc, #576]	@ (8006898 <_dtoa_r+0x2b8>)
 8006656:	9e03      	ldr	r6, [sp, #12]
 8006658:	43b3      	bics	r3, r6
 800665a:	d110      	bne.n	800667e <_dtoa_r+0x9e>
 800665c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800665e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006668:	4323      	orrs	r3, r4
 800666a:	f000 84e6 	beq.w	800703a <_dtoa_r+0xa5a>
 800666e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006670:	4f8a      	ldr	r7, [pc, #552]	@ (800689c <_dtoa_r+0x2bc>)
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 84e8 	beq.w	8007048 <_dtoa_r+0xa68>
 8006678:	1cfb      	adds	r3, r7, #3
 800667a:	f000 bce3 	b.w	8007044 <_dtoa_r+0xa64>
 800667e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006682:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	d10a      	bne.n	80066a2 <_dtoa_r+0xc2>
 800668c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800668e:	2301      	movs	r3, #1
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006694:	b113      	cbz	r3, 800669c <_dtoa_r+0xbc>
 8006696:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006698:	4b81      	ldr	r3, [pc, #516]	@ (80068a0 <_dtoa_r+0x2c0>)
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	4f81      	ldr	r7, [pc, #516]	@ (80068a4 <_dtoa_r+0x2c4>)
 800669e:	f000 bcd3 	b.w	8007048 <_dtoa_r+0xa68>
 80066a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80066a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80066a6:	4648      	mov	r0, r9
 80066a8:	eeb0 0b48 	vmov.f64	d0, d8
 80066ac:	f001 f918 	bl	80078e0 <__d2b>
 80066b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80066b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066b6:	9001      	str	r0, [sp, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d045      	beq.n	8006748 <_dtoa_r+0x168>
 80066bc:	eeb0 7b48 	vmov.f64	d7, d8
 80066c0:	ee18 1a90 	vmov	r1, s17
 80066c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80066c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80066cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80066d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80066d4:	2500      	movs	r5, #0
 80066d6:	ee07 1a90 	vmov	s15, r1
 80066da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80066de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006878 <_dtoa_r+0x298>
 80066e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006880 <_dtoa_r+0x2a0>
 80066ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80066ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006888 <_dtoa_r+0x2a8>
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80066fa:	eeb0 7b46 	vmov.f64	d7, d6
 80066fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006702:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006706:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800670a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670e:	ee16 8a90 	vmov	r8, s13
 8006712:	d508      	bpl.n	8006726 <_dtoa_r+0x146>
 8006714:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006718:	eeb4 6b47 	vcmp.f64	d6, d7
 800671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006720:	bf18      	it	ne
 8006722:	f108 38ff 	addne.w	r8, r8, #4294967295
 8006726:	f1b8 0f16 	cmp.w	r8, #22
 800672a:	d82b      	bhi.n	8006784 <_dtoa_r+0x1a4>
 800672c:	495e      	ldr	r1, [pc, #376]	@ (80068a8 <_dtoa_r+0x2c8>)
 800672e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8006732:	ed91 7b00 	vldr	d7, [r1]
 8006736:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673e:	d501      	bpl.n	8006744 <_dtoa_r+0x164>
 8006740:	f108 38ff 	add.w	r8, r8, #4294967295
 8006744:	2100      	movs	r1, #0
 8006746:	e01e      	b.n	8006786 <_dtoa_r+0x1a6>
 8006748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800674a:	4413      	add	r3, r2
 800674c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006750:	2920      	cmp	r1, #32
 8006752:	bfc1      	itttt	gt
 8006754:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006758:	408e      	lslgt	r6, r1
 800675a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800675e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8006762:	bfd6      	itet	le
 8006764:	f1c1 0120 	rsble	r1, r1, #32
 8006768:	4331      	orrgt	r1, r6
 800676a:	fa04 f101 	lslle.w	r1, r4, r1
 800676e:	ee07 1a90 	vmov	s15, r1
 8006772:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006776:	3b01      	subs	r3, #1
 8006778:	ee17 1a90 	vmov	r1, s15
 800677c:	2501      	movs	r5, #1
 800677e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8006782:	e7a8      	b.n	80066d6 <_dtoa_r+0xf6>
 8006784:	2101      	movs	r1, #1
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	1e53      	subs	r3, r2, #1
 800678a:	9306      	str	r3, [sp, #24]
 800678c:	bf45      	ittet	mi
 800678e:	f1c2 0301 	rsbmi	r3, r2, #1
 8006792:	9304      	strmi	r3, [sp, #16]
 8006794:	2300      	movpl	r3, #0
 8006796:	2300      	movmi	r3, #0
 8006798:	bf4c      	ite	mi
 800679a:	9306      	strmi	r3, [sp, #24]
 800679c:	9304      	strpl	r3, [sp, #16]
 800679e:	f1b8 0f00 	cmp.w	r8, #0
 80067a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80067a4:	db18      	blt.n	80067d8 <_dtoa_r+0x1f8>
 80067a6:	9b06      	ldr	r3, [sp, #24]
 80067a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80067ac:	4443      	add	r3, r8
 80067ae:	9306      	str	r3, [sp, #24]
 80067b0:	2300      	movs	r3, #0
 80067b2:	9a07      	ldr	r2, [sp, #28]
 80067b4:	2a09      	cmp	r2, #9
 80067b6:	d845      	bhi.n	8006844 <_dtoa_r+0x264>
 80067b8:	2a05      	cmp	r2, #5
 80067ba:	bfc4      	itt	gt
 80067bc:	3a04      	subgt	r2, #4
 80067be:	9207      	strgt	r2, [sp, #28]
 80067c0:	9a07      	ldr	r2, [sp, #28]
 80067c2:	f1a2 0202 	sub.w	r2, r2, #2
 80067c6:	bfcc      	ite	gt
 80067c8:	2400      	movgt	r4, #0
 80067ca:	2401      	movle	r4, #1
 80067cc:	2a03      	cmp	r2, #3
 80067ce:	d844      	bhi.n	800685a <_dtoa_r+0x27a>
 80067d0:	e8df f002 	tbb	[pc, r2]
 80067d4:	0b173634 	.word	0x0b173634
 80067d8:	9b04      	ldr	r3, [sp, #16]
 80067da:	2200      	movs	r2, #0
 80067dc:	eba3 0308 	sub.w	r3, r3, r8
 80067e0:	9304      	str	r3, [sp, #16]
 80067e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80067e4:	f1c8 0300 	rsb	r3, r8, #0
 80067e8:	e7e3      	b.n	80067b2 <_dtoa_r+0x1d2>
 80067ea:	2201      	movs	r2, #1
 80067ec:	9208      	str	r2, [sp, #32]
 80067ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067f0:	eb08 0b02 	add.w	fp, r8, r2
 80067f4:	f10b 0a01 	add.w	sl, fp, #1
 80067f8:	4652      	mov	r2, sl
 80067fa:	2a01      	cmp	r2, #1
 80067fc:	bfb8      	it	lt
 80067fe:	2201      	movlt	r2, #1
 8006800:	e006      	b.n	8006810 <_dtoa_r+0x230>
 8006802:	2201      	movs	r2, #1
 8006804:	9208      	str	r2, [sp, #32]
 8006806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006808:	2a00      	cmp	r2, #0
 800680a:	dd29      	ble.n	8006860 <_dtoa_r+0x280>
 800680c:	4693      	mov	fp, r2
 800680e:	4692      	mov	sl, r2
 8006810:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8006814:	2100      	movs	r1, #0
 8006816:	2004      	movs	r0, #4
 8006818:	f100 0614 	add.w	r6, r0, #20
 800681c:	4296      	cmp	r6, r2
 800681e:	d926      	bls.n	800686e <_dtoa_r+0x28e>
 8006820:	6079      	str	r1, [r7, #4]
 8006822:	4648      	mov	r0, r9
 8006824:	9305      	str	r3, [sp, #20]
 8006826:	f000 fd39 	bl	800729c <_Balloc>
 800682a:	9b05      	ldr	r3, [sp, #20]
 800682c:	4607      	mov	r7, r0
 800682e:	2800      	cmp	r0, #0
 8006830:	d13e      	bne.n	80068b0 <_dtoa_r+0x2d0>
 8006832:	4b1e      	ldr	r3, [pc, #120]	@ (80068ac <_dtoa_r+0x2cc>)
 8006834:	4602      	mov	r2, r0
 8006836:	f240 11af 	movw	r1, #431	@ 0x1af
 800683a:	e6ea      	b.n	8006612 <_dtoa_r+0x32>
 800683c:	2200      	movs	r2, #0
 800683e:	e7e1      	b.n	8006804 <_dtoa_r+0x224>
 8006840:	2200      	movs	r2, #0
 8006842:	e7d3      	b.n	80067ec <_dtoa_r+0x20c>
 8006844:	2401      	movs	r4, #1
 8006846:	2200      	movs	r2, #0
 8006848:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800684c:	f04f 3bff 	mov.w	fp, #4294967295
 8006850:	2100      	movs	r1, #0
 8006852:	46da      	mov	sl, fp
 8006854:	2212      	movs	r2, #18
 8006856:	9109      	str	r1, [sp, #36]	@ 0x24
 8006858:	e7da      	b.n	8006810 <_dtoa_r+0x230>
 800685a:	2201      	movs	r2, #1
 800685c:	9208      	str	r2, [sp, #32]
 800685e:	e7f5      	b.n	800684c <_dtoa_r+0x26c>
 8006860:	f04f 0b01 	mov.w	fp, #1
 8006864:	46da      	mov	sl, fp
 8006866:	465a      	mov	r2, fp
 8006868:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800686c:	e7d0      	b.n	8006810 <_dtoa_r+0x230>
 800686e:	3101      	adds	r1, #1
 8006870:	0040      	lsls	r0, r0, #1
 8006872:	e7d1      	b.n	8006818 <_dtoa_r+0x238>
 8006874:	f3af 8000 	nop.w
 8006878:	636f4361 	.word	0x636f4361
 800687c:	3fd287a7 	.word	0x3fd287a7
 8006880:	8b60c8b3 	.word	0x8b60c8b3
 8006884:	3fc68a28 	.word	0x3fc68a28
 8006888:	509f79fb 	.word	0x509f79fb
 800688c:	3fd34413 	.word	0x3fd34413
 8006890:	080081a9 	.word	0x080081a9
 8006894:	080081c0 	.word	0x080081c0
 8006898:	7ff00000 	.word	0x7ff00000
 800689c:	080081a5 	.word	0x080081a5
 80068a0:	08008179 	.word	0x08008179
 80068a4:	08008178 	.word	0x08008178
 80068a8:	08008310 	.word	0x08008310
 80068ac:	08008218 	.word	0x08008218
 80068b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80068b4:	f1ba 0f0e 	cmp.w	sl, #14
 80068b8:	6010      	str	r0, [r2, #0]
 80068ba:	d86e      	bhi.n	800699a <_dtoa_r+0x3ba>
 80068bc:	2c00      	cmp	r4, #0
 80068be:	d06c      	beq.n	800699a <_dtoa_r+0x3ba>
 80068c0:	f1b8 0f00 	cmp.w	r8, #0
 80068c4:	f340 80b4 	ble.w	8006a30 <_dtoa_r+0x450>
 80068c8:	4ac8      	ldr	r2, [pc, #800]	@ (8006bec <_dtoa_r+0x60c>)
 80068ca:	f008 010f 	and.w	r1, r8, #15
 80068ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80068d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80068d6:	ed92 7b00 	vldr	d7, [r2]
 80068da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80068de:	f000 809b 	beq.w	8006a18 <_dtoa_r+0x438>
 80068e2:	4ac3      	ldr	r2, [pc, #780]	@ (8006bf0 <_dtoa_r+0x610>)
 80068e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80068e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80068ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80068f0:	f001 010f 	and.w	r1, r1, #15
 80068f4:	2203      	movs	r2, #3
 80068f6:	48be      	ldr	r0, [pc, #760]	@ (8006bf0 <_dtoa_r+0x610>)
 80068f8:	2900      	cmp	r1, #0
 80068fa:	f040 808f 	bne.w	8006a1c <_dtoa_r+0x43c>
 80068fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006902:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006906:	ed8d 7b02 	vstr	d7, [sp, #8]
 800690a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800690c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006910:	2900      	cmp	r1, #0
 8006912:	f000 80b3 	beq.w	8006a7c <_dtoa_r+0x49c>
 8006916:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800691a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	f140 80ab 	bpl.w	8006a7c <_dtoa_r+0x49c>
 8006926:	f1ba 0f00 	cmp.w	sl, #0
 800692a:	f000 80a7 	beq.w	8006a7c <_dtoa_r+0x49c>
 800692e:	f1bb 0f00 	cmp.w	fp, #0
 8006932:	dd30      	ble.n	8006996 <_dtoa_r+0x3b6>
 8006934:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006938:	ee27 7b06 	vmul.f64	d7, d7, d6
 800693c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006940:	f108 31ff 	add.w	r1, r8, #4294967295
 8006944:	9105      	str	r1, [sp, #20]
 8006946:	3201      	adds	r2, #1
 8006948:	465c      	mov	r4, fp
 800694a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800694e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8006952:	ee07 2a90 	vmov	s15, r2
 8006956:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800695a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800695e:	ee15 2a90 	vmov	r2, s11
 8006962:	ec51 0b15 	vmov	r0, r1, d5
 8006966:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800696a:	2c00      	cmp	r4, #0
 800696c:	f040 808a 	bne.w	8006a84 <_dtoa_r+0x4a4>
 8006970:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006974:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006978:	ec41 0b17 	vmov	d7, r0, r1
 800697c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006984:	f300 826a 	bgt.w	8006e5c <_dtoa_r+0x87c>
 8006988:	eeb1 7b47 	vneg.f64	d7, d7
 800698c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006994:	d423      	bmi.n	80069de <_dtoa_r+0x3fe>
 8006996:	ed8d 8b02 	vstr	d8, [sp, #8]
 800699a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800699c:	2a00      	cmp	r2, #0
 800699e:	f2c0 8129 	blt.w	8006bf4 <_dtoa_r+0x614>
 80069a2:	f1b8 0f0e 	cmp.w	r8, #14
 80069a6:	f300 8125 	bgt.w	8006bf4 <_dtoa_r+0x614>
 80069aa:	4b90      	ldr	r3, [pc, #576]	@ (8006bec <_dtoa_r+0x60c>)
 80069ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069b0:	ed93 6b00 	vldr	d6, [r3]
 80069b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f280 80c8 	bge.w	8006b4c <_dtoa_r+0x56c>
 80069bc:	f1ba 0f00 	cmp.w	sl, #0
 80069c0:	f300 80c4 	bgt.w	8006b4c <_dtoa_r+0x56c>
 80069c4:	d10b      	bne.n	80069de <_dtoa_r+0x3fe>
 80069c6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80069ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80069ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80069d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069da:	f2c0 823c 	blt.w	8006e56 <_dtoa_r+0x876>
 80069de:	2400      	movs	r4, #0
 80069e0:	4625      	mov	r5, r4
 80069e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e4:	43db      	mvns	r3, r3
 80069e6:	9305      	str	r3, [sp, #20]
 80069e8:	463e      	mov	r6, r7
 80069ea:	f04f 0800 	mov.w	r8, #0
 80069ee:	4621      	mov	r1, r4
 80069f0:	4648      	mov	r0, r9
 80069f2:	f000 fc93 	bl	800731c <_Bfree>
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	f000 80a2 	beq.w	8006b40 <_dtoa_r+0x560>
 80069fc:	f1b8 0f00 	cmp.w	r8, #0
 8006a00:	d005      	beq.n	8006a0e <_dtoa_r+0x42e>
 8006a02:	45a8      	cmp	r8, r5
 8006a04:	d003      	beq.n	8006a0e <_dtoa_r+0x42e>
 8006a06:	4641      	mov	r1, r8
 8006a08:	4648      	mov	r0, r9
 8006a0a:	f000 fc87 	bl	800731c <_Bfree>
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4648      	mov	r0, r9
 8006a12:	f000 fc83 	bl	800731c <_Bfree>
 8006a16:	e093      	b.n	8006b40 <_dtoa_r+0x560>
 8006a18:	2202      	movs	r2, #2
 8006a1a:	e76c      	b.n	80068f6 <_dtoa_r+0x316>
 8006a1c:	07cc      	lsls	r4, r1, #31
 8006a1e:	d504      	bpl.n	8006a2a <_dtoa_r+0x44a>
 8006a20:	ed90 6b00 	vldr	d6, [r0]
 8006a24:	3201      	adds	r2, #1
 8006a26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a2a:	1049      	asrs	r1, r1, #1
 8006a2c:	3008      	adds	r0, #8
 8006a2e:	e763      	b.n	80068f8 <_dtoa_r+0x318>
 8006a30:	d022      	beq.n	8006a78 <_dtoa_r+0x498>
 8006a32:	f1c8 0100 	rsb	r1, r8, #0
 8006a36:	4a6d      	ldr	r2, [pc, #436]	@ (8006bec <_dtoa_r+0x60c>)
 8006a38:	f001 000f 	and.w	r0, r1, #15
 8006a3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006a40:	ed92 7b00 	vldr	d7, [r2]
 8006a44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006a48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a4c:	4868      	ldr	r0, [pc, #416]	@ (8006bf0 <_dtoa_r+0x610>)
 8006a4e:	1109      	asrs	r1, r1, #4
 8006a50:	2400      	movs	r4, #0
 8006a52:	2202      	movs	r2, #2
 8006a54:	b929      	cbnz	r1, 8006a62 <_dtoa_r+0x482>
 8006a56:	2c00      	cmp	r4, #0
 8006a58:	f43f af57 	beq.w	800690a <_dtoa_r+0x32a>
 8006a5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a60:	e753      	b.n	800690a <_dtoa_r+0x32a>
 8006a62:	07ce      	lsls	r6, r1, #31
 8006a64:	d505      	bpl.n	8006a72 <_dtoa_r+0x492>
 8006a66:	ed90 6b00 	vldr	d6, [r0]
 8006a6a:	3201      	adds	r2, #1
 8006a6c:	2401      	movs	r4, #1
 8006a6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a72:	1049      	asrs	r1, r1, #1
 8006a74:	3008      	adds	r0, #8
 8006a76:	e7ed      	b.n	8006a54 <_dtoa_r+0x474>
 8006a78:	2202      	movs	r2, #2
 8006a7a:	e746      	b.n	800690a <_dtoa_r+0x32a>
 8006a7c:	f8cd 8014 	str.w	r8, [sp, #20]
 8006a80:	4654      	mov	r4, sl
 8006a82:	e762      	b.n	800694a <_dtoa_r+0x36a>
 8006a84:	4a59      	ldr	r2, [pc, #356]	@ (8006bec <_dtoa_r+0x60c>)
 8006a86:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006a8a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006a8e:	9a08      	ldr	r2, [sp, #32]
 8006a90:	ec41 0b17 	vmov	d7, r0, r1
 8006a94:	443c      	add	r4, r7
 8006a96:	b34a      	cbz	r2, 8006aec <_dtoa_r+0x50c>
 8006a98:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006a9c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8006aa0:	463e      	mov	r6, r7
 8006aa2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006aa6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006aaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006aae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006ab2:	ee14 2a90 	vmov	r2, s9
 8006ab6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006aba:	3230      	adds	r2, #48	@ 0x30
 8006abc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006ac0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac8:	f806 2b01 	strb.w	r2, [r6], #1
 8006acc:	d438      	bmi.n	8006b40 <_dtoa_r+0x560>
 8006ace:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006ad2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ada:	d46e      	bmi.n	8006bba <_dtoa_r+0x5da>
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	f43f af5a 	beq.w	8006996 <_dtoa_r+0x3b6>
 8006ae2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006ae6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006aea:	e7e0      	b.n	8006aae <_dtoa_r+0x4ce>
 8006aec:	4621      	mov	r1, r4
 8006aee:	463e      	mov	r6, r7
 8006af0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006af4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006af8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006afc:	ee14 2a90 	vmov	r2, s9
 8006b00:	3230      	adds	r2, #48	@ 0x30
 8006b02:	f806 2b01 	strb.w	r2, [r6], #1
 8006b06:	42a6      	cmp	r6, r4
 8006b08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006b0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006b10:	d119      	bne.n	8006b46 <_dtoa_r+0x566>
 8006b12:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8006b16:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006b1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b22:	dc4a      	bgt.n	8006bba <_dtoa_r+0x5da>
 8006b24:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006b28:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b30:	f57f af31 	bpl.w	8006996 <_dtoa_r+0x3b6>
 8006b34:	460e      	mov	r6, r1
 8006b36:	3901      	subs	r1, #1
 8006b38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b3c:	2b30      	cmp	r3, #48	@ 0x30
 8006b3e:	d0f9      	beq.n	8006b34 <_dtoa_r+0x554>
 8006b40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006b44:	e027      	b.n	8006b96 <_dtoa_r+0x5b6>
 8006b46:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006b4a:	e7d5      	b.n	8006af8 <_dtoa_r+0x518>
 8006b4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b50:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8006b54:	463e      	mov	r6, r7
 8006b56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006b5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006b5e:	ee15 3a10 	vmov	r3, s10
 8006b62:	3330      	adds	r3, #48	@ 0x30
 8006b64:	f806 3b01 	strb.w	r3, [r6], #1
 8006b68:	1bf3      	subs	r3, r6, r7
 8006b6a:	459a      	cmp	sl, r3
 8006b6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006b70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006b74:	d132      	bne.n	8006bdc <_dtoa_r+0x5fc>
 8006b76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006b7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b82:	dc18      	bgt.n	8006bb6 <_dtoa_r+0x5d6>
 8006b84:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8c:	d103      	bne.n	8006b96 <_dtoa_r+0x5b6>
 8006b8e:	ee15 3a10 	vmov	r3, s10
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d40f      	bmi.n	8006bb6 <_dtoa_r+0x5d6>
 8006b96:	9901      	ldr	r1, [sp, #4]
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f000 fbbf 	bl	800731c <_Bfree>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ba2:	7033      	strb	r3, [r6, #0]
 8006ba4:	f108 0301 	add.w	r3, r8, #1
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 824b 	beq.w	8007048 <_dtoa_r+0xa68>
 8006bb2:	601e      	str	r6, [r3, #0]
 8006bb4:	e248      	b.n	8007048 <_dtoa_r+0xa68>
 8006bb6:	f8cd 8014 	str.w	r8, [sp, #20]
 8006bba:	4633      	mov	r3, r6
 8006bbc:	461e      	mov	r6, r3
 8006bbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bc2:	2a39      	cmp	r2, #57	@ 0x39
 8006bc4:	d106      	bne.n	8006bd4 <_dtoa_r+0x5f4>
 8006bc6:	429f      	cmp	r7, r3
 8006bc8:	d1f8      	bne.n	8006bbc <_dtoa_r+0x5dc>
 8006bca:	9a05      	ldr	r2, [sp, #20]
 8006bcc:	3201      	adds	r2, #1
 8006bce:	9205      	str	r2, [sp, #20]
 8006bd0:	2230      	movs	r2, #48	@ 0x30
 8006bd2:	703a      	strb	r2, [r7, #0]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	3201      	adds	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	e7b1      	b.n	8006b40 <_dtoa_r+0x560>
 8006bdc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006be0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be8:	d1b5      	bne.n	8006b56 <_dtoa_r+0x576>
 8006bea:	e7d4      	b.n	8006b96 <_dtoa_r+0x5b6>
 8006bec:	08008310 	.word	0x08008310
 8006bf0:	080082e8 	.word	0x080082e8
 8006bf4:	9908      	ldr	r1, [sp, #32]
 8006bf6:	2900      	cmp	r1, #0
 8006bf8:	f000 80e9 	beq.w	8006dce <_dtoa_r+0x7ee>
 8006bfc:	9907      	ldr	r1, [sp, #28]
 8006bfe:	2901      	cmp	r1, #1
 8006c00:	f300 80cb 	bgt.w	8006d9a <_dtoa_r+0x7ba>
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	f000 80c4 	beq.w	8006d92 <_dtoa_r+0x7b2>
 8006c0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c0e:	9e04      	ldr	r6, [sp, #16]
 8006c10:	461c      	mov	r4, r3
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	4413      	add	r3, r2
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	4413      	add	r3, r2
 8006c20:	4648      	mov	r0, r9
 8006c22:	9306      	str	r3, [sp, #24]
 8006c24:	f000 fc2e 	bl	8007484 <__i2b>
 8006c28:	9b05      	ldr	r3, [sp, #20]
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	b166      	cbz	r6, 8006c48 <_dtoa_r+0x668>
 8006c2e:	9a06      	ldr	r2, [sp, #24]
 8006c30:	2a00      	cmp	r2, #0
 8006c32:	dd09      	ble.n	8006c48 <_dtoa_r+0x668>
 8006c34:	42b2      	cmp	r2, r6
 8006c36:	9904      	ldr	r1, [sp, #16]
 8006c38:	bfa8      	it	ge
 8006c3a:	4632      	movge	r2, r6
 8006c3c:	1a89      	subs	r1, r1, r2
 8006c3e:	9104      	str	r1, [sp, #16]
 8006c40:	9906      	ldr	r1, [sp, #24]
 8006c42:	1ab6      	subs	r6, r6, r2
 8006c44:	1a8a      	subs	r2, r1, r2
 8006c46:	9206      	str	r2, [sp, #24]
 8006c48:	b30b      	cbz	r3, 8006c8e <_dtoa_r+0x6ae>
 8006c4a:	9a08      	ldr	r2, [sp, #32]
 8006c4c:	2a00      	cmp	r2, #0
 8006c4e:	f000 80c5 	beq.w	8006ddc <_dtoa_r+0x7fc>
 8006c52:	2c00      	cmp	r4, #0
 8006c54:	f000 80bf 	beq.w	8006dd6 <_dtoa_r+0x7f6>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4648      	mov	r0, r9
 8006c5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c60:	f000 fcc8 	bl	80075f4 <__pow5mult>
 8006c64:	9a01      	ldr	r2, [sp, #4]
 8006c66:	4601      	mov	r1, r0
 8006c68:	4605      	mov	r5, r0
 8006c6a:	4648      	mov	r0, r9
 8006c6c:	f000 fc20 	bl	80074b0 <__multiply>
 8006c70:	9901      	ldr	r1, [sp, #4]
 8006c72:	9005      	str	r0, [sp, #20]
 8006c74:	4648      	mov	r0, r9
 8006c76:	f000 fb51 	bl	800731c <_Bfree>
 8006c7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c7c:	1b1b      	subs	r3, r3, r4
 8006c7e:	f000 80b0 	beq.w	8006de2 <_dtoa_r+0x802>
 8006c82:	9905      	ldr	r1, [sp, #20]
 8006c84:	461a      	mov	r2, r3
 8006c86:	4648      	mov	r0, r9
 8006c88:	f000 fcb4 	bl	80075f4 <__pow5mult>
 8006c8c:	9001      	str	r0, [sp, #4]
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4648      	mov	r0, r9
 8006c92:	f000 fbf7 	bl	8007484 <__i2b>
 8006c96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c98:	4604      	mov	r4, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 81da 	beq.w	8007054 <_dtoa_r+0xa74>
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	4648      	mov	r0, r9
 8006ca6:	f000 fca5 	bl	80075f4 <__pow5mult>
 8006caa:	9b07      	ldr	r3, [sp, #28]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	4604      	mov	r4, r0
 8006cb0:	f300 80a0 	bgt.w	8006df4 <_dtoa_r+0x814>
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 8096 	bne.w	8006de8 <_dtoa_r+0x808>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	f040 8092 	bne.w	8006dec <_dtoa_r+0x80c>
 8006cc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ccc:	0d12      	lsrs	r2, r2, #20
 8006cce:	0512      	lsls	r2, r2, #20
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	f000 808d 	beq.w	8006df0 <_dtoa_r+0x810>
 8006cd6:	9b04      	ldr	r3, [sp, #16]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	9306      	str	r3, [sp, #24]
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ce6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 81b9 	beq.w	8007060 <_dtoa_r+0xa80>
 8006cee:	6922      	ldr	r2, [r4, #16]
 8006cf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006cf4:	6910      	ldr	r0, [r2, #16]
 8006cf6:	f000 fb79 	bl	80073ec <__hi0bits>
 8006cfa:	f1c0 0020 	rsb	r0, r0, #32
 8006cfe:	9b06      	ldr	r3, [sp, #24]
 8006d00:	4418      	add	r0, r3
 8006d02:	f010 001f 	ands.w	r0, r0, #31
 8006d06:	f000 8081 	beq.w	8006e0c <_dtoa_r+0x82c>
 8006d0a:	f1c0 0220 	rsb	r2, r0, #32
 8006d0e:	2a04      	cmp	r2, #4
 8006d10:	dd73      	ble.n	8006dfa <_dtoa_r+0x81a>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	f1c0 001c 	rsb	r0, r0, #28
 8006d18:	4403      	add	r3, r0
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	4406      	add	r6, r0
 8006d20:	4403      	add	r3, r0
 8006d22:	9306      	str	r3, [sp, #24]
 8006d24:	9b04      	ldr	r3, [sp, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dd05      	ble.n	8006d36 <_dtoa_r+0x756>
 8006d2a:	9901      	ldr	r1, [sp, #4]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f000 fcba 	bl	80076a8 <__lshift>
 8006d34:	9001      	str	r0, [sp, #4]
 8006d36:	9b06      	ldr	r3, [sp, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dd05      	ble.n	8006d48 <_dtoa_r+0x768>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	461a      	mov	r2, r3
 8006d40:	4648      	mov	r0, r9
 8006d42:	f000 fcb1 	bl	80076a8 <__lshift>
 8006d46:	4604      	mov	r4, r0
 8006d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d060      	beq.n	8006e10 <_dtoa_r+0x830>
 8006d4e:	9801      	ldr	r0, [sp, #4]
 8006d50:	4621      	mov	r1, r4
 8006d52:	f000 fd15 	bl	8007780 <__mcmp>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	da5a      	bge.n	8006e10 <_dtoa_r+0x830>
 8006d5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	9901      	ldr	r1, [sp, #4]
 8006d62:	2300      	movs	r3, #0
 8006d64:	220a      	movs	r2, #10
 8006d66:	4648      	mov	r0, r9
 8006d68:	f000 fafa 	bl	8007360 <__multadd>
 8006d6c:	9b08      	ldr	r3, [sp, #32]
 8006d6e:	9001      	str	r0, [sp, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8177 	beq.w	8007064 <_dtoa_r+0xa84>
 8006d76:	4629      	mov	r1, r5
 8006d78:	2300      	movs	r3, #0
 8006d7a:	220a      	movs	r2, #10
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	f000 faef 	bl	8007360 <__multadd>
 8006d82:	f1bb 0f00 	cmp.w	fp, #0
 8006d86:	4605      	mov	r5, r0
 8006d88:	dc6e      	bgt.n	8006e68 <_dtoa_r+0x888>
 8006d8a:	9b07      	ldr	r3, [sp, #28]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	dc48      	bgt.n	8006e22 <_dtoa_r+0x842>
 8006d90:	e06a      	b.n	8006e68 <_dtoa_r+0x888>
 8006d92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d98:	e739      	b.n	8006c0e <_dtoa_r+0x62e>
 8006d9a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	db07      	blt.n	8006db2 <_dtoa_r+0x7d2>
 8006da2:	f1ba 0f00 	cmp.w	sl, #0
 8006da6:	eba3 0404 	sub.w	r4, r3, r4
 8006daa:	db0b      	blt.n	8006dc4 <_dtoa_r+0x7e4>
 8006dac:	9e04      	ldr	r6, [sp, #16]
 8006dae:	4652      	mov	r2, sl
 8006db0:	e72f      	b.n	8006c12 <_dtoa_r+0x632>
 8006db2:	1ae2      	subs	r2, r4, r3
 8006db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db6:	9e04      	ldr	r6, [sp, #16]
 8006db8:	4413      	add	r3, r2
 8006dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	2400      	movs	r4, #0
 8006dc2:	e726      	b.n	8006c12 <_dtoa_r+0x632>
 8006dc4:	9a04      	ldr	r2, [sp, #16]
 8006dc6:	eba2 060a 	sub.w	r6, r2, sl
 8006dca:	2200      	movs	r2, #0
 8006dcc:	e721      	b.n	8006c12 <_dtoa_r+0x632>
 8006dce:	9e04      	ldr	r6, [sp, #16]
 8006dd0:	9d08      	ldr	r5, [sp, #32]
 8006dd2:	461c      	mov	r4, r3
 8006dd4:	e72a      	b.n	8006c2c <_dtoa_r+0x64c>
 8006dd6:	9a01      	ldr	r2, [sp, #4]
 8006dd8:	9205      	str	r2, [sp, #20]
 8006dda:	e752      	b.n	8006c82 <_dtoa_r+0x6a2>
 8006ddc:	9901      	ldr	r1, [sp, #4]
 8006dde:	461a      	mov	r2, r3
 8006de0:	e751      	b.n	8006c86 <_dtoa_r+0x6a6>
 8006de2:	9b05      	ldr	r3, [sp, #20]
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	e752      	b.n	8006c8e <_dtoa_r+0x6ae>
 8006de8:	2300      	movs	r3, #0
 8006dea:	e77b      	b.n	8006ce4 <_dtoa_r+0x704>
 8006dec:	9b02      	ldr	r3, [sp, #8]
 8006dee:	e779      	b.n	8006ce4 <_dtoa_r+0x704>
 8006df0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006df2:	e778      	b.n	8006ce6 <_dtoa_r+0x706>
 8006df4:	2300      	movs	r3, #0
 8006df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006df8:	e779      	b.n	8006cee <_dtoa_r+0x70e>
 8006dfa:	d093      	beq.n	8006d24 <_dtoa_r+0x744>
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	321c      	adds	r2, #28
 8006e00:	4413      	add	r3, r2
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	9b06      	ldr	r3, [sp, #24]
 8006e06:	4416      	add	r6, r2
 8006e08:	4413      	add	r3, r2
 8006e0a:	e78a      	b.n	8006d22 <_dtoa_r+0x742>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	e7f5      	b.n	8006dfc <_dtoa_r+0x81c>
 8006e10:	f1ba 0f00 	cmp.w	sl, #0
 8006e14:	f8cd 8014 	str.w	r8, [sp, #20]
 8006e18:	46d3      	mov	fp, sl
 8006e1a:	dc21      	bgt.n	8006e60 <_dtoa_r+0x880>
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	dd1e      	ble.n	8006e60 <_dtoa_r+0x880>
 8006e22:	f1bb 0f00 	cmp.w	fp, #0
 8006e26:	f47f addc 	bne.w	80069e2 <_dtoa_r+0x402>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	2205      	movs	r2, #5
 8006e30:	4648      	mov	r0, r9
 8006e32:	f000 fa95 	bl	8007360 <__multadd>
 8006e36:	4601      	mov	r1, r0
 8006e38:	4604      	mov	r4, r0
 8006e3a:	9801      	ldr	r0, [sp, #4]
 8006e3c:	f000 fca0 	bl	8007780 <__mcmp>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f77f adce 	ble.w	80069e2 <_dtoa_r+0x402>
 8006e46:	463e      	mov	r6, r7
 8006e48:	2331      	movs	r3, #49	@ 0x31
 8006e4a:	f806 3b01 	strb.w	r3, [r6], #1
 8006e4e:	9b05      	ldr	r3, [sp, #20]
 8006e50:	3301      	adds	r3, #1
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	e5c9      	b.n	80069ea <_dtoa_r+0x40a>
 8006e56:	f8cd 8014 	str.w	r8, [sp, #20]
 8006e5a:	4654      	mov	r4, sl
 8006e5c:	4625      	mov	r5, r4
 8006e5e:	e7f2      	b.n	8006e46 <_dtoa_r+0x866>
 8006e60:	9b08      	ldr	r3, [sp, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8102 	beq.w	800706c <_dtoa_r+0xa8c>
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	dd05      	ble.n	8006e78 <_dtoa_r+0x898>
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4632      	mov	r2, r6
 8006e70:	4648      	mov	r0, r9
 8006e72:	f000 fc19 	bl	80076a8 <__lshift>
 8006e76:	4605      	mov	r5, r0
 8006e78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d058      	beq.n	8006f30 <_dtoa_r+0x950>
 8006e7e:	6869      	ldr	r1, [r5, #4]
 8006e80:	4648      	mov	r0, r9
 8006e82:	f000 fa0b 	bl	800729c <_Balloc>
 8006e86:	4606      	mov	r6, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <_dtoa_r+0x8b6>
 8006e8a:	4b82      	ldr	r3, [pc, #520]	@ (8007094 <_dtoa_r+0xab4>)
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e92:	f7ff bbbe 	b.w	8006612 <_dtoa_r+0x32>
 8006e96:	692a      	ldr	r2, [r5, #16]
 8006e98:	3202      	adds	r2, #2
 8006e9a:	0092      	lsls	r2, r2, #2
 8006e9c:	f105 010c 	add.w	r1, r5, #12
 8006ea0:	300c      	adds	r0, #12
 8006ea2:	f000 fe31 	bl	8007b08 <memcpy>
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4648      	mov	r0, r9
 8006eac:	f000 fbfc 	bl	80076a8 <__lshift>
 8006eb0:	1c7b      	adds	r3, r7, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	eb07 030b 	add.w	r3, r7, fp
 8006eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eba:	9b02      	ldr	r3, [sp, #8]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	46a8      	mov	r8, r5
 8006ec2:	9308      	str	r3, [sp, #32]
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	9b04      	ldr	r3, [sp, #16]
 8006ec8:	9801      	ldr	r0, [sp, #4]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	f103 3bff 	add.w	fp, r3, #4294967295
 8006ed0:	f7ff fafd 	bl	80064ce <quorem>
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	9002      	str	r0, [sp, #8]
 8006ed8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006edc:	9801      	ldr	r0, [sp, #4]
 8006ede:	f000 fc4f 	bl	8007780 <__mcmp>
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	9006      	str	r0, [sp, #24]
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4648      	mov	r0, r9
 8006eea:	f000 fc65 	bl	80077b8 <__mdiff>
 8006eee:	68c2      	ldr	r2, [r0, #12]
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	b9fa      	cbnz	r2, 8006f34 <_dtoa_r+0x954>
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	9801      	ldr	r0, [sp, #4]
 8006ef8:	f000 fc42 	bl	8007780 <__mcmp>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4631      	mov	r1, r6
 8006f00:	4648      	mov	r0, r9
 8006f02:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f04:	f000 fa0a 	bl	800731c <_Bfree>
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f0c:	9e04      	ldr	r6, [sp, #16]
 8006f0e:	ea42 0103 	orr.w	r1, r2, r3
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	4319      	orrs	r1, r3
 8006f16:	d10f      	bne.n	8006f38 <_dtoa_r+0x958>
 8006f18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006f1c:	d028      	beq.n	8006f70 <_dtoa_r+0x990>
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	dd02      	ble.n	8006f2a <_dtoa_r+0x94a>
 8006f24:	9b02      	ldr	r3, [sp, #8]
 8006f26:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006f2a:	f88b a000 	strb.w	sl, [fp]
 8006f2e:	e55e      	b.n	80069ee <_dtoa_r+0x40e>
 8006f30:	4628      	mov	r0, r5
 8006f32:	e7bd      	b.n	8006eb0 <_dtoa_r+0x8d0>
 8006f34:	2201      	movs	r2, #1
 8006f36:	e7e2      	b.n	8006efe <_dtoa_r+0x91e>
 8006f38:	9b06      	ldr	r3, [sp, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db04      	blt.n	8006f48 <_dtoa_r+0x968>
 8006f3e:	9907      	ldr	r1, [sp, #28]
 8006f40:	430b      	orrs	r3, r1
 8006f42:	9908      	ldr	r1, [sp, #32]
 8006f44:	430b      	orrs	r3, r1
 8006f46:	d120      	bne.n	8006f8a <_dtoa_r+0x9aa>
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	ddee      	ble.n	8006f2a <_dtoa_r+0x94a>
 8006f4c:	9901      	ldr	r1, [sp, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4648      	mov	r0, r9
 8006f52:	f000 fba9 	bl	80076a8 <__lshift>
 8006f56:	4621      	mov	r1, r4
 8006f58:	9001      	str	r0, [sp, #4]
 8006f5a:	f000 fc11 	bl	8007780 <__mcmp>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	dc03      	bgt.n	8006f6a <_dtoa_r+0x98a>
 8006f62:	d1e2      	bne.n	8006f2a <_dtoa_r+0x94a>
 8006f64:	f01a 0f01 	tst.w	sl, #1
 8006f68:	d0df      	beq.n	8006f2a <_dtoa_r+0x94a>
 8006f6a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006f6e:	d1d9      	bne.n	8006f24 <_dtoa_r+0x944>
 8006f70:	2339      	movs	r3, #57	@ 0x39
 8006f72:	f88b 3000 	strb.w	r3, [fp]
 8006f76:	4633      	mov	r3, r6
 8006f78:	461e      	mov	r6, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f80:	2a39      	cmp	r2, #57	@ 0x39
 8006f82:	d052      	beq.n	800702a <_dtoa_r+0xa4a>
 8006f84:	3201      	adds	r2, #1
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	e531      	b.n	80069ee <_dtoa_r+0x40e>
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	dd07      	ble.n	8006f9e <_dtoa_r+0x9be>
 8006f8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006f92:	d0ed      	beq.n	8006f70 <_dtoa_r+0x990>
 8006f94:	f10a 0301 	add.w	r3, sl, #1
 8006f98:	f88b 3000 	strb.w	r3, [fp]
 8006f9c:	e527      	b.n	80069ee <_dtoa_r+0x40e>
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d029      	beq.n	8006ffe <_dtoa_r+0xa1e>
 8006faa:	9901      	ldr	r1, [sp, #4]
 8006fac:	2300      	movs	r3, #0
 8006fae:	220a      	movs	r2, #10
 8006fb0:	4648      	mov	r0, r9
 8006fb2:	f000 f9d5 	bl	8007360 <__multadd>
 8006fb6:	45a8      	cmp	r8, r5
 8006fb8:	9001      	str	r0, [sp, #4]
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	f04f 020a 	mov.w	r2, #10
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	4648      	mov	r0, r9
 8006fc6:	d107      	bne.n	8006fd8 <_dtoa_r+0x9f8>
 8006fc8:	f000 f9ca 	bl	8007360 <__multadd>
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4605      	mov	r5, r0
 8006fd0:	9b04      	ldr	r3, [sp, #16]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	e776      	b.n	8006ec6 <_dtoa_r+0x8e6>
 8006fd8:	f000 f9c2 	bl	8007360 <__multadd>
 8006fdc:	4629      	mov	r1, r5
 8006fde:	4680      	mov	r8, r0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	220a      	movs	r2, #10
 8006fe4:	4648      	mov	r0, r9
 8006fe6:	f000 f9bb 	bl	8007360 <__multadd>
 8006fea:	4605      	mov	r5, r0
 8006fec:	e7f0      	b.n	8006fd0 <_dtoa_r+0x9f0>
 8006fee:	f1bb 0f00 	cmp.w	fp, #0
 8006ff2:	bfcc      	ite	gt
 8006ff4:	465e      	movgt	r6, fp
 8006ff6:	2601      	movle	r6, #1
 8006ff8:	443e      	add	r6, r7
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	9901      	ldr	r1, [sp, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	4648      	mov	r0, r9
 8007004:	f000 fb50 	bl	80076a8 <__lshift>
 8007008:	4621      	mov	r1, r4
 800700a:	9001      	str	r0, [sp, #4]
 800700c:	f000 fbb8 	bl	8007780 <__mcmp>
 8007010:	2800      	cmp	r0, #0
 8007012:	dcb0      	bgt.n	8006f76 <_dtoa_r+0x996>
 8007014:	d102      	bne.n	800701c <_dtoa_r+0xa3c>
 8007016:	f01a 0f01 	tst.w	sl, #1
 800701a:	d1ac      	bne.n	8006f76 <_dtoa_r+0x996>
 800701c:	4633      	mov	r3, r6
 800701e:	461e      	mov	r6, r3
 8007020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007024:	2a30      	cmp	r2, #48	@ 0x30
 8007026:	d0fa      	beq.n	800701e <_dtoa_r+0xa3e>
 8007028:	e4e1      	b.n	80069ee <_dtoa_r+0x40e>
 800702a:	429f      	cmp	r7, r3
 800702c:	d1a4      	bne.n	8006f78 <_dtoa_r+0x998>
 800702e:	9b05      	ldr	r3, [sp, #20]
 8007030:	3301      	adds	r3, #1
 8007032:	9305      	str	r3, [sp, #20]
 8007034:	2331      	movs	r3, #49	@ 0x31
 8007036:	703b      	strb	r3, [r7, #0]
 8007038:	e4d9      	b.n	80069ee <_dtoa_r+0x40e>
 800703a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800703c:	4f16      	ldr	r7, [pc, #88]	@ (8007098 <_dtoa_r+0xab8>)
 800703e:	b11b      	cbz	r3, 8007048 <_dtoa_r+0xa68>
 8007040:	f107 0308 	add.w	r3, r7, #8
 8007044:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	4638      	mov	r0, r7
 800704a:	b011      	add	sp, #68	@ 0x44
 800704c:	ecbd 8b02 	vpop	{d8}
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	9b07      	ldr	r3, [sp, #28]
 8007056:	2b01      	cmp	r3, #1
 8007058:	f77f ae2c 	ble.w	8006cb4 <_dtoa_r+0x6d4>
 800705c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007060:	2001      	movs	r0, #1
 8007062:	e64c      	b.n	8006cfe <_dtoa_r+0x71e>
 8007064:	f1bb 0f00 	cmp.w	fp, #0
 8007068:	f77f aed8 	ble.w	8006e1c <_dtoa_r+0x83c>
 800706c:	463e      	mov	r6, r7
 800706e:	9801      	ldr	r0, [sp, #4]
 8007070:	4621      	mov	r1, r4
 8007072:	f7ff fa2c 	bl	80064ce <quorem>
 8007076:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800707a:	f806 ab01 	strb.w	sl, [r6], #1
 800707e:	1bf2      	subs	r2, r6, r7
 8007080:	4593      	cmp	fp, r2
 8007082:	ddb4      	ble.n	8006fee <_dtoa_r+0xa0e>
 8007084:	9901      	ldr	r1, [sp, #4]
 8007086:	2300      	movs	r3, #0
 8007088:	220a      	movs	r2, #10
 800708a:	4648      	mov	r0, r9
 800708c:	f000 f968 	bl	8007360 <__multadd>
 8007090:	9001      	str	r0, [sp, #4]
 8007092:	e7ec      	b.n	800706e <_dtoa_r+0xa8e>
 8007094:	08008218 	.word	0x08008218
 8007098:	0800819c 	.word	0x0800819c

0800709c <_free_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4605      	mov	r5, r0
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d041      	beq.n	8007128 <_free_r+0x8c>
 80070a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a8:	1f0c      	subs	r4, r1, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bfb8      	it	lt
 80070ae:	18e4      	addlt	r4, r4, r3
 80070b0:	f000 f8e8 	bl	8007284 <__malloc_lock>
 80070b4:	4a1d      	ldr	r2, [pc, #116]	@ (800712c <_free_r+0x90>)
 80070b6:	6813      	ldr	r3, [r2, #0]
 80070b8:	b933      	cbnz	r3, 80070c8 <_free_r+0x2c>
 80070ba:	6063      	str	r3, [r4, #4]
 80070bc:	6014      	str	r4, [r2, #0]
 80070be:	4628      	mov	r0, r5
 80070c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c4:	f000 b8e4 	b.w	8007290 <__malloc_unlock>
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d908      	bls.n	80070de <_free_r+0x42>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	1821      	adds	r1, r4, r0
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf01      	itttt	eq
 80070d4:	6819      	ldreq	r1, [r3, #0]
 80070d6:	685b      	ldreq	r3, [r3, #4]
 80070d8:	1809      	addeq	r1, r1, r0
 80070da:	6021      	streq	r1, [r4, #0]
 80070dc:	e7ed      	b.n	80070ba <_free_r+0x1e>
 80070de:	461a      	mov	r2, r3
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	b10b      	cbz	r3, 80070e8 <_free_r+0x4c>
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d9fa      	bls.n	80070de <_free_r+0x42>
 80070e8:	6811      	ldr	r1, [r2, #0]
 80070ea:	1850      	adds	r0, r2, r1
 80070ec:	42a0      	cmp	r0, r4
 80070ee:	d10b      	bne.n	8007108 <_free_r+0x6c>
 80070f0:	6820      	ldr	r0, [r4, #0]
 80070f2:	4401      	add	r1, r0
 80070f4:	1850      	adds	r0, r2, r1
 80070f6:	4283      	cmp	r3, r0
 80070f8:	6011      	str	r1, [r2, #0]
 80070fa:	d1e0      	bne.n	80070be <_free_r+0x22>
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	6053      	str	r3, [r2, #4]
 8007102:	4408      	add	r0, r1
 8007104:	6010      	str	r0, [r2, #0]
 8007106:	e7da      	b.n	80070be <_free_r+0x22>
 8007108:	d902      	bls.n	8007110 <_free_r+0x74>
 800710a:	230c      	movs	r3, #12
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	e7d6      	b.n	80070be <_free_r+0x22>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	1821      	adds	r1, r4, r0
 8007114:	428b      	cmp	r3, r1
 8007116:	bf04      	itt	eq
 8007118:	6819      	ldreq	r1, [r3, #0]
 800711a:	685b      	ldreq	r3, [r3, #4]
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	bf04      	itt	eq
 8007120:	1809      	addeq	r1, r1, r0
 8007122:	6021      	streq	r1, [r4, #0]
 8007124:	6054      	str	r4, [r2, #4]
 8007126:	e7ca      	b.n	80070be <_free_r+0x22>
 8007128:	bd38      	pop	{r3, r4, r5, pc}
 800712a:	bf00      	nop
 800712c:	24000620 	.word	0x24000620

08007130 <malloc>:
 8007130:	4b02      	ldr	r3, [pc, #8]	@ (800713c <malloc+0xc>)
 8007132:	4601      	mov	r1, r0
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	f000 b825 	b.w	8007184 <_malloc_r>
 800713a:	bf00      	nop
 800713c:	2400001c 	.word	0x2400001c

08007140 <sbrk_aligned>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	4e0f      	ldr	r6, [pc, #60]	@ (8007180 <sbrk_aligned+0x40>)
 8007144:	460c      	mov	r4, r1
 8007146:	6831      	ldr	r1, [r6, #0]
 8007148:	4605      	mov	r5, r0
 800714a:	b911      	cbnz	r1, 8007152 <sbrk_aligned+0x12>
 800714c:	f000 fccc 	bl	8007ae8 <_sbrk_r>
 8007150:	6030      	str	r0, [r6, #0]
 8007152:	4621      	mov	r1, r4
 8007154:	4628      	mov	r0, r5
 8007156:	f000 fcc7 	bl	8007ae8 <_sbrk_r>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d103      	bne.n	8007166 <sbrk_aligned+0x26>
 800715e:	f04f 34ff 	mov.w	r4, #4294967295
 8007162:	4620      	mov	r0, r4
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	1cc4      	adds	r4, r0, #3
 8007168:	f024 0403 	bic.w	r4, r4, #3
 800716c:	42a0      	cmp	r0, r4
 800716e:	d0f8      	beq.n	8007162 <sbrk_aligned+0x22>
 8007170:	1a21      	subs	r1, r4, r0
 8007172:	4628      	mov	r0, r5
 8007174:	f000 fcb8 	bl	8007ae8 <_sbrk_r>
 8007178:	3001      	adds	r0, #1
 800717a:	d1f2      	bne.n	8007162 <sbrk_aligned+0x22>
 800717c:	e7ef      	b.n	800715e <sbrk_aligned+0x1e>
 800717e:	bf00      	nop
 8007180:	2400061c 	.word	0x2400061c

08007184 <_malloc_r>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	1ccd      	adds	r5, r1, #3
 800718a:	f025 0503 	bic.w	r5, r5, #3
 800718e:	3508      	adds	r5, #8
 8007190:	2d0c      	cmp	r5, #12
 8007192:	bf38      	it	cc
 8007194:	250c      	movcc	r5, #12
 8007196:	2d00      	cmp	r5, #0
 8007198:	4606      	mov	r6, r0
 800719a:	db01      	blt.n	80071a0 <_malloc_r+0x1c>
 800719c:	42a9      	cmp	r1, r5
 800719e:	d904      	bls.n	80071aa <_malloc_r+0x26>
 80071a0:	230c      	movs	r3, #12
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	2000      	movs	r0, #0
 80071a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007280 <_malloc_r+0xfc>
 80071ae:	f000 f869 	bl	8007284 <__malloc_lock>
 80071b2:	f8d8 3000 	ldr.w	r3, [r8]
 80071b6:	461c      	mov	r4, r3
 80071b8:	bb44      	cbnz	r4, 800720c <_malloc_r+0x88>
 80071ba:	4629      	mov	r1, r5
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ffbf 	bl	8007140 <sbrk_aligned>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	4604      	mov	r4, r0
 80071c6:	d158      	bne.n	800727a <_malloc_r+0xf6>
 80071c8:	f8d8 4000 	ldr.w	r4, [r8]
 80071cc:	4627      	mov	r7, r4
 80071ce:	2f00      	cmp	r7, #0
 80071d0:	d143      	bne.n	800725a <_malloc_r+0xd6>
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	d04b      	beq.n	800726e <_malloc_r+0xea>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	4639      	mov	r1, r7
 80071da:	4630      	mov	r0, r6
 80071dc:	eb04 0903 	add.w	r9, r4, r3
 80071e0:	f000 fc82 	bl	8007ae8 <_sbrk_r>
 80071e4:	4581      	cmp	r9, r0
 80071e6:	d142      	bne.n	800726e <_malloc_r+0xea>
 80071e8:	6821      	ldr	r1, [r4, #0]
 80071ea:	1a6d      	subs	r5, r5, r1
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff ffa6 	bl	8007140 <sbrk_aligned>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d03a      	beq.n	800726e <_malloc_r+0xea>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	442b      	add	r3, r5
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	bb62      	cbnz	r2, 8007260 <_malloc_r+0xdc>
 8007206:	f8c8 7000 	str.w	r7, [r8]
 800720a:	e00f      	b.n	800722c <_malloc_r+0xa8>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	1b52      	subs	r2, r2, r5
 8007210:	d420      	bmi.n	8007254 <_malloc_r+0xd0>
 8007212:	2a0b      	cmp	r2, #11
 8007214:	d917      	bls.n	8007246 <_malloc_r+0xc2>
 8007216:	1961      	adds	r1, r4, r5
 8007218:	42a3      	cmp	r3, r4
 800721a:	6025      	str	r5, [r4, #0]
 800721c:	bf18      	it	ne
 800721e:	6059      	strne	r1, [r3, #4]
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	bf08      	it	eq
 8007224:	f8c8 1000 	streq.w	r1, [r8]
 8007228:	5162      	str	r2, [r4, r5]
 800722a:	604b      	str	r3, [r1, #4]
 800722c:	4630      	mov	r0, r6
 800722e:	f000 f82f 	bl	8007290 <__malloc_unlock>
 8007232:	f104 000b 	add.w	r0, r4, #11
 8007236:	1d23      	adds	r3, r4, #4
 8007238:	f020 0007 	bic.w	r0, r0, #7
 800723c:	1ac2      	subs	r2, r0, r3
 800723e:	bf1c      	itt	ne
 8007240:	1a1b      	subne	r3, r3, r0
 8007242:	50a3      	strne	r3, [r4, r2]
 8007244:	e7af      	b.n	80071a6 <_malloc_r+0x22>
 8007246:	6862      	ldr	r2, [r4, #4]
 8007248:	42a3      	cmp	r3, r4
 800724a:	bf0c      	ite	eq
 800724c:	f8c8 2000 	streq.w	r2, [r8]
 8007250:	605a      	strne	r2, [r3, #4]
 8007252:	e7eb      	b.n	800722c <_malloc_r+0xa8>
 8007254:	4623      	mov	r3, r4
 8007256:	6864      	ldr	r4, [r4, #4]
 8007258:	e7ae      	b.n	80071b8 <_malloc_r+0x34>
 800725a:	463c      	mov	r4, r7
 800725c:	687f      	ldr	r7, [r7, #4]
 800725e:	e7b6      	b.n	80071ce <_malloc_r+0x4a>
 8007260:	461a      	mov	r2, r3
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	42a3      	cmp	r3, r4
 8007266:	d1fb      	bne.n	8007260 <_malloc_r+0xdc>
 8007268:	2300      	movs	r3, #0
 800726a:	6053      	str	r3, [r2, #4]
 800726c:	e7de      	b.n	800722c <_malloc_r+0xa8>
 800726e:	230c      	movs	r3, #12
 8007270:	6033      	str	r3, [r6, #0]
 8007272:	4630      	mov	r0, r6
 8007274:	f000 f80c 	bl	8007290 <__malloc_unlock>
 8007278:	e794      	b.n	80071a4 <_malloc_r+0x20>
 800727a:	6005      	str	r5, [r0, #0]
 800727c:	e7d6      	b.n	800722c <_malloc_r+0xa8>
 800727e:	bf00      	nop
 8007280:	24000620 	.word	0x24000620

08007284 <__malloc_lock>:
 8007284:	4801      	ldr	r0, [pc, #4]	@ (800728c <__malloc_lock+0x8>)
 8007286:	f7ff b920 	b.w	80064ca <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	24000618 	.word	0x24000618

08007290 <__malloc_unlock>:
 8007290:	4801      	ldr	r0, [pc, #4]	@ (8007298 <__malloc_unlock+0x8>)
 8007292:	f7ff b91b 	b.w	80064cc <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	24000618 	.word	0x24000618

0800729c <_Balloc>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	69c6      	ldr	r6, [r0, #28]
 80072a0:	4604      	mov	r4, r0
 80072a2:	460d      	mov	r5, r1
 80072a4:	b976      	cbnz	r6, 80072c4 <_Balloc+0x28>
 80072a6:	2010      	movs	r0, #16
 80072a8:	f7ff ff42 	bl	8007130 <malloc>
 80072ac:	4602      	mov	r2, r0
 80072ae:	61e0      	str	r0, [r4, #28]
 80072b0:	b920      	cbnz	r0, 80072bc <_Balloc+0x20>
 80072b2:	4b18      	ldr	r3, [pc, #96]	@ (8007314 <_Balloc+0x78>)
 80072b4:	4818      	ldr	r0, [pc, #96]	@ (8007318 <_Balloc+0x7c>)
 80072b6:	216b      	movs	r1, #107	@ 0x6b
 80072b8:	f000 fc34 	bl	8007b24 <__assert_func>
 80072bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c0:	6006      	str	r6, [r0, #0]
 80072c2:	60c6      	str	r6, [r0, #12]
 80072c4:	69e6      	ldr	r6, [r4, #28]
 80072c6:	68f3      	ldr	r3, [r6, #12]
 80072c8:	b183      	cbz	r3, 80072ec <_Balloc+0x50>
 80072ca:	69e3      	ldr	r3, [r4, #28]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072d2:	b9b8      	cbnz	r0, 8007304 <_Balloc+0x68>
 80072d4:	2101      	movs	r1, #1
 80072d6:	fa01 f605 	lsl.w	r6, r1, r5
 80072da:	1d72      	adds	r2, r6, #5
 80072dc:	0092      	lsls	r2, r2, #2
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fc3e 	bl	8007b60 <_calloc_r>
 80072e4:	b160      	cbz	r0, 8007300 <_Balloc+0x64>
 80072e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ea:	e00e      	b.n	800730a <_Balloc+0x6e>
 80072ec:	2221      	movs	r2, #33	@ 0x21
 80072ee:	2104      	movs	r1, #4
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fc35 	bl	8007b60 <_calloc_r>
 80072f6:	69e3      	ldr	r3, [r4, #28]
 80072f8:	60f0      	str	r0, [r6, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e4      	bne.n	80072ca <_Balloc+0x2e>
 8007300:	2000      	movs	r0, #0
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	6802      	ldr	r2, [r0, #0]
 8007306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800730a:	2300      	movs	r3, #0
 800730c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007310:	e7f7      	b.n	8007302 <_Balloc+0x66>
 8007312:	bf00      	nop
 8007314:	080081a9 	.word	0x080081a9
 8007318:	08008229 	.word	0x08008229

0800731c <_Bfree>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	69c6      	ldr	r6, [r0, #28]
 8007320:	4605      	mov	r5, r0
 8007322:	460c      	mov	r4, r1
 8007324:	b976      	cbnz	r6, 8007344 <_Bfree+0x28>
 8007326:	2010      	movs	r0, #16
 8007328:	f7ff ff02 	bl	8007130 <malloc>
 800732c:	4602      	mov	r2, r0
 800732e:	61e8      	str	r0, [r5, #28]
 8007330:	b920      	cbnz	r0, 800733c <_Bfree+0x20>
 8007332:	4b09      	ldr	r3, [pc, #36]	@ (8007358 <_Bfree+0x3c>)
 8007334:	4809      	ldr	r0, [pc, #36]	@ (800735c <_Bfree+0x40>)
 8007336:	218f      	movs	r1, #143	@ 0x8f
 8007338:	f000 fbf4 	bl	8007b24 <__assert_func>
 800733c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007340:	6006      	str	r6, [r0, #0]
 8007342:	60c6      	str	r6, [r0, #12]
 8007344:	b13c      	cbz	r4, 8007356 <_Bfree+0x3a>
 8007346:	69eb      	ldr	r3, [r5, #28]
 8007348:	6862      	ldr	r2, [r4, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007350:	6021      	str	r1, [r4, #0]
 8007352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	080081a9 	.word	0x080081a9
 800735c:	08008229 	.word	0x08008229

08007360 <__multadd>:
 8007360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007364:	690d      	ldr	r5, [r1, #16]
 8007366:	4607      	mov	r7, r0
 8007368:	460c      	mov	r4, r1
 800736a:	461e      	mov	r6, r3
 800736c:	f101 0c14 	add.w	ip, r1, #20
 8007370:	2000      	movs	r0, #0
 8007372:	f8dc 3000 	ldr.w	r3, [ip]
 8007376:	b299      	uxth	r1, r3
 8007378:	fb02 6101 	mla	r1, r2, r1, r6
 800737c:	0c1e      	lsrs	r6, r3, #16
 800737e:	0c0b      	lsrs	r3, r1, #16
 8007380:	fb02 3306 	mla	r3, r2, r6, r3
 8007384:	b289      	uxth	r1, r1
 8007386:	3001      	adds	r0, #1
 8007388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800738c:	4285      	cmp	r5, r0
 800738e:	f84c 1b04 	str.w	r1, [ip], #4
 8007392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007396:	dcec      	bgt.n	8007372 <__multadd+0x12>
 8007398:	b30e      	cbz	r6, 80073de <__multadd+0x7e>
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	42ab      	cmp	r3, r5
 800739e:	dc19      	bgt.n	80073d4 <__multadd+0x74>
 80073a0:	6861      	ldr	r1, [r4, #4]
 80073a2:	4638      	mov	r0, r7
 80073a4:	3101      	adds	r1, #1
 80073a6:	f7ff ff79 	bl	800729c <_Balloc>
 80073aa:	4680      	mov	r8, r0
 80073ac:	b928      	cbnz	r0, 80073ba <__multadd+0x5a>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <__multadd+0x84>)
 80073b2:	480d      	ldr	r0, [pc, #52]	@ (80073e8 <__multadd+0x88>)
 80073b4:	21ba      	movs	r1, #186	@ 0xba
 80073b6:	f000 fbb5 	bl	8007b24 <__assert_func>
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	3202      	adds	r2, #2
 80073be:	f104 010c 	add.w	r1, r4, #12
 80073c2:	0092      	lsls	r2, r2, #2
 80073c4:	300c      	adds	r0, #12
 80073c6:	f000 fb9f 	bl	8007b08 <memcpy>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff ffa5 	bl	800731c <_Bfree>
 80073d2:	4644      	mov	r4, r8
 80073d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073d8:	3501      	adds	r5, #1
 80073da:	615e      	str	r6, [r3, #20]
 80073dc:	6125      	str	r5, [r4, #16]
 80073de:	4620      	mov	r0, r4
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e4:	08008218 	.word	0x08008218
 80073e8:	08008229 	.word	0x08008229

080073ec <__hi0bits>:
 80073ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073f0:	4603      	mov	r3, r0
 80073f2:	bf36      	itet	cc
 80073f4:	0403      	lslcc	r3, r0, #16
 80073f6:	2000      	movcs	r0, #0
 80073f8:	2010      	movcc	r0, #16
 80073fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073fe:	bf3c      	itt	cc
 8007400:	021b      	lslcc	r3, r3, #8
 8007402:	3008      	addcc	r0, #8
 8007404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007408:	bf3c      	itt	cc
 800740a:	011b      	lslcc	r3, r3, #4
 800740c:	3004      	addcc	r0, #4
 800740e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007412:	bf3c      	itt	cc
 8007414:	009b      	lslcc	r3, r3, #2
 8007416:	3002      	addcc	r0, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	db05      	blt.n	8007428 <__hi0bits+0x3c>
 800741c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007420:	f100 0001 	add.w	r0, r0, #1
 8007424:	bf08      	it	eq
 8007426:	2020      	moveq	r0, #32
 8007428:	4770      	bx	lr

0800742a <__lo0bits>:
 800742a:	6803      	ldr	r3, [r0, #0]
 800742c:	4602      	mov	r2, r0
 800742e:	f013 0007 	ands.w	r0, r3, #7
 8007432:	d00b      	beq.n	800744c <__lo0bits+0x22>
 8007434:	07d9      	lsls	r1, r3, #31
 8007436:	d421      	bmi.n	800747c <__lo0bits+0x52>
 8007438:	0798      	lsls	r0, r3, #30
 800743a:	bf49      	itett	mi
 800743c:	085b      	lsrmi	r3, r3, #1
 800743e:	089b      	lsrpl	r3, r3, #2
 8007440:	2001      	movmi	r0, #1
 8007442:	6013      	strmi	r3, [r2, #0]
 8007444:	bf5c      	itt	pl
 8007446:	6013      	strpl	r3, [r2, #0]
 8007448:	2002      	movpl	r0, #2
 800744a:	4770      	bx	lr
 800744c:	b299      	uxth	r1, r3
 800744e:	b909      	cbnz	r1, 8007454 <__lo0bits+0x2a>
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	2010      	movs	r0, #16
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	b909      	cbnz	r1, 800745c <__lo0bits+0x32>
 8007458:	3008      	adds	r0, #8
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	0719      	lsls	r1, r3, #28
 800745e:	bf04      	itt	eq
 8007460:	091b      	lsreq	r3, r3, #4
 8007462:	3004      	addeq	r0, #4
 8007464:	0799      	lsls	r1, r3, #30
 8007466:	bf04      	itt	eq
 8007468:	089b      	lsreq	r3, r3, #2
 800746a:	3002      	addeq	r0, #2
 800746c:	07d9      	lsls	r1, r3, #31
 800746e:	d403      	bmi.n	8007478 <__lo0bits+0x4e>
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	f100 0001 	add.w	r0, r0, #1
 8007476:	d003      	beq.n	8007480 <__lo0bits+0x56>
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	4770      	bx	lr
 800747c:	2000      	movs	r0, #0
 800747e:	4770      	bx	lr
 8007480:	2020      	movs	r0, #32
 8007482:	4770      	bx	lr

08007484 <__i2b>:
 8007484:	b510      	push	{r4, lr}
 8007486:	460c      	mov	r4, r1
 8007488:	2101      	movs	r1, #1
 800748a:	f7ff ff07 	bl	800729c <_Balloc>
 800748e:	4602      	mov	r2, r0
 8007490:	b928      	cbnz	r0, 800749e <__i2b+0x1a>
 8007492:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <__i2b+0x24>)
 8007494:	4805      	ldr	r0, [pc, #20]	@ (80074ac <__i2b+0x28>)
 8007496:	f240 1145 	movw	r1, #325	@ 0x145
 800749a:	f000 fb43 	bl	8007b24 <__assert_func>
 800749e:	2301      	movs	r3, #1
 80074a0:	6144      	str	r4, [r0, #20]
 80074a2:	6103      	str	r3, [r0, #16]
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	bf00      	nop
 80074a8:	08008218 	.word	0x08008218
 80074ac:	08008229 	.word	0x08008229

080074b0 <__multiply>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	4617      	mov	r7, r2
 80074b6:	690a      	ldr	r2, [r1, #16]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bfa8      	it	ge
 80074be:	463b      	movge	r3, r7
 80074c0:	4689      	mov	r9, r1
 80074c2:	bfa4      	itt	ge
 80074c4:	460f      	movge	r7, r1
 80074c6:	4699      	movge	r9, r3
 80074c8:	693d      	ldr	r5, [r7, #16]
 80074ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	eb05 060a 	add.w	r6, r5, sl
 80074d6:	42b3      	cmp	r3, r6
 80074d8:	b085      	sub	sp, #20
 80074da:	bfb8      	it	lt
 80074dc:	3101      	addlt	r1, #1
 80074de:	f7ff fedd 	bl	800729c <_Balloc>
 80074e2:	b930      	cbnz	r0, 80074f2 <__multiply+0x42>
 80074e4:	4602      	mov	r2, r0
 80074e6:	4b41      	ldr	r3, [pc, #260]	@ (80075ec <__multiply+0x13c>)
 80074e8:	4841      	ldr	r0, [pc, #260]	@ (80075f0 <__multiply+0x140>)
 80074ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074ee:	f000 fb19 	bl	8007b24 <__assert_func>
 80074f2:	f100 0414 	add.w	r4, r0, #20
 80074f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80074fa:	4623      	mov	r3, r4
 80074fc:	2200      	movs	r2, #0
 80074fe:	4573      	cmp	r3, lr
 8007500:	d320      	bcc.n	8007544 <__multiply+0x94>
 8007502:	f107 0814 	add.w	r8, r7, #20
 8007506:	f109 0114 	add.w	r1, r9, #20
 800750a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800750e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	1beb      	subs	r3, r5, r7
 8007516:	3b15      	subs	r3, #21
 8007518:	f023 0303 	bic.w	r3, r3, #3
 800751c:	3304      	adds	r3, #4
 800751e:	3715      	adds	r7, #21
 8007520:	42bd      	cmp	r5, r7
 8007522:	bf38      	it	cc
 8007524:	2304      	movcc	r3, #4
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	9b02      	ldr	r3, [sp, #8]
 800752a:	9103      	str	r1, [sp, #12]
 800752c:	428b      	cmp	r3, r1
 800752e:	d80c      	bhi.n	800754a <__multiply+0x9a>
 8007530:	2e00      	cmp	r6, #0
 8007532:	dd03      	ble.n	800753c <__multiply+0x8c>
 8007534:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007538:	2b00      	cmp	r3, #0
 800753a:	d055      	beq.n	80075e8 <__multiply+0x138>
 800753c:	6106      	str	r6, [r0, #16]
 800753e:	b005      	add	sp, #20
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	f843 2b04 	str.w	r2, [r3], #4
 8007548:	e7d9      	b.n	80074fe <__multiply+0x4e>
 800754a:	f8b1 a000 	ldrh.w	sl, [r1]
 800754e:	f1ba 0f00 	cmp.w	sl, #0
 8007552:	d01f      	beq.n	8007594 <__multiply+0xe4>
 8007554:	46c4      	mov	ip, r8
 8007556:	46a1      	mov	r9, r4
 8007558:	2700      	movs	r7, #0
 800755a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800755e:	f8d9 3000 	ldr.w	r3, [r9]
 8007562:	fa1f fb82 	uxth.w	fp, r2
 8007566:	b29b      	uxth	r3, r3
 8007568:	fb0a 330b 	mla	r3, sl, fp, r3
 800756c:	443b      	add	r3, r7
 800756e:	f8d9 7000 	ldr.w	r7, [r9]
 8007572:	0c12      	lsrs	r2, r2, #16
 8007574:	0c3f      	lsrs	r7, r7, #16
 8007576:	fb0a 7202 	mla	r2, sl, r2, r7
 800757a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800757e:	b29b      	uxth	r3, r3
 8007580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007584:	4565      	cmp	r5, ip
 8007586:	f849 3b04 	str.w	r3, [r9], #4
 800758a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800758e:	d8e4      	bhi.n	800755a <__multiply+0xaa>
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	50e7      	str	r7, [r4, r3]
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800759a:	3104      	adds	r1, #4
 800759c:	f1b9 0f00 	cmp.w	r9, #0
 80075a0:	d020      	beq.n	80075e4 <__multiply+0x134>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	4647      	mov	r7, r8
 80075a6:	46a4      	mov	ip, r4
 80075a8:	f04f 0a00 	mov.w	sl, #0
 80075ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80075b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80075b4:	fb09 220b 	mla	r2, r9, fp, r2
 80075b8:	4452      	add	r2, sl
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075c0:	f84c 3b04 	str.w	r3, [ip], #4
 80075c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80075c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80075d0:	fb09 330a 	mla	r3, r9, sl, r3
 80075d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80075d8:	42bd      	cmp	r5, r7
 80075da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075de:	d8e5      	bhi.n	80075ac <__multiply+0xfc>
 80075e0:	9a01      	ldr	r2, [sp, #4]
 80075e2:	50a3      	str	r3, [r4, r2]
 80075e4:	3404      	adds	r4, #4
 80075e6:	e79f      	b.n	8007528 <__multiply+0x78>
 80075e8:	3e01      	subs	r6, #1
 80075ea:	e7a1      	b.n	8007530 <__multiply+0x80>
 80075ec:	08008218 	.word	0x08008218
 80075f0:	08008229 	.word	0x08008229

080075f4 <__pow5mult>:
 80075f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f8:	4615      	mov	r5, r2
 80075fa:	f012 0203 	ands.w	r2, r2, #3
 80075fe:	4607      	mov	r7, r0
 8007600:	460e      	mov	r6, r1
 8007602:	d007      	beq.n	8007614 <__pow5mult+0x20>
 8007604:	4c25      	ldr	r4, [pc, #148]	@ (800769c <__pow5mult+0xa8>)
 8007606:	3a01      	subs	r2, #1
 8007608:	2300      	movs	r3, #0
 800760a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800760e:	f7ff fea7 	bl	8007360 <__multadd>
 8007612:	4606      	mov	r6, r0
 8007614:	10ad      	asrs	r5, r5, #2
 8007616:	d03d      	beq.n	8007694 <__pow5mult+0xa0>
 8007618:	69fc      	ldr	r4, [r7, #28]
 800761a:	b97c      	cbnz	r4, 800763c <__pow5mult+0x48>
 800761c:	2010      	movs	r0, #16
 800761e:	f7ff fd87 	bl	8007130 <malloc>
 8007622:	4602      	mov	r2, r0
 8007624:	61f8      	str	r0, [r7, #28]
 8007626:	b928      	cbnz	r0, 8007634 <__pow5mult+0x40>
 8007628:	4b1d      	ldr	r3, [pc, #116]	@ (80076a0 <__pow5mult+0xac>)
 800762a:	481e      	ldr	r0, [pc, #120]	@ (80076a4 <__pow5mult+0xb0>)
 800762c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007630:	f000 fa78 	bl	8007b24 <__assert_func>
 8007634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007638:	6004      	str	r4, [r0, #0]
 800763a:	60c4      	str	r4, [r0, #12]
 800763c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007644:	b94c      	cbnz	r4, 800765a <__pow5mult+0x66>
 8007646:	f240 2171 	movw	r1, #625	@ 0x271
 800764a:	4638      	mov	r0, r7
 800764c:	f7ff ff1a 	bl	8007484 <__i2b>
 8007650:	2300      	movs	r3, #0
 8007652:	f8c8 0008 	str.w	r0, [r8, #8]
 8007656:	4604      	mov	r4, r0
 8007658:	6003      	str	r3, [r0, #0]
 800765a:	f04f 0900 	mov.w	r9, #0
 800765e:	07eb      	lsls	r3, r5, #31
 8007660:	d50a      	bpl.n	8007678 <__pow5mult+0x84>
 8007662:	4631      	mov	r1, r6
 8007664:	4622      	mov	r2, r4
 8007666:	4638      	mov	r0, r7
 8007668:	f7ff ff22 	bl	80074b0 <__multiply>
 800766c:	4631      	mov	r1, r6
 800766e:	4680      	mov	r8, r0
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff fe53 	bl	800731c <_Bfree>
 8007676:	4646      	mov	r6, r8
 8007678:	106d      	asrs	r5, r5, #1
 800767a:	d00b      	beq.n	8007694 <__pow5mult+0xa0>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	b938      	cbnz	r0, 8007690 <__pow5mult+0x9c>
 8007680:	4622      	mov	r2, r4
 8007682:	4621      	mov	r1, r4
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ff13 	bl	80074b0 <__multiply>
 800768a:	6020      	str	r0, [r4, #0]
 800768c:	f8c0 9000 	str.w	r9, [r0]
 8007690:	4604      	mov	r4, r0
 8007692:	e7e4      	b.n	800765e <__pow5mult+0x6a>
 8007694:	4630      	mov	r0, r6
 8007696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769a:	bf00      	nop
 800769c:	080082dc 	.word	0x080082dc
 80076a0:	080081a9 	.word	0x080081a9
 80076a4:	08008229 	.word	0x08008229

080076a8 <__lshift>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	460c      	mov	r4, r1
 80076ae:	6849      	ldr	r1, [r1, #4]
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	4607      	mov	r7, r0
 80076ba:	4691      	mov	r9, r2
 80076bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076c0:	f108 0601 	add.w	r6, r8, #1
 80076c4:	42b3      	cmp	r3, r6
 80076c6:	db0b      	blt.n	80076e0 <__lshift+0x38>
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff fde7 	bl	800729c <_Balloc>
 80076ce:	4605      	mov	r5, r0
 80076d0:	b948      	cbnz	r0, 80076e6 <__lshift+0x3e>
 80076d2:	4602      	mov	r2, r0
 80076d4:	4b28      	ldr	r3, [pc, #160]	@ (8007778 <__lshift+0xd0>)
 80076d6:	4829      	ldr	r0, [pc, #164]	@ (800777c <__lshift+0xd4>)
 80076d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076dc:	f000 fa22 	bl	8007b24 <__assert_func>
 80076e0:	3101      	adds	r1, #1
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	e7ee      	b.n	80076c4 <__lshift+0x1c>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f100 0114 	add.w	r1, r0, #20
 80076ec:	f100 0210 	add.w	r2, r0, #16
 80076f0:	4618      	mov	r0, r3
 80076f2:	4553      	cmp	r3, sl
 80076f4:	db33      	blt.n	800775e <__lshift+0xb6>
 80076f6:	6920      	ldr	r0, [r4, #16]
 80076f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076fc:	f104 0314 	add.w	r3, r4, #20
 8007700:	f019 091f 	ands.w	r9, r9, #31
 8007704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800770c:	d02b      	beq.n	8007766 <__lshift+0xbe>
 800770e:	f1c9 0e20 	rsb	lr, r9, #32
 8007712:	468a      	mov	sl, r1
 8007714:	2200      	movs	r2, #0
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	fa00 f009 	lsl.w	r0, r0, r9
 800771c:	4310      	orrs	r0, r2
 800771e:	f84a 0b04 	str.w	r0, [sl], #4
 8007722:	f853 2b04 	ldr.w	r2, [r3], #4
 8007726:	459c      	cmp	ip, r3
 8007728:	fa22 f20e 	lsr.w	r2, r2, lr
 800772c:	d8f3      	bhi.n	8007716 <__lshift+0x6e>
 800772e:	ebac 0304 	sub.w	r3, ip, r4
 8007732:	3b15      	subs	r3, #21
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	3304      	adds	r3, #4
 800773a:	f104 0015 	add.w	r0, r4, #21
 800773e:	4560      	cmp	r0, ip
 8007740:	bf88      	it	hi
 8007742:	2304      	movhi	r3, #4
 8007744:	50ca      	str	r2, [r1, r3]
 8007746:	b10a      	cbz	r2, 800774c <__lshift+0xa4>
 8007748:	f108 0602 	add.w	r6, r8, #2
 800774c:	3e01      	subs	r6, #1
 800774e:	4638      	mov	r0, r7
 8007750:	612e      	str	r6, [r5, #16]
 8007752:	4621      	mov	r1, r4
 8007754:	f7ff fde2 	bl	800731c <_Bfree>
 8007758:	4628      	mov	r0, r5
 800775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007762:	3301      	adds	r3, #1
 8007764:	e7c5      	b.n	80076f2 <__lshift+0x4a>
 8007766:	3904      	subs	r1, #4
 8007768:	f853 2b04 	ldr.w	r2, [r3], #4
 800776c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007770:	459c      	cmp	ip, r3
 8007772:	d8f9      	bhi.n	8007768 <__lshift+0xc0>
 8007774:	e7ea      	b.n	800774c <__lshift+0xa4>
 8007776:	bf00      	nop
 8007778:	08008218 	.word	0x08008218
 800777c:	08008229 	.word	0x08008229

08007780 <__mcmp>:
 8007780:	690a      	ldr	r2, [r1, #16]
 8007782:	4603      	mov	r3, r0
 8007784:	6900      	ldr	r0, [r0, #16]
 8007786:	1a80      	subs	r0, r0, r2
 8007788:	b530      	push	{r4, r5, lr}
 800778a:	d10e      	bne.n	80077aa <__mcmp+0x2a>
 800778c:	3314      	adds	r3, #20
 800778e:	3114      	adds	r1, #20
 8007790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800779c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077a0:	4295      	cmp	r5, r2
 80077a2:	d003      	beq.n	80077ac <__mcmp+0x2c>
 80077a4:	d205      	bcs.n	80077b2 <__mcmp+0x32>
 80077a6:	f04f 30ff 	mov.w	r0, #4294967295
 80077aa:	bd30      	pop	{r4, r5, pc}
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	d3f3      	bcc.n	8007798 <__mcmp+0x18>
 80077b0:	e7fb      	b.n	80077aa <__mcmp+0x2a>
 80077b2:	2001      	movs	r0, #1
 80077b4:	e7f9      	b.n	80077aa <__mcmp+0x2a>
	...

080077b8 <__mdiff>:
 80077b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	4689      	mov	r9, r1
 80077be:	4606      	mov	r6, r0
 80077c0:	4611      	mov	r1, r2
 80077c2:	4648      	mov	r0, r9
 80077c4:	4614      	mov	r4, r2
 80077c6:	f7ff ffdb 	bl	8007780 <__mcmp>
 80077ca:	1e05      	subs	r5, r0, #0
 80077cc:	d112      	bne.n	80077f4 <__mdiff+0x3c>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff fd63 	bl	800729c <_Balloc>
 80077d6:	4602      	mov	r2, r0
 80077d8:	b928      	cbnz	r0, 80077e6 <__mdiff+0x2e>
 80077da:	4b3f      	ldr	r3, [pc, #252]	@ (80078d8 <__mdiff+0x120>)
 80077dc:	f240 2137 	movw	r1, #567	@ 0x237
 80077e0:	483e      	ldr	r0, [pc, #248]	@ (80078dc <__mdiff+0x124>)
 80077e2:	f000 f99f 	bl	8007b24 <__assert_func>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077ec:	4610      	mov	r0, r2
 80077ee:	b003      	add	sp, #12
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	bfbc      	itt	lt
 80077f6:	464b      	movlt	r3, r9
 80077f8:	46a1      	movlt	r9, r4
 80077fa:	4630      	mov	r0, r6
 80077fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007800:	bfba      	itte	lt
 8007802:	461c      	movlt	r4, r3
 8007804:	2501      	movlt	r5, #1
 8007806:	2500      	movge	r5, #0
 8007808:	f7ff fd48 	bl	800729c <_Balloc>
 800780c:	4602      	mov	r2, r0
 800780e:	b918      	cbnz	r0, 8007818 <__mdiff+0x60>
 8007810:	4b31      	ldr	r3, [pc, #196]	@ (80078d8 <__mdiff+0x120>)
 8007812:	f240 2145 	movw	r1, #581	@ 0x245
 8007816:	e7e3      	b.n	80077e0 <__mdiff+0x28>
 8007818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800781c:	6926      	ldr	r6, [r4, #16]
 800781e:	60c5      	str	r5, [r0, #12]
 8007820:	f109 0310 	add.w	r3, r9, #16
 8007824:	f109 0514 	add.w	r5, r9, #20
 8007828:	f104 0e14 	add.w	lr, r4, #20
 800782c:	f100 0b14 	add.w	fp, r0, #20
 8007830:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007834:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	46d9      	mov	r9, fp
 800783c:	f04f 0c00 	mov.w	ip, #0
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	fa1f f38a 	uxth.w	r3, sl
 8007850:	4619      	mov	r1, r3
 8007852:	b283      	uxth	r3, r0
 8007854:	1acb      	subs	r3, r1, r3
 8007856:	0c00      	lsrs	r0, r0, #16
 8007858:	4463      	add	r3, ip
 800785a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800785e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007868:	4576      	cmp	r6, lr
 800786a:	f849 3b04 	str.w	r3, [r9], #4
 800786e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007872:	d8e5      	bhi.n	8007840 <__mdiff+0x88>
 8007874:	1b33      	subs	r3, r6, r4
 8007876:	3b15      	subs	r3, #21
 8007878:	f023 0303 	bic.w	r3, r3, #3
 800787c:	3415      	adds	r4, #21
 800787e:	3304      	adds	r3, #4
 8007880:	42a6      	cmp	r6, r4
 8007882:	bf38      	it	cc
 8007884:	2304      	movcc	r3, #4
 8007886:	441d      	add	r5, r3
 8007888:	445b      	add	r3, fp
 800788a:	461e      	mov	r6, r3
 800788c:	462c      	mov	r4, r5
 800788e:	4544      	cmp	r4, r8
 8007890:	d30e      	bcc.n	80078b0 <__mdiff+0xf8>
 8007892:	f108 0103 	add.w	r1, r8, #3
 8007896:	1b49      	subs	r1, r1, r5
 8007898:	f021 0103 	bic.w	r1, r1, #3
 800789c:	3d03      	subs	r5, #3
 800789e:	45a8      	cmp	r8, r5
 80078a0:	bf38      	it	cc
 80078a2:	2100      	movcc	r1, #0
 80078a4:	440b      	add	r3, r1
 80078a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078aa:	b191      	cbz	r1, 80078d2 <__mdiff+0x11a>
 80078ac:	6117      	str	r7, [r2, #16]
 80078ae:	e79d      	b.n	80077ec <__mdiff+0x34>
 80078b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80078b4:	46e6      	mov	lr, ip
 80078b6:	0c08      	lsrs	r0, r1, #16
 80078b8:	fa1c fc81 	uxtah	ip, ip, r1
 80078bc:	4471      	add	r1, lr
 80078be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078c2:	b289      	uxth	r1, r1
 80078c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078c8:	f846 1b04 	str.w	r1, [r6], #4
 80078cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078d0:	e7dd      	b.n	800788e <__mdiff+0xd6>
 80078d2:	3f01      	subs	r7, #1
 80078d4:	e7e7      	b.n	80078a6 <__mdiff+0xee>
 80078d6:	bf00      	nop
 80078d8:	08008218 	.word	0x08008218
 80078dc:	08008229 	.word	0x08008229

080078e0 <__d2b>:
 80078e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	460f      	mov	r7, r1
 80078e6:	2101      	movs	r1, #1
 80078e8:	ec59 8b10 	vmov	r8, r9, d0
 80078ec:	4616      	mov	r6, r2
 80078ee:	f7ff fcd5 	bl	800729c <_Balloc>
 80078f2:	4604      	mov	r4, r0
 80078f4:	b930      	cbnz	r0, 8007904 <__d2b+0x24>
 80078f6:	4602      	mov	r2, r0
 80078f8:	4b23      	ldr	r3, [pc, #140]	@ (8007988 <__d2b+0xa8>)
 80078fa:	4824      	ldr	r0, [pc, #144]	@ (800798c <__d2b+0xac>)
 80078fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8007900:	f000 f910 	bl	8007b24 <__assert_func>
 8007904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800790c:	b10d      	cbz	r5, 8007912 <__d2b+0x32>
 800790e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	f1b8 0300 	subs.w	r3, r8, #0
 8007918:	d023      	beq.n	8007962 <__d2b+0x82>
 800791a:	4668      	mov	r0, sp
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	f7ff fd84 	bl	800742a <__lo0bits>
 8007922:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007926:	b1d0      	cbz	r0, 800795e <__d2b+0x7e>
 8007928:	f1c0 0320 	rsb	r3, r0, #32
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	430b      	orrs	r3, r1
 8007932:	40c2      	lsrs	r2, r0
 8007934:	6163      	str	r3, [r4, #20]
 8007936:	9201      	str	r2, [sp, #4]
 8007938:	9b01      	ldr	r3, [sp, #4]
 800793a:	61a3      	str	r3, [r4, #24]
 800793c:	2b00      	cmp	r3, #0
 800793e:	bf0c      	ite	eq
 8007940:	2201      	moveq	r2, #1
 8007942:	2202      	movne	r2, #2
 8007944:	6122      	str	r2, [r4, #16]
 8007946:	b1a5      	cbz	r5, 8007972 <__d2b+0x92>
 8007948:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800794c:	4405      	add	r5, r0
 800794e:	603d      	str	r5, [r7, #0]
 8007950:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007954:	6030      	str	r0, [r6, #0]
 8007956:	4620      	mov	r0, r4
 8007958:	b003      	add	sp, #12
 800795a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800795e:	6161      	str	r1, [r4, #20]
 8007960:	e7ea      	b.n	8007938 <__d2b+0x58>
 8007962:	a801      	add	r0, sp, #4
 8007964:	f7ff fd61 	bl	800742a <__lo0bits>
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	6163      	str	r3, [r4, #20]
 800796c:	3020      	adds	r0, #32
 800796e:	2201      	movs	r2, #1
 8007970:	e7e8      	b.n	8007944 <__d2b+0x64>
 8007972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007976:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800797a:	6038      	str	r0, [r7, #0]
 800797c:	6918      	ldr	r0, [r3, #16]
 800797e:	f7ff fd35 	bl	80073ec <__hi0bits>
 8007982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007986:	e7e5      	b.n	8007954 <__d2b+0x74>
 8007988:	08008218 	.word	0x08008218
 800798c:	08008229 	.word	0x08008229

08007990 <__sflush_r>:
 8007990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007998:	0716      	lsls	r6, r2, #28
 800799a:	4605      	mov	r5, r0
 800799c:	460c      	mov	r4, r1
 800799e:	d454      	bmi.n	8007a4a <__sflush_r+0xba>
 80079a0:	684b      	ldr	r3, [r1, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dc02      	bgt.n	80079ac <__sflush_r+0x1c>
 80079a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dd48      	ble.n	8007a3e <__sflush_r+0xae>
 80079ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079ae:	2e00      	cmp	r6, #0
 80079b0:	d045      	beq.n	8007a3e <__sflush_r+0xae>
 80079b2:	2300      	movs	r3, #0
 80079b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079b8:	682f      	ldr	r7, [r5, #0]
 80079ba:	6a21      	ldr	r1, [r4, #32]
 80079bc:	602b      	str	r3, [r5, #0]
 80079be:	d030      	beq.n	8007a22 <__sflush_r+0x92>
 80079c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	0759      	lsls	r1, r3, #29
 80079c6:	d505      	bpl.n	80079d4 <__sflush_r+0x44>
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079ce:	b10b      	cbz	r3, 80079d4 <__sflush_r+0x44>
 80079d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079d2:	1ad2      	subs	r2, r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079d8:	6a21      	ldr	r1, [r4, #32]
 80079da:	4628      	mov	r0, r5
 80079dc:	47b0      	blx	r6
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	d106      	bne.n	80079f2 <__sflush_r+0x62>
 80079e4:	6829      	ldr	r1, [r5, #0]
 80079e6:	291d      	cmp	r1, #29
 80079e8:	d82b      	bhi.n	8007a42 <__sflush_r+0xb2>
 80079ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007a94 <__sflush_r+0x104>)
 80079ec:	40ca      	lsrs	r2, r1
 80079ee:	07d6      	lsls	r6, r2, #31
 80079f0:	d527      	bpl.n	8007a42 <__sflush_r+0xb2>
 80079f2:	2200      	movs	r2, #0
 80079f4:	6062      	str	r2, [r4, #4]
 80079f6:	04d9      	lsls	r1, r3, #19
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	d504      	bpl.n	8007a08 <__sflush_r+0x78>
 80079fe:	1c42      	adds	r2, r0, #1
 8007a00:	d101      	bne.n	8007a06 <__sflush_r+0x76>
 8007a02:	682b      	ldr	r3, [r5, #0]
 8007a04:	b903      	cbnz	r3, 8007a08 <__sflush_r+0x78>
 8007a06:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a0a:	602f      	str	r7, [r5, #0]
 8007a0c:	b1b9      	cbz	r1, 8007a3e <__sflush_r+0xae>
 8007a0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a12:	4299      	cmp	r1, r3
 8007a14:	d002      	beq.n	8007a1c <__sflush_r+0x8c>
 8007a16:	4628      	mov	r0, r5
 8007a18:	f7ff fb40 	bl	800709c <_free_r>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a20:	e00d      	b.n	8007a3e <__sflush_r+0xae>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b0      	blx	r6
 8007a28:	4602      	mov	r2, r0
 8007a2a:	1c50      	adds	r0, r2, #1
 8007a2c:	d1c9      	bne.n	80079c2 <__sflush_r+0x32>
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0c6      	beq.n	80079c2 <__sflush_r+0x32>
 8007a34:	2b1d      	cmp	r3, #29
 8007a36:	d001      	beq.n	8007a3c <__sflush_r+0xac>
 8007a38:	2b16      	cmp	r3, #22
 8007a3a:	d11e      	bne.n	8007a7a <__sflush_r+0xea>
 8007a3c:	602f      	str	r7, [r5, #0]
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e022      	b.n	8007a88 <__sflush_r+0xf8>
 8007a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a46:	b21b      	sxth	r3, r3
 8007a48:	e01b      	b.n	8007a82 <__sflush_r+0xf2>
 8007a4a:	690f      	ldr	r7, [r1, #16]
 8007a4c:	2f00      	cmp	r7, #0
 8007a4e:	d0f6      	beq.n	8007a3e <__sflush_r+0xae>
 8007a50:	0793      	lsls	r3, r2, #30
 8007a52:	680e      	ldr	r6, [r1, #0]
 8007a54:	bf08      	it	eq
 8007a56:	694b      	ldreq	r3, [r1, #20]
 8007a58:	600f      	str	r7, [r1, #0]
 8007a5a:	bf18      	it	ne
 8007a5c:	2300      	movne	r3, #0
 8007a5e:	eba6 0807 	sub.w	r8, r6, r7
 8007a62:	608b      	str	r3, [r1, #8]
 8007a64:	f1b8 0f00 	cmp.w	r8, #0
 8007a68:	dde9      	ble.n	8007a3e <__sflush_r+0xae>
 8007a6a:	6a21      	ldr	r1, [r4, #32]
 8007a6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a6e:	4643      	mov	r3, r8
 8007a70:	463a      	mov	r2, r7
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b0      	blx	r6
 8007a76:	2800      	cmp	r0, #0
 8007a78:	dc08      	bgt.n	8007a8c <__sflush_r+0xfc>
 8007a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a8c:	4407      	add	r7, r0
 8007a8e:	eba8 0800 	sub.w	r8, r8, r0
 8007a92:	e7e7      	b.n	8007a64 <__sflush_r+0xd4>
 8007a94:	20400001 	.word	0x20400001

08007a98 <_fflush_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	690b      	ldr	r3, [r1, #16]
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b913      	cbnz	r3, 8007aa8 <_fflush_r+0x10>
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	b118      	cbz	r0, 8007ab2 <_fflush_r+0x1a>
 8007aaa:	6a03      	ldr	r3, [r0, #32]
 8007aac:	b90b      	cbnz	r3, 8007ab2 <_fflush_r+0x1a>
 8007aae:	f7fe fc15 	bl	80062dc <__sinit>
 8007ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f3      	beq.n	8007aa2 <_fflush_r+0xa>
 8007aba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007abc:	07d0      	lsls	r0, r2, #31
 8007abe:	d404      	bmi.n	8007aca <_fflush_r+0x32>
 8007ac0:	0599      	lsls	r1, r3, #22
 8007ac2:	d402      	bmi.n	8007aca <_fflush_r+0x32>
 8007ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ac6:	f7fe fd00 	bl	80064ca <__retarget_lock_acquire_recursive>
 8007aca:	4628      	mov	r0, r5
 8007acc:	4621      	mov	r1, r4
 8007ace:	f7ff ff5f 	bl	8007990 <__sflush_r>
 8007ad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad4:	07da      	lsls	r2, r3, #31
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	d4e4      	bmi.n	8007aa4 <_fflush_r+0xc>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	059b      	lsls	r3, r3, #22
 8007ade:	d4e1      	bmi.n	8007aa4 <_fflush_r+0xc>
 8007ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae2:	f7fe fcf3 	bl	80064cc <__retarget_lock_release_recursive>
 8007ae6:	e7dd      	b.n	8007aa4 <_fflush_r+0xc>

08007ae8 <_sbrk_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d06      	ldr	r5, [pc, #24]	@ (8007b04 <_sbrk_r+0x1c>)
 8007aec:	2300      	movs	r3, #0
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7f8 fed0 	bl	8000898 <_sbrk>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_sbrk_r+0x1a>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_sbrk_r+0x1a>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	24000614 	.word	0x24000614

08007b08 <memcpy>:
 8007b08:	440a      	add	r2, r1
 8007b0a:	4291      	cmp	r1, r2
 8007b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b10:	d100      	bne.n	8007b14 <memcpy+0xc>
 8007b12:	4770      	bx	lr
 8007b14:	b510      	push	{r4, lr}
 8007b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	d1f9      	bne.n	8007b16 <memcpy+0xe>
 8007b22:	bd10      	pop	{r4, pc}

08007b24 <__assert_func>:
 8007b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b26:	4614      	mov	r4, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <__assert_func+0x2c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4605      	mov	r5, r0
 8007b30:	68d8      	ldr	r0, [r3, #12]
 8007b32:	b14c      	cbz	r4, 8007b48 <__assert_func+0x24>
 8007b34:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <__assert_func+0x30>)
 8007b36:	9100      	str	r1, [sp, #0]
 8007b38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b3c:	4906      	ldr	r1, [pc, #24]	@ (8007b58 <__assert_func+0x34>)
 8007b3e:	462b      	mov	r3, r5
 8007b40:	f000 f842 	bl	8007bc8 <fiprintf>
 8007b44:	f000 f852 	bl	8007bec <abort>
 8007b48:	4b04      	ldr	r3, [pc, #16]	@ (8007b5c <__assert_func+0x38>)
 8007b4a:	461c      	mov	r4, r3
 8007b4c:	e7f3      	b.n	8007b36 <__assert_func+0x12>
 8007b4e:	bf00      	nop
 8007b50:	2400001c 	.word	0x2400001c
 8007b54:	0800828c 	.word	0x0800828c
 8007b58:	08008299 	.word	0x08008299
 8007b5c:	080082c7 	.word	0x080082c7

08007b60 <_calloc_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	fba1 5402 	umull	r5, r4, r1, r2
 8007b66:	b934      	cbnz	r4, 8007b76 <_calloc_r+0x16>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	f7ff fb0b 	bl	8007184 <_malloc_r>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	b928      	cbnz	r0, 8007b7e <_calloc_r+0x1e>
 8007b72:	4630      	mov	r0, r6
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	220c      	movs	r2, #12
 8007b78:	6002      	str	r2, [r0, #0]
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	e7f9      	b.n	8007b72 <_calloc_r+0x12>
 8007b7e:	462a      	mov	r2, r5
 8007b80:	4621      	mov	r1, r4
 8007b82:	f7fe fc24 	bl	80063ce <memset>
 8007b86:	e7f4      	b.n	8007b72 <_calloc_r+0x12>

08007b88 <__ascii_mbtowc>:
 8007b88:	b082      	sub	sp, #8
 8007b8a:	b901      	cbnz	r1, 8007b8e <__ascii_mbtowc+0x6>
 8007b8c:	a901      	add	r1, sp, #4
 8007b8e:	b142      	cbz	r2, 8007ba2 <__ascii_mbtowc+0x1a>
 8007b90:	b14b      	cbz	r3, 8007ba6 <__ascii_mbtowc+0x1e>
 8007b92:	7813      	ldrb	r3, [r2, #0]
 8007b94:	600b      	str	r3, [r1, #0]
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	1e10      	subs	r0, r2, #0
 8007b9a:	bf18      	it	ne
 8007b9c:	2001      	movne	r0, #1
 8007b9e:	b002      	add	sp, #8
 8007ba0:	4770      	bx	lr
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	e7fb      	b.n	8007b9e <__ascii_mbtowc+0x16>
 8007ba6:	f06f 0001 	mvn.w	r0, #1
 8007baa:	e7f8      	b.n	8007b9e <__ascii_mbtowc+0x16>

08007bac <__ascii_wctomb>:
 8007bac:	4603      	mov	r3, r0
 8007bae:	4608      	mov	r0, r1
 8007bb0:	b141      	cbz	r1, 8007bc4 <__ascii_wctomb+0x18>
 8007bb2:	2aff      	cmp	r2, #255	@ 0xff
 8007bb4:	d904      	bls.n	8007bc0 <__ascii_wctomb+0x14>
 8007bb6:	228a      	movs	r2, #138	@ 0x8a
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbe:	4770      	bx	lr
 8007bc0:	700a      	strb	r2, [r1, #0]
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	4770      	bx	lr
	...

08007bc8 <fiprintf>:
 8007bc8:	b40e      	push	{r1, r2, r3}
 8007bca:	b503      	push	{r0, r1, lr}
 8007bcc:	4601      	mov	r1, r0
 8007bce:	ab03      	add	r3, sp, #12
 8007bd0:	4805      	ldr	r0, [pc, #20]	@ (8007be8 <fiprintf+0x20>)
 8007bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd6:	6800      	ldr	r0, [r0, #0]
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	f000 f837 	bl	8007c4c <_vfiprintf_r>
 8007bde:	b002      	add	sp, #8
 8007be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be4:	b003      	add	sp, #12
 8007be6:	4770      	bx	lr
 8007be8:	2400001c 	.word	0x2400001c

08007bec <abort>:
 8007bec:	b508      	push	{r3, lr}
 8007bee:	2006      	movs	r0, #6
 8007bf0:	f000 fa00 	bl	8007ff4 <raise>
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	f7f8 fdd6 	bl	80007a6 <_exit>

08007bfa <__sfputc_r>:
 8007bfa:	6893      	ldr	r3, [r2, #8]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	b410      	push	{r4}
 8007c02:	6093      	str	r3, [r2, #8]
 8007c04:	da08      	bge.n	8007c18 <__sfputc_r+0x1e>
 8007c06:	6994      	ldr	r4, [r2, #24]
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	db01      	blt.n	8007c10 <__sfputc_r+0x16>
 8007c0c:	290a      	cmp	r1, #10
 8007c0e:	d103      	bne.n	8007c18 <__sfputc_r+0x1e>
 8007c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c14:	f000 b932 	b.w	8007e7c <__swbuf_r>
 8007c18:	6813      	ldr	r3, [r2, #0]
 8007c1a:	1c58      	adds	r0, r3, #1
 8007c1c:	6010      	str	r0, [r2, #0]
 8007c1e:	7019      	strb	r1, [r3, #0]
 8007c20:	4608      	mov	r0, r1
 8007c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <__sfputs_r>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	4614      	mov	r4, r2
 8007c30:	18d5      	adds	r5, r2, r3
 8007c32:	42ac      	cmp	r4, r5
 8007c34:	d101      	bne.n	8007c3a <__sfputs_r+0x12>
 8007c36:	2000      	movs	r0, #0
 8007c38:	e007      	b.n	8007c4a <__sfputs_r+0x22>
 8007c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3e:	463a      	mov	r2, r7
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff ffda 	bl	8007bfa <__sfputc_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d1f3      	bne.n	8007c32 <__sfputs_r+0xa>
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c4c <_vfiprintf_r>:
 8007c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c50:	460d      	mov	r5, r1
 8007c52:	b09d      	sub	sp, #116	@ 0x74
 8007c54:	4614      	mov	r4, r2
 8007c56:	4698      	mov	r8, r3
 8007c58:	4606      	mov	r6, r0
 8007c5a:	b118      	cbz	r0, 8007c64 <_vfiprintf_r+0x18>
 8007c5c:	6a03      	ldr	r3, [r0, #32]
 8007c5e:	b90b      	cbnz	r3, 8007c64 <_vfiprintf_r+0x18>
 8007c60:	f7fe fb3c 	bl	80062dc <__sinit>
 8007c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c66:	07d9      	lsls	r1, r3, #31
 8007c68:	d405      	bmi.n	8007c76 <_vfiprintf_r+0x2a>
 8007c6a:	89ab      	ldrh	r3, [r5, #12]
 8007c6c:	059a      	lsls	r2, r3, #22
 8007c6e:	d402      	bmi.n	8007c76 <_vfiprintf_r+0x2a>
 8007c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c72:	f7fe fc2a 	bl	80064ca <__retarget_lock_acquire_recursive>
 8007c76:	89ab      	ldrh	r3, [r5, #12]
 8007c78:	071b      	lsls	r3, r3, #28
 8007c7a:	d501      	bpl.n	8007c80 <_vfiprintf_r+0x34>
 8007c7c:	692b      	ldr	r3, [r5, #16]
 8007c7e:	b99b      	cbnz	r3, 8007ca8 <_vfiprintf_r+0x5c>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4630      	mov	r0, r6
 8007c84:	f000 f938 	bl	8007ef8 <__swsetup_r>
 8007c88:	b170      	cbz	r0, 8007ca8 <_vfiprintf_r+0x5c>
 8007c8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c8c:	07dc      	lsls	r4, r3, #31
 8007c8e:	d504      	bpl.n	8007c9a <_vfiprintf_r+0x4e>
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	b01d      	add	sp, #116	@ 0x74
 8007c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	0598      	lsls	r0, r3, #22
 8007c9e:	d4f7      	bmi.n	8007c90 <_vfiprintf_r+0x44>
 8007ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ca2:	f7fe fc13 	bl	80064cc <__retarget_lock_release_recursive>
 8007ca6:	e7f3      	b.n	8007c90 <_vfiprintf_r+0x44>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cac:	2320      	movs	r3, #32
 8007cae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cb6:	2330      	movs	r3, #48	@ 0x30
 8007cb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e68 <_vfiprintf_r+0x21c>
 8007cbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cc0:	f04f 0901 	mov.w	r9, #1
 8007cc4:	4623      	mov	r3, r4
 8007cc6:	469a      	mov	sl, r3
 8007cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ccc:	b10a      	cbz	r2, 8007cd2 <_vfiprintf_r+0x86>
 8007cce:	2a25      	cmp	r2, #37	@ 0x25
 8007cd0:	d1f9      	bne.n	8007cc6 <_vfiprintf_r+0x7a>
 8007cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8007cd6:	d00b      	beq.n	8007cf0 <_vfiprintf_r+0xa4>
 8007cd8:	465b      	mov	r3, fp
 8007cda:	4622      	mov	r2, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff ffa2 	bl	8007c28 <__sfputs_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	f000 80a7 	beq.w	8007e38 <_vfiprintf_r+0x1ec>
 8007cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cec:	445a      	add	r2, fp
 8007cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 809f 	beq.w	8007e38 <_vfiprintf_r+0x1ec>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d04:	f10a 0a01 	add.w	sl, sl, #1
 8007d08:	9304      	str	r3, [sp, #16]
 8007d0a:	9307      	str	r3, [sp, #28]
 8007d0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d12:	4654      	mov	r4, sl
 8007d14:	2205      	movs	r2, #5
 8007d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1a:	4853      	ldr	r0, [pc, #332]	@ (8007e68 <_vfiprintf_r+0x21c>)
 8007d1c:	f7f8 fae8 	bl	80002f0 <memchr>
 8007d20:	9a04      	ldr	r2, [sp, #16]
 8007d22:	b9d8      	cbnz	r0, 8007d5c <_vfiprintf_r+0x110>
 8007d24:	06d1      	lsls	r1, r2, #27
 8007d26:	bf44      	itt	mi
 8007d28:	2320      	movmi	r3, #32
 8007d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d2e:	0713      	lsls	r3, r2, #28
 8007d30:	bf44      	itt	mi
 8007d32:	232b      	movmi	r3, #43	@ 0x2b
 8007d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d38:	f89a 3000 	ldrb.w	r3, [sl]
 8007d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d3e:	d015      	beq.n	8007d6c <_vfiprintf_r+0x120>
 8007d40:	9a07      	ldr	r2, [sp, #28]
 8007d42:	4654      	mov	r4, sl
 8007d44:	2000      	movs	r0, #0
 8007d46:	f04f 0c0a 	mov.w	ip, #10
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d50:	3b30      	subs	r3, #48	@ 0x30
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	d94b      	bls.n	8007dee <_vfiprintf_r+0x1a2>
 8007d56:	b1b0      	cbz	r0, 8007d86 <_vfiprintf_r+0x13a>
 8007d58:	9207      	str	r2, [sp, #28]
 8007d5a:	e014      	b.n	8007d86 <_vfiprintf_r+0x13a>
 8007d5c:	eba0 0308 	sub.w	r3, r0, r8
 8007d60:	fa09 f303 	lsl.w	r3, r9, r3
 8007d64:	4313      	orrs	r3, r2
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	46a2      	mov	sl, r4
 8007d6a:	e7d2      	b.n	8007d12 <_vfiprintf_r+0xc6>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	1d19      	adds	r1, r3, #4
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	9103      	str	r1, [sp, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bfbb      	ittet	lt
 8007d78:	425b      	neglt	r3, r3
 8007d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d7e:	9307      	strge	r3, [sp, #28]
 8007d80:	9307      	strlt	r3, [sp, #28]
 8007d82:	bfb8      	it	lt
 8007d84:	9204      	strlt	r2, [sp, #16]
 8007d86:	7823      	ldrb	r3, [r4, #0]
 8007d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d8a:	d10a      	bne.n	8007da2 <_vfiprintf_r+0x156>
 8007d8c:	7863      	ldrb	r3, [r4, #1]
 8007d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d90:	d132      	bne.n	8007df8 <_vfiprintf_r+0x1ac>
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	1d1a      	adds	r2, r3, #4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	9203      	str	r2, [sp, #12]
 8007d9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d9e:	3402      	adds	r4, #2
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e78 <_vfiprintf_r+0x22c>
 8007da6:	7821      	ldrb	r1, [r4, #0]
 8007da8:	2203      	movs	r2, #3
 8007daa:	4650      	mov	r0, sl
 8007dac:	f7f8 faa0 	bl	80002f0 <memchr>
 8007db0:	b138      	cbz	r0, 8007dc2 <_vfiprintf_r+0x176>
 8007db2:	9b04      	ldr	r3, [sp, #16]
 8007db4:	eba0 000a 	sub.w	r0, r0, sl
 8007db8:	2240      	movs	r2, #64	@ 0x40
 8007dba:	4082      	lsls	r2, r0
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	3401      	adds	r4, #1
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc6:	4829      	ldr	r0, [pc, #164]	@ (8007e6c <_vfiprintf_r+0x220>)
 8007dc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007dcc:	2206      	movs	r2, #6
 8007dce:	f7f8 fa8f 	bl	80002f0 <memchr>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d03f      	beq.n	8007e56 <_vfiprintf_r+0x20a>
 8007dd6:	4b26      	ldr	r3, [pc, #152]	@ (8007e70 <_vfiprintf_r+0x224>)
 8007dd8:	bb1b      	cbnz	r3, 8007e22 <_vfiprintf_r+0x1d6>
 8007dda:	9b03      	ldr	r3, [sp, #12]
 8007ddc:	3307      	adds	r3, #7
 8007dde:	f023 0307 	bic.w	r3, r3, #7
 8007de2:	3308      	adds	r3, #8
 8007de4:	9303      	str	r3, [sp, #12]
 8007de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de8:	443b      	add	r3, r7
 8007dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dec:	e76a      	b.n	8007cc4 <_vfiprintf_r+0x78>
 8007dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df2:	460c      	mov	r4, r1
 8007df4:	2001      	movs	r0, #1
 8007df6:	e7a8      	b.n	8007d4a <_vfiprintf_r+0xfe>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	9305      	str	r3, [sp, #20]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	f04f 0c0a 	mov.w	ip, #10
 8007e04:	4620      	mov	r0, r4
 8007e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e0a:	3a30      	subs	r2, #48	@ 0x30
 8007e0c:	2a09      	cmp	r2, #9
 8007e0e:	d903      	bls.n	8007e18 <_vfiprintf_r+0x1cc>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0c6      	beq.n	8007da2 <_vfiprintf_r+0x156>
 8007e14:	9105      	str	r1, [sp, #20]
 8007e16:	e7c4      	b.n	8007da2 <_vfiprintf_r+0x156>
 8007e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e7f0      	b.n	8007e04 <_vfiprintf_r+0x1b8>
 8007e22:	ab03      	add	r3, sp, #12
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	462a      	mov	r2, r5
 8007e28:	4b12      	ldr	r3, [pc, #72]	@ (8007e74 <_vfiprintf_r+0x228>)
 8007e2a:	a904      	add	r1, sp, #16
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7fd fe23 	bl	8005a78 <_printf_float>
 8007e32:	4607      	mov	r7, r0
 8007e34:	1c78      	adds	r0, r7, #1
 8007e36:	d1d6      	bne.n	8007de6 <_vfiprintf_r+0x19a>
 8007e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e3a:	07d9      	lsls	r1, r3, #31
 8007e3c:	d405      	bmi.n	8007e4a <_vfiprintf_r+0x1fe>
 8007e3e:	89ab      	ldrh	r3, [r5, #12]
 8007e40:	059a      	lsls	r2, r3, #22
 8007e42:	d402      	bmi.n	8007e4a <_vfiprintf_r+0x1fe>
 8007e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e46:	f7fe fb41 	bl	80064cc <__retarget_lock_release_recursive>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	065b      	lsls	r3, r3, #25
 8007e4e:	f53f af1f 	bmi.w	8007c90 <_vfiprintf_r+0x44>
 8007e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e54:	e71e      	b.n	8007c94 <_vfiprintf_r+0x48>
 8007e56:	ab03      	add	r3, sp, #12
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4b05      	ldr	r3, [pc, #20]	@ (8007e74 <_vfiprintf_r+0x228>)
 8007e5e:	a904      	add	r1, sp, #16
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7fe f891 	bl	8005f88 <_printf_i>
 8007e66:	e7e4      	b.n	8007e32 <_vfiprintf_r+0x1e6>
 8007e68:	080082c8 	.word	0x080082c8
 8007e6c:	080082d2 	.word	0x080082d2
 8007e70:	08005a79 	.word	0x08005a79
 8007e74:	08007c29 	.word	0x08007c29
 8007e78:	080082ce 	.word	0x080082ce

08007e7c <__swbuf_r>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	460e      	mov	r6, r1
 8007e80:	4614      	mov	r4, r2
 8007e82:	4605      	mov	r5, r0
 8007e84:	b118      	cbz	r0, 8007e8e <__swbuf_r+0x12>
 8007e86:	6a03      	ldr	r3, [r0, #32]
 8007e88:	b90b      	cbnz	r3, 8007e8e <__swbuf_r+0x12>
 8007e8a:	f7fe fa27 	bl	80062dc <__sinit>
 8007e8e:	69a3      	ldr	r3, [r4, #24]
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	071a      	lsls	r2, r3, #28
 8007e96:	d501      	bpl.n	8007e9c <__swbuf_r+0x20>
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	b943      	cbnz	r3, 8007eae <__swbuf_r+0x32>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f82a 	bl	8007ef8 <__swsetup_r>
 8007ea4:	b118      	cbz	r0, 8007eae <__swbuf_r+0x32>
 8007ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8007eaa:	4638      	mov	r0, r7
 8007eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	1a98      	subs	r0, r3, r2
 8007eb4:	6963      	ldr	r3, [r4, #20]
 8007eb6:	b2f6      	uxtb	r6, r6
 8007eb8:	4283      	cmp	r3, r0
 8007eba:	4637      	mov	r7, r6
 8007ebc:	dc05      	bgt.n	8007eca <__swbuf_r+0x4e>
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f7ff fde9 	bl	8007a98 <_fflush_r>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d1ed      	bne.n	8007ea6 <__swbuf_r+0x2a>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	701e      	strb	r6, [r3, #0]
 8007ed8:	6962      	ldr	r2, [r4, #20]
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d004      	beq.n	8007eea <__swbuf_r+0x6e>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	07db      	lsls	r3, r3, #31
 8007ee4:	d5e1      	bpl.n	8007eaa <__swbuf_r+0x2e>
 8007ee6:	2e0a      	cmp	r6, #10
 8007ee8:	d1df      	bne.n	8007eaa <__swbuf_r+0x2e>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7ff fdd3 	bl	8007a98 <_fflush_r>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d0d9      	beq.n	8007eaa <__swbuf_r+0x2e>
 8007ef6:	e7d6      	b.n	8007ea6 <__swbuf_r+0x2a>

08007ef8 <__swsetup_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4b29      	ldr	r3, [pc, #164]	@ (8007fa0 <__swsetup_r+0xa8>)
 8007efc:	4605      	mov	r5, r0
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	460c      	mov	r4, r1
 8007f02:	b118      	cbz	r0, 8007f0c <__swsetup_r+0x14>
 8007f04:	6a03      	ldr	r3, [r0, #32]
 8007f06:	b90b      	cbnz	r3, 8007f0c <__swsetup_r+0x14>
 8007f08:	f7fe f9e8 	bl	80062dc <__sinit>
 8007f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f10:	0719      	lsls	r1, r3, #28
 8007f12:	d422      	bmi.n	8007f5a <__swsetup_r+0x62>
 8007f14:	06da      	lsls	r2, r3, #27
 8007f16:	d407      	bmi.n	8007f28 <__swsetup_r+0x30>
 8007f18:	2209      	movs	r2, #9
 8007f1a:	602a      	str	r2, [r5, #0]
 8007f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	e033      	b.n	8007f90 <__swsetup_r+0x98>
 8007f28:	0758      	lsls	r0, r3, #29
 8007f2a:	d512      	bpl.n	8007f52 <__swsetup_r+0x5a>
 8007f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f2e:	b141      	cbz	r1, 8007f42 <__swsetup_r+0x4a>
 8007f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f34:	4299      	cmp	r1, r3
 8007f36:	d002      	beq.n	8007f3e <__swsetup_r+0x46>
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f7ff f8af 	bl	800709c <_free_r>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f043 0308 	orr.w	r3, r3, #8
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	b94b      	cbnz	r3, 8007f72 <__swsetup_r+0x7a>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f68:	d003      	beq.n	8007f72 <__swsetup_r+0x7a>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f000 f883 	bl	8008078 <__smakebuf_r>
 8007f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f76:	f013 0201 	ands.w	r2, r3, #1
 8007f7a:	d00a      	beq.n	8007f92 <__swsetup_r+0x9a>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	60a2      	str	r2, [r4, #8]
 8007f80:	6962      	ldr	r2, [r4, #20]
 8007f82:	4252      	negs	r2, r2
 8007f84:	61a2      	str	r2, [r4, #24]
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	b942      	cbnz	r2, 8007f9c <__swsetup_r+0xa4>
 8007f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f8e:	d1c5      	bne.n	8007f1c <__swsetup_r+0x24>
 8007f90:	bd38      	pop	{r3, r4, r5, pc}
 8007f92:	0799      	lsls	r1, r3, #30
 8007f94:	bf58      	it	pl
 8007f96:	6962      	ldrpl	r2, [r4, #20]
 8007f98:	60a2      	str	r2, [r4, #8]
 8007f9a:	e7f4      	b.n	8007f86 <__swsetup_r+0x8e>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e7f7      	b.n	8007f90 <__swsetup_r+0x98>
 8007fa0:	2400001c 	.word	0x2400001c

08007fa4 <_raise_r>:
 8007fa4:	291f      	cmp	r1, #31
 8007fa6:	b538      	push	{r3, r4, r5, lr}
 8007fa8:	4605      	mov	r5, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	d904      	bls.n	8007fb8 <_raise_r+0x14>
 8007fae:	2316      	movs	r3, #22
 8007fb0:	6003      	str	r3, [r0, #0]
 8007fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}
 8007fb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fba:	b112      	cbz	r2, 8007fc2 <_raise_r+0x1e>
 8007fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fc0:	b94b      	cbnz	r3, 8007fd6 <_raise_r+0x32>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f000 f830 	bl	8008028 <_getpid_r>
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4601      	mov	r1, r0
 8007fcc:	4628      	mov	r0, r5
 8007fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fd2:	f000 b817 	b.w	8008004 <_kill_r>
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d00a      	beq.n	8007ff0 <_raise_r+0x4c>
 8007fda:	1c59      	adds	r1, r3, #1
 8007fdc:	d103      	bne.n	8007fe6 <_raise_r+0x42>
 8007fde:	2316      	movs	r3, #22
 8007fe0:	6003      	str	r3, [r0, #0]
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	e7e7      	b.n	8007fb6 <_raise_r+0x12>
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007fec:	4620      	mov	r0, r4
 8007fee:	4798      	blx	r3
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e7e0      	b.n	8007fb6 <_raise_r+0x12>

08007ff4 <raise>:
 8007ff4:	4b02      	ldr	r3, [pc, #8]	@ (8008000 <raise+0xc>)
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	6818      	ldr	r0, [r3, #0]
 8007ffa:	f7ff bfd3 	b.w	8007fa4 <_raise_r>
 8007ffe:	bf00      	nop
 8008000:	2400001c 	.word	0x2400001c

08008004 <_kill_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4d07      	ldr	r5, [pc, #28]	@ (8008024 <_kill_r+0x20>)
 8008008:	2300      	movs	r3, #0
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f7f8 fbb8 	bl	8000786 <_kill>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d102      	bne.n	8008020 <_kill_r+0x1c>
 800801a:	682b      	ldr	r3, [r5, #0]
 800801c:	b103      	cbz	r3, 8008020 <_kill_r+0x1c>
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	bf00      	nop
 8008024:	24000614 	.word	0x24000614

08008028 <_getpid_r>:
 8008028:	f7f8 bba5 	b.w	8000776 <_getpid>

0800802c <__swhatbuf_r>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	460c      	mov	r4, r1
 8008030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008034:	2900      	cmp	r1, #0
 8008036:	b096      	sub	sp, #88	@ 0x58
 8008038:	4615      	mov	r5, r2
 800803a:	461e      	mov	r6, r3
 800803c:	da0d      	bge.n	800805a <__swhatbuf_r+0x2e>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008044:	f04f 0100 	mov.w	r1, #0
 8008048:	bf14      	ite	ne
 800804a:	2340      	movne	r3, #64	@ 0x40
 800804c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008050:	2000      	movs	r0, #0
 8008052:	6031      	str	r1, [r6, #0]
 8008054:	602b      	str	r3, [r5, #0]
 8008056:	b016      	add	sp, #88	@ 0x58
 8008058:	bd70      	pop	{r4, r5, r6, pc}
 800805a:	466a      	mov	r2, sp
 800805c:	f000 f848 	bl	80080f0 <_fstat_r>
 8008060:	2800      	cmp	r0, #0
 8008062:	dbec      	blt.n	800803e <__swhatbuf_r+0x12>
 8008064:	9901      	ldr	r1, [sp, #4]
 8008066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800806a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800806e:	4259      	negs	r1, r3
 8008070:	4159      	adcs	r1, r3
 8008072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008076:	e7eb      	b.n	8008050 <__swhatbuf_r+0x24>

08008078 <__smakebuf_r>:
 8008078:	898b      	ldrh	r3, [r1, #12]
 800807a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800807c:	079d      	lsls	r5, r3, #30
 800807e:	4606      	mov	r6, r0
 8008080:	460c      	mov	r4, r1
 8008082:	d507      	bpl.n	8008094 <__smakebuf_r+0x1c>
 8008084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	2301      	movs	r3, #1
 800808e:	6163      	str	r3, [r4, #20]
 8008090:	b003      	add	sp, #12
 8008092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008094:	ab01      	add	r3, sp, #4
 8008096:	466a      	mov	r2, sp
 8008098:	f7ff ffc8 	bl	800802c <__swhatbuf_r>
 800809c:	9f00      	ldr	r7, [sp, #0]
 800809e:	4605      	mov	r5, r0
 80080a0:	4639      	mov	r1, r7
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff f86e 	bl	8007184 <_malloc_r>
 80080a8:	b948      	cbnz	r0, 80080be <__smakebuf_r+0x46>
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	059a      	lsls	r2, r3, #22
 80080b0:	d4ee      	bmi.n	8008090 <__smakebuf_r+0x18>
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	f043 0302 	orr.w	r3, r3, #2
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	e7e2      	b.n	8008084 <__smakebuf_r+0xc>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	6020      	str	r0, [r4, #0]
 80080c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080ce:	b15b      	cbz	r3, 80080e8 <__smakebuf_r+0x70>
 80080d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d4:	4630      	mov	r0, r6
 80080d6:	f000 f81d 	bl	8008114 <_isatty_r>
 80080da:	b128      	cbz	r0, 80080e8 <__smakebuf_r+0x70>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	431d      	orrs	r5, r3
 80080ec:	81a5      	strh	r5, [r4, #12]
 80080ee:	e7cf      	b.n	8008090 <__smakebuf_r+0x18>

080080f0 <_fstat_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	@ (8008110 <_fstat_r+0x20>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f7f8 fba2 	bl	8000846 <_fstat>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d102      	bne.n	800810c <_fstat_r+0x1c>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	b103      	cbz	r3, 800810c <_fstat_r+0x1c>
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	bd38      	pop	{r3, r4, r5, pc}
 800810e:	bf00      	nop
 8008110:	24000614 	.word	0x24000614

08008114 <_isatty_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d06      	ldr	r5, [pc, #24]	@ (8008130 <_isatty_r+0x1c>)
 8008118:	2300      	movs	r3, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	f7f8 fba1 	bl	8000866 <_isatty>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_isatty_r+0x1a>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_isatty_r+0x1a>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	24000614 	.word	0x24000614

08008134 <_init>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	bf00      	nop
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr

08008140 <_fini>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr
